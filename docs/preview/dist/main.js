/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/gl-matrix/esm/common.js":
/*!**********************************************!*\
  !*** ./node_modules/gl-matrix/esm/common.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ARRAY_TYPE\": () => (/* binding */ ARRAY_TYPE),\n/* harmony export */   \"EPSILON\": () => (/* binding */ EPSILON),\n/* harmony export */   \"RANDOM\": () => (/* binding */ RANDOM),\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"setMatrixArrayType\": () => (/* binding */ setMatrixArrayType),\n/* harmony export */   \"toRadian\": () => (/* binding */ toRadian)\n/* harmony export */ });\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nvar RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nfunction toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};\n\n//# sourceURL=webpack://war3-model/./node_modules/gl-matrix/esm/common.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat3.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"adjoint\": () => (/* binding */ adjoint),\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"determinant\": () => (/* binding */ determinant),\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"exactEquals\": () => (/* binding */ exactEquals),\n/* harmony export */   \"frob\": () => (/* binding */ frob),\n/* harmony export */   \"fromMat2d\": () => (/* binding */ fromMat2d),\n/* harmony export */   \"fromMat4\": () => (/* binding */ fromMat4),\n/* harmony export */   \"fromQuat\": () => (/* binding */ fromQuat),\n/* harmony export */   \"fromRotation\": () => (/* binding */ fromRotation),\n/* harmony export */   \"fromScaling\": () => (/* binding */ fromScaling),\n/* harmony export */   \"fromTranslation\": () => (/* binding */ fromTranslation),\n/* harmony export */   \"fromValues\": () => (/* binding */ fromValues),\n/* harmony export */   \"identity\": () => (/* binding */ identity),\n/* harmony export */   \"invert\": () => (/* binding */ invert),\n/* harmony export */   \"mul\": () => (/* binding */ mul),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"multiplyScalar\": () => (/* binding */ multiplyScalar),\n/* harmony export */   \"multiplyScalarAndAdd\": () => (/* binding */ multiplyScalarAndAdd),\n/* harmony export */   \"normalFromMat4\": () => (/* binding */ normalFromMat4),\n/* harmony export */   \"projection\": () => (/* binding */ projection),\n/* harmony export */   \"rotate\": () => (/* binding */ rotate),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"str\": () => (/* binding */ str),\n/* harmony export */   \"sub\": () => (/* binding */ sub),\n/* harmony export */   \"subtract\": () => (/* binding */ subtract),\n/* harmony export */   \"translate\": () => (/* binding */ translate),\n/* harmony export */   \"transpose\": () => (/* binding */ transpose)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nfunction fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nfunction translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nfunction rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nfunction fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nfunction normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nfunction projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n\n//# sourceURL=webpack://war3-model/./node_modules/gl-matrix/esm/mat3.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/mat4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/mat4.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"adjoint\": () => (/* binding */ adjoint),\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"determinant\": () => (/* binding */ determinant),\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"exactEquals\": () => (/* binding */ exactEquals),\n/* harmony export */   \"frob\": () => (/* binding */ frob),\n/* harmony export */   \"fromQuat\": () => (/* binding */ fromQuat),\n/* harmony export */   \"fromQuat2\": () => (/* binding */ fromQuat2),\n/* harmony export */   \"fromRotation\": () => (/* binding */ fromRotation),\n/* harmony export */   \"fromRotationTranslation\": () => (/* binding */ fromRotationTranslation),\n/* harmony export */   \"fromRotationTranslationScale\": () => (/* binding */ fromRotationTranslationScale),\n/* harmony export */   \"fromRotationTranslationScaleOrigin\": () => (/* binding */ fromRotationTranslationScaleOrigin),\n/* harmony export */   \"fromScaling\": () => (/* binding */ fromScaling),\n/* harmony export */   \"fromTranslation\": () => (/* binding */ fromTranslation),\n/* harmony export */   \"fromValues\": () => (/* binding */ fromValues),\n/* harmony export */   \"fromXRotation\": () => (/* binding */ fromXRotation),\n/* harmony export */   \"fromYRotation\": () => (/* binding */ fromYRotation),\n/* harmony export */   \"fromZRotation\": () => (/* binding */ fromZRotation),\n/* harmony export */   \"frustum\": () => (/* binding */ frustum),\n/* harmony export */   \"getRotation\": () => (/* binding */ getRotation),\n/* harmony export */   \"getScaling\": () => (/* binding */ getScaling),\n/* harmony export */   \"getTranslation\": () => (/* binding */ getTranslation),\n/* harmony export */   \"identity\": () => (/* binding */ identity),\n/* harmony export */   \"invert\": () => (/* binding */ invert),\n/* harmony export */   \"lookAt\": () => (/* binding */ lookAt),\n/* harmony export */   \"mul\": () => (/* binding */ mul),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"multiplyScalar\": () => (/* binding */ multiplyScalar),\n/* harmony export */   \"multiplyScalarAndAdd\": () => (/* binding */ multiplyScalarAndAdd),\n/* harmony export */   \"ortho\": () => (/* binding */ ortho),\n/* harmony export */   \"perspective\": () => (/* binding */ perspective),\n/* harmony export */   \"perspectiveFromFieldOfView\": () => (/* binding */ perspectiveFromFieldOfView),\n/* harmony export */   \"rotate\": () => (/* binding */ rotate),\n/* harmony export */   \"rotateX\": () => (/* binding */ rotateX),\n/* harmony export */   \"rotateY\": () => (/* binding */ rotateY),\n/* harmony export */   \"rotateZ\": () => (/* binding */ rotateZ),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"str\": () => (/* binding */ str),\n/* harmony export */   \"sub\": () => (/* binding */ sub),\n/* harmony export */   \"subtract\": () => (/* binding */ subtract),\n/* harmony export */   \"targetTo\": () => (/* binding */ targetTo),\n/* harmony export */   \"translate\": () => (/* binding */ translate),\n/* harmony export */   \"transpose\": () => (/* binding */ transpose)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nfunction translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nfunction fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nfunction fromQuat2(out, a) {\n  var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nfunction getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nfunction getRotation(out, mat) {\n  var scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nfunction perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nfunction ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nfunction lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nfunction targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nfunction str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nfunction frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n\n//# sourceURL=webpack://war3-model/./node_modules/gl-matrix/esm/mat4.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/quat.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/quat.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"calculateW\": () => (/* binding */ calculateW),\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"conjugate\": () => (/* binding */ conjugate),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"dot\": () => (/* binding */ dot),\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"exactEquals\": () => (/* binding */ exactEquals),\n/* harmony export */   \"exp\": () => (/* binding */ exp),\n/* harmony export */   \"fromEuler\": () => (/* binding */ fromEuler),\n/* harmony export */   \"fromMat3\": () => (/* binding */ fromMat3),\n/* harmony export */   \"fromValues\": () => (/* binding */ fromValues),\n/* harmony export */   \"getAngle\": () => (/* binding */ getAngle),\n/* harmony export */   \"getAxisAngle\": () => (/* binding */ getAxisAngle),\n/* harmony export */   \"identity\": () => (/* binding */ identity),\n/* harmony export */   \"invert\": () => (/* binding */ invert),\n/* harmony export */   \"len\": () => (/* binding */ len),\n/* harmony export */   \"length\": () => (/* binding */ length),\n/* harmony export */   \"lerp\": () => (/* binding */ lerp),\n/* harmony export */   \"ln\": () => (/* binding */ ln),\n/* harmony export */   \"mul\": () => (/* binding */ mul),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"normalize\": () => (/* binding */ normalize),\n/* harmony export */   \"pow\": () => (/* binding */ pow),\n/* harmony export */   \"random\": () => (/* binding */ random),\n/* harmony export */   \"rotateX\": () => (/* binding */ rotateX),\n/* harmony export */   \"rotateY\": () => (/* binding */ rotateY),\n/* harmony export */   \"rotateZ\": () => (/* binding */ rotateZ),\n/* harmony export */   \"rotationTo\": () => (/* binding */ rotationTo),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"setAxes\": () => (/* binding */ setAxes),\n/* harmony export */   \"setAxisAngle\": () => (/* binding */ setAxisAngle),\n/* harmony export */   \"slerp\": () => (/* binding */ slerp),\n/* harmony export */   \"sqlerp\": () => (/* binding */ sqlerp),\n/* harmony export */   \"sqrLen\": () => (/* binding */ sqrLen),\n/* harmony export */   \"squaredLength\": () => (/* binding */ squaredLength),\n/* harmony export */   \"str\": () => (/* binding */ str)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mat3.js */ \"./node_modules/gl-matrix/esm/mat3.js\");\n/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ \"./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vec4.js */ \"./node_modules/gl-matrix/esm/vec4.js\");\n\n\n\n\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nfunction identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nfunction setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nfunction getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nfunction getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nfunction multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nfunction rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nfunction rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nfunction rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nfunction calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nfunction exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nfunction ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nfunction pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nfunction random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM();\n  var u2 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM();\n  var u3 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nfunction invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nfunction conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nfunction fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nfunction fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nvar clone = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nvar fromValues = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar copy = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar set = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar add = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar scale = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nvar dot = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar lerp = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nvar length = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nvar squaredLength = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nvar normalize = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nvar exactEquals = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nvar equals = _vec4_js__WEBPACK_IMPORTED_MODULE_1__.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nvar rotationTo = function () {\n  var tmpvec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.create();\n  var xUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.fromValues(1, 0, 0);\n  var yUnitVec3 = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = _vec3_js__WEBPACK_IMPORTED_MODULE_2__.dot(a, b);\n\n    if (dot < -0.999999) {\n      _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, xUnitVec3, a);\n      if (_vec3_js__WEBPACK_IMPORTED_MODULE_2__.len(tmpvec3) < 0.000001) _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, yUnitVec3, a);\n      _vec3_js__WEBPACK_IMPORTED_MODULE_2__.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      _vec3_js__WEBPACK_IMPORTED_MODULE_2__.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nvar sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nvar setAxes = function () {\n  var matr = _mat3_js__WEBPACK_IMPORTED_MODULE_3__.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();\n\n//# sourceURL=webpack://war3-model/./node_modules/gl-matrix/esm/quat.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec3.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec3.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"angle\": () => (/* binding */ angle),\n/* harmony export */   \"bezier\": () => (/* binding */ bezier),\n/* harmony export */   \"ceil\": () => (/* binding */ ceil),\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"cross\": () => (/* binding */ cross),\n/* harmony export */   \"dist\": () => (/* binding */ dist),\n/* harmony export */   \"distance\": () => (/* binding */ distance),\n/* harmony export */   \"div\": () => (/* binding */ div),\n/* harmony export */   \"divide\": () => (/* binding */ divide),\n/* harmony export */   \"dot\": () => (/* binding */ dot),\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"exactEquals\": () => (/* binding */ exactEquals),\n/* harmony export */   \"floor\": () => (/* binding */ floor),\n/* harmony export */   \"forEach\": () => (/* binding */ forEach),\n/* harmony export */   \"fromValues\": () => (/* binding */ fromValues),\n/* harmony export */   \"hermite\": () => (/* binding */ hermite),\n/* harmony export */   \"inverse\": () => (/* binding */ inverse),\n/* harmony export */   \"len\": () => (/* binding */ len),\n/* harmony export */   \"length\": () => (/* binding */ length),\n/* harmony export */   \"lerp\": () => (/* binding */ lerp),\n/* harmony export */   \"max\": () => (/* binding */ max),\n/* harmony export */   \"min\": () => (/* binding */ min),\n/* harmony export */   \"mul\": () => (/* binding */ mul),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"negate\": () => (/* binding */ negate),\n/* harmony export */   \"normalize\": () => (/* binding */ normalize),\n/* harmony export */   \"random\": () => (/* binding */ random),\n/* harmony export */   \"rotateX\": () => (/* binding */ rotateX),\n/* harmony export */   \"rotateY\": () => (/* binding */ rotateY),\n/* harmony export */   \"rotateZ\": () => (/* binding */ rotateZ),\n/* harmony export */   \"round\": () => (/* binding */ round),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"scaleAndAdd\": () => (/* binding */ scaleAndAdd),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"sqrDist\": () => (/* binding */ sqrDist),\n/* harmony export */   \"sqrLen\": () => (/* binding */ sqrLen),\n/* harmony export */   \"squaredDistance\": () => (/* binding */ squaredDistance),\n/* harmony export */   \"squaredLength\": () => (/* binding */ squaredLength),\n/* harmony export */   \"str\": () => (/* binding */ str),\n/* harmony export */   \"sub\": () => (/* binding */ sub),\n/* harmony export */   \"subtract\": () => (/* binding */ subtract),\n/* harmony export */   \"transformMat3\": () => (/* binding */ transformMat3),\n/* harmony export */   \"transformMat4\": () => (/* binding */ transformMat4),\n/* harmony export */   \"transformQuat\": () => (/* binding */ transformQuat),\n/* harmony export */   \"zero\": () => (/* binding */ zero)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nfunction fromValues(x, y, z) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 * Math.PI;\n  var z = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nfunction rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nfunction angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nvar div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nvar dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();\n\n//# sourceURL=webpack://war3-model/./node_modules/gl-matrix/esm/vec3.js?");

/***/ }),

/***/ "./node_modules/gl-matrix/esm/vec4.js":
/*!********************************************!*\
  !*** ./node_modules/gl-matrix/esm/vec4.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"add\": () => (/* binding */ add),\n/* harmony export */   \"ceil\": () => (/* binding */ ceil),\n/* harmony export */   \"clone\": () => (/* binding */ clone),\n/* harmony export */   \"copy\": () => (/* binding */ copy),\n/* harmony export */   \"create\": () => (/* binding */ create),\n/* harmony export */   \"cross\": () => (/* binding */ cross),\n/* harmony export */   \"dist\": () => (/* binding */ dist),\n/* harmony export */   \"distance\": () => (/* binding */ distance),\n/* harmony export */   \"div\": () => (/* binding */ div),\n/* harmony export */   \"divide\": () => (/* binding */ divide),\n/* harmony export */   \"dot\": () => (/* binding */ dot),\n/* harmony export */   \"equals\": () => (/* binding */ equals),\n/* harmony export */   \"exactEquals\": () => (/* binding */ exactEquals),\n/* harmony export */   \"floor\": () => (/* binding */ floor),\n/* harmony export */   \"forEach\": () => (/* binding */ forEach),\n/* harmony export */   \"fromValues\": () => (/* binding */ fromValues),\n/* harmony export */   \"inverse\": () => (/* binding */ inverse),\n/* harmony export */   \"len\": () => (/* binding */ len),\n/* harmony export */   \"length\": () => (/* binding */ length),\n/* harmony export */   \"lerp\": () => (/* binding */ lerp),\n/* harmony export */   \"max\": () => (/* binding */ max),\n/* harmony export */   \"min\": () => (/* binding */ min),\n/* harmony export */   \"mul\": () => (/* binding */ mul),\n/* harmony export */   \"multiply\": () => (/* binding */ multiply),\n/* harmony export */   \"negate\": () => (/* binding */ negate),\n/* harmony export */   \"normalize\": () => (/* binding */ normalize),\n/* harmony export */   \"random\": () => (/* binding */ random),\n/* harmony export */   \"round\": () => (/* binding */ round),\n/* harmony export */   \"scale\": () => (/* binding */ scale),\n/* harmony export */   \"scaleAndAdd\": () => (/* binding */ scaleAndAdd),\n/* harmony export */   \"set\": () => (/* binding */ set),\n/* harmony export */   \"sqrDist\": () => (/* binding */ sqrDist),\n/* harmony export */   \"sqrLen\": () => (/* binding */ sqrLen),\n/* harmony export */   \"squaredDistance\": () => (/* binding */ squaredDistance),\n/* harmony export */   \"squaredLength\": () => (/* binding */ squaredLength),\n/* harmony export */   \"str\": () => (/* binding */ str),\n/* harmony export */   \"sub\": () => (/* binding */ sub),\n/* harmony export */   \"subtract\": () => (/* binding */ subtract),\n/* harmony export */   \"transformMat4\": () => (/* binding */ transformMat4),\n/* harmony export */   \"transformQuat\": () => (/* binding */ transformQuat),\n/* harmony export */   \"zero\": () => (/* binding */ zero)\n/* harmony export */ });\n/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ \"./node_modules/gl-matrix/esm/common.js\");\n\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction create() {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n\n  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction clone(a) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nfunction fromValues(x, y, z, w) {\n  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nfunction set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nfunction cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nfunction random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n    v2 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n    v4 = _common_js__WEBPACK_IMPORTED_MODULE_0__.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nfunction transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nfunction zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nfunction str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nvar sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nvar mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nvar div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nvar dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nvar sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nvar len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nvar sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nvar forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();\n\n//# sourceURL=webpack://war3-model/./node_modules/gl-matrix/esm/vec4.js?");

/***/ }),

/***/ "./third_party/decoder.js":
/*!********************************!*\
  !*** ./third_party/decoder.js ***!
  \********************************/
/***/ ((module) => {

eval("/*\n Copyright 2011 notmasteryet\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n// - The JPEG specification can be found in the ITU CCITT Recommendation T.81\n//   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n// - The JFIF specification can be found in the JPEG File Interchange Format\n//   (www.w3.org/Graphics/JPEG/jfif3.pdf)\n// - The Adobe Application-Specific JPEG markers in the Supporting the DCT Filters\n//   in PostScript Level 2, Technical Note #5116\n//   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\n\n// NOTE: This file was edited to match the crude usage of the JPG format by Blizzard for their BLP1 format.\n\nvar JpegImage = (function jpegImage() {\n    \"use strict\";\n    var dctZigZag = new Int32Array([\n        0,\n        1,  8,\n        16,  9,  2,\n        3, 10, 17, 24,\n        32, 25, 18, 11, 4,\n        5, 12, 19, 26, 33, 40,\n        48, 41, 34, 27, 20, 13,  6,\n        7, 14, 21, 28, 35, 42, 49, 56,\n        57, 50, 43, 36, 29, 22, 15,\n        23, 30, 37, 44, 51, 58,\n        59, 52, 45, 38, 31,\n        39, 46, 53, 60,\n        61, 54, 47,\n        55, 62,\n        63\n    ]);\n\n    var dctCos1  =  4017   // cos(pi/16)\n    var dctSin1  =   799   // sin(pi/16)\n    var dctCos3  =  3406   // cos(3*pi/16)\n    var dctSin3  =  2276   // sin(3*pi/16)\n    var dctCos6  =  1567   // cos(6*pi/16)\n    var dctSin6  =  3784   // sin(6*pi/16)\n    var dctSqrt2 =  5793   // sqrt(2)\n    var dctSqrt1d2 = 2896  // sqrt(2) / 2\n\n    function constructor() {\n    }\n\n    function buildHuffmanTable(codeLengths, values) {\n        var k = 0, code = [], i, j, length = 16;\n        while (length > 0 && !codeLengths[length - 1])\n            length--;\n        code.push({children: [], index: 0});\n        var p = code[0], q;\n        for (i = 0; i < length; i++) {\n            for (j = 0; j < codeLengths[i]; j++) {\n                p = code.pop();\n                p.children[p.index] = values[k];\n                while (p.index > 0) {\n                    p = code.pop();\n                }\n                p.index++;\n                code.push(p);\n                while (code.length <= i) {\n                    code.push(q = {children: [], index: 0});\n                    p.children[p.index] = q.children;\n                    p = q;\n                }\n                k++;\n            }\n            if (i + 1 < length) {\n                // p here points to last code\n                code.push(q = {children: [], index: 0});\n                p.children[p.index] = q.children;\n                p = q;\n            }\n        }\n        return code[0].children;\n    }\n\n    function getBlockBufferOffset(component, row, col) {\n        return 64 * ((component.blocksPerLine + 1) * row + col);\n    }\n\n    function decodeScan(data, offset,\n                        frame, components, resetInterval,\n                        spectralStart, spectralEnd,\n                        successivePrev, successive) {\n        var precision = frame.precision;\n        var samplesPerLine = frame.samplesPerLine;\n        var scanLines = frame.scanLines;\n        var mcusPerLine = frame.mcusPerLine;\n        var progressive = frame.progressive;\n        var maxH = frame.maxH, maxV = frame.maxV;\n\n        var startOffset = offset, bitsData = 0, bitsCount = 0;\n\n        function readBit() {\n            if (bitsCount > 0) {\n                bitsCount--;\n                return (bitsData >> bitsCount) & 1;\n            }\n            bitsData = data[offset++];\n            if (bitsData == 0xFF) {\n                var nextByte = data[offset++];\n                if (nextByte) {\n                    throw \"unexpected marker: \" + ((bitsData << 8) | nextByte).toString(16);\n                }\n                // unstuff 0\n            }\n            bitsCount = 7;\n            return bitsData >>> 7;\n        }\n\n        function decodeHuffman(tree) {\n            var node = tree;\n            var bit;\n            while ((bit = readBit()) !== null) {\n                node = node[bit];\n                if (typeof node === 'number')\n                    return node;\n                if (typeof node !== 'object')\n                    throw \"invalid huffman sequence\";\n            }\n            return null;\n        }\n\n        function receive(length) {\n            var n = 0;\n            while (length > 0) {\n                var bit = readBit();\n                if (bit === null) return;\n                n = (n << 1) | bit;\n                length--;\n            }\n            return n;\n        }\n\n        function receiveAndExtend(length) {\n            var n = receive(length);\n            if (n >= 1 << (length - 1))\n                return n;\n            return n + (-1 << length) + 1;\n        }\n\n        function decodeBaseline(component, offset) {\n            var t = decodeHuffman(component.huffmanTableDC);\n            var diff = t === 0 ? 0 : receiveAndExtend(t);\n            component.blockData[offset] = (component.pred += diff);\n            var k = 1;\n            while (k < 64) {\n                var rs = decodeHuffman(component.huffmanTableAC);\n                var s = rs & 15, r = rs >> 4;\n                if (s === 0) {\n                    if (r < 15)\n                        break;\n                    k += 16;\n                    continue;\n                }\n                k += r;\n                var z = dctZigZag[k];\n                component.blockData[offset + z] = receiveAndExtend(s);\n                k++;\n            }\n        }\n\n        function decodeDCFirst(component, offset) {\n            var t = decodeHuffman(component.huffmanTableDC);\n            var diff = t === 0 ? 0 : (receiveAndExtend(t) << successive);\n            component.blockData[offset] = (component.pred += diff);\n        }\n\n        function decodeDCSuccessive(component, offset) {\n            component.blockData[offset] |= readBit() << successive;\n        }\n\n        var eobrun = 0;\n        function decodeACFirst(component, offset) {\n            if (eobrun > 0) {\n                eobrun--;\n                return;\n            }\n            var k = spectralStart, e = spectralEnd;\n            while (k <= e) {\n                var rs = decodeHuffman(component.huffmanTableAC);\n                var s = rs & 15, r = rs >> 4;\n                if (s === 0) {\n                    if (r < 15) {\n                        eobrun = receive(r) + (1 << r) - 1;\n                        break;\n                    }\n                    k += 16;\n                    continue;\n                }\n                k += r;\n                var z = dctZigZag[k];\n                component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);\n                k++;\n            }\n        }\n\n        var successiveACState = 0, successiveACNextValue;\n        function decodeACSuccessive(component, offset) {\n            var k = spectralStart, e = spectralEnd, r = 0;\n            while (k <= e) {\n                var z = dctZigZag[k];\n                switch (successiveACState) {\n                    case 0: // initial state\n                        var rs = decodeHuffman(component.huffmanTableAC);\n                        var s = rs & 15, r = rs >> 4;\n                        if (s === 0) {\n                            if (r < 15) {\n                                eobrun = receive(r) + (1 << r);\n                                successiveACState = 4;\n                            } else {\n                                r = 16;\n                                successiveACState = 1;\n                            }\n                        } else {\n                            if (s !== 1)\n                                throw \"invalid ACn encoding\";\n                            successiveACNextValue = receiveAndExtend(s);\n                            successiveACState = r ? 2 : 3;\n                        }\n                        continue;\n                    case 1: // skipping r zero items\n                    case 2:\n                        if (component.blockData[offset + z]) {\n                            component.blockData[offset + z] += (readBit() << successive);\n                        } else {\n                            r--;\n                            if (r === 0)\n                                successiveACState = successiveACState == 2 ? 3 : 0;\n                        }\n                        break;\n                    case 3: // set value for a zero item\n                        if (component.blockData[offset + z]) {\n                            component.blockData[offset + z] += (readBit() << successive);\n                        } else {\n                            component.blockData[offset + z] = successiveACNextValue << successive;\n                            successiveACState = 0;\n                        }\n                        break;\n                    case 4: // eob\n                        if (component.blockData[offset + z]) {\n                            component.blockData[offset + z] += (readBit() << successive);\n                        }\n                        break;\n                }\n                k++;\n            }\n            if (successiveACState === 4) {\n                eobrun--;\n                if (eobrun === 0)\n                    successiveACState = 0;\n            }\n        }\n\n        function decodeMcu(component, decode, mcu, row, col) {\n            var mcuRow = (mcu / mcusPerLine) | 0;\n            var mcuCol = mcu % mcusPerLine;\n            var blockRow = mcuRow * component.v + row;\n            var blockCol = mcuCol * component.h + col;\n            var offset = getBlockBufferOffset(component, blockRow, blockCol);\n            decode(component, offset);\n        }\n\n        function decodeBlock(component, decode, mcu) {\n            var blockRow = (mcu / component.blocksPerLine) | 0;\n            var blockCol = mcu % component.blocksPerLine;\n            var offset = getBlockBufferOffset(component, blockRow, blockCol);\n            decode(component, offset);\n        }\n\n        var componentsLength = components.length;\n        var component, i, j, k, n;\n        var decodeFn;\n        if (progressive) {\n            if (spectralStart === 0)\n                decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n            else\n                decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n        } else {\n            decodeFn = decodeBaseline;\n        }\n\n        var mcu = 0, marker;\n        var mcuExpected;\n        if (componentsLength == 1) {\n            mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n        } else {\n            mcuExpected = mcusPerLine * frame.mcusPerColumn;\n        }\n        if (!resetInterval) {\n            resetInterval = mcuExpected;\n        }\n\n        var h, v;\n        while (mcu < mcuExpected) {\n            // reset interval stuff\n            for (i = 0; i < componentsLength; i++) {\n                components[i].pred = 0;\n            }\n            eobrun = 0;\n\n            if (componentsLength == 1) {\n                component = components[0];\n                for (n = 0; n < resetInterval; n++) {\n                    decodeBlock(component, decodeFn, mcu);\n                    mcu++;\n                }\n            } else {\n                for (n = 0; n < resetInterval; n++) {\n                    for (i = 0; i < componentsLength; i++) {\n                        component = components[i];\n                        h = component.h;\n                        v = component.v;\n                        for (j = 0; j < v; j++) {\n                            for (k = 0; k < h; k++) {\n                                decodeMcu(component, decodeFn, mcu, j, k);\n                            }\n                        }\n                    }\n                    mcu++;\n                }\n            }\n\n            // find marker\n            bitsCount = 0;\n            marker = (data[offset] << 8) | data[offset + 1];\n            if (marker <= 0xFF00) {\n                throw \"marker was not found\";\n            }\n\n            if (marker >= 0xFFD0 && marker <= 0xFFD7) { // RSTx\n                offset += 2;\n            } else {\n                break;\n            }\n        }\n\n        return offset - startOffset;\n    }\n\n    // A port of poppler's IDCT method which in turn is taken from:\n    //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n    //   \"Practical Fast 1-D DCT Algorithms with 11 Multiplications\",\n    //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n    //   988-991.\n    function quantizeAndInverse(component, blockBufferOffset, p) {\n        var qt = component.quantizationTable;\n        var v0, v1, v2, v3, v4, v5, v6, v7, t;\n        var i;\n\n        // dequant\n        for (i = 0; i < 64; i++) {\n            p[i] = component.blockData[blockBufferOffset + i] * qt[i];\n        }\n\n        // inverse DCT on rows\n        for (i = 0; i < 8; ++i) {\n            var row = 8 * i;\n\n            // check for all-zero AC coefficients\n            if (p[1 + row] == 0 && p[2 + row] == 0 && p[3 + row] == 0 &&\n                p[4 + row] == 0 && p[5 + row] == 0 && p[6 + row] == 0 &&\n                p[7 + row] == 0) {\n                t = (dctSqrt2 * p[0 + row] + 512) >> 10;\n                p[0 + row] = t;\n                p[1 + row] = t;\n                p[2 + row] = t;\n                p[3 + row] = t;\n                p[4 + row] = t;\n                p[5 + row] = t;\n                p[6 + row] = t;\n                p[7 + row] = t;\n                continue;\n            }\n\n            // stage 4\n            v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;\n            v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;\n            v2 = p[2 + row];\n            v3 = p[6 + row];\n            v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;\n            v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;\n            v5 = p[3 + row] << 4;\n            v6 = p[5 + row] << 4;\n\n            // stage 3\n            t = (v0 - v1+ 1) >> 1;\n            v0 = (v0 + v1 + 1) >> 1;\n            v1 = t;\n            t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n            v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n            v3 = t;\n            t = (v4 - v6 + 1) >> 1;\n            v4 = (v4 + v6 + 1) >> 1;\n            v6 = t;\n            t = (v7 + v5 + 1) >> 1;\n            v5 = (v7 - v5 + 1) >> 1;\n            v7 = t;\n\n            // stage 2\n            t = (v0 - v3 + 1) >> 1;\n            v0 = (v0 + v3 + 1) >> 1;\n            v3 = t;\n            t = (v1 - v2 + 1) >> 1;\n            v1 = (v1 + v2 + 1) >> 1;\n            v2 = t;\n            t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n            v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n            v7 = t;\n            t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n            v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n            v6 = t;\n\n            // stage 1\n            p[0 + row] = v0 + v7;\n            p[7 + row] = v0 - v7;\n            p[1 + row] = v1 + v6;\n            p[6 + row] = v1 - v6;\n            p[2 + row] = v2 + v5;\n            p[5 + row] = v2 - v5;\n            p[3 + row] = v3 + v4;\n            p[4 + row] = v3 - v4;\n        }\n\n        // inverse DCT on columns\n        for (i = 0; i < 8; ++i) {\n            var col = i;\n\n            // check for all-zero AC coefficients\n            if (p[1*8 + col] == 0 && p[2*8 + col] == 0 && p[3*8 + col] == 0 &&\n                p[4*8 + col] == 0 && p[5*8 + col] == 0 && p[6*8 + col] == 0 &&\n                p[7*8 + col] == 0) {\n                t = (dctSqrt2 * p[i+0] + 8192) >> 14;\n                p[0*8 + col] = t;\n                p[1*8 + col] = t;\n                p[2*8 + col] = t;\n                p[3*8 + col] = t;\n                p[4*8 + col] = t;\n                p[5*8 + col] = t;\n                p[6*8 + col] = t;\n                p[7*8 + col] = t;\n                continue;\n            }\n\n            // stage 4\n            v0 = (dctSqrt2 * p[0*8 + col] + 2048) >> 12;\n            v1 = (dctSqrt2 * p[4*8 + col] + 2048) >> 12;\n            v2 = p[2*8 + col];\n            v3 = p[6*8 + col];\n            v4 = (dctSqrt1d2 * (p[1*8 + col] - p[7*8 + col]) + 2048) >> 12;\n            v7 = (dctSqrt1d2 * (p[1*8 + col] + p[7*8 + col]) + 2048) >> 12;\n            v5 = p[3*8 + col];\n            v6 = p[5*8 + col];\n\n            // stage 3\n            t = (v0 - v1 + 1) >> 1;\n            v0 = (v0 + v1 + 1) >> 1;\n            v1 = t;\n            t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n            v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n            v3 = t;\n            t = (v4 - v6 + 1) >> 1;\n            v4 = (v4 + v6 + 1) >> 1;\n            v6 = t;\n            t = (v7 + v5 + 1) >> 1;\n            v5 = (v7 - v5 + 1) >> 1;\n            v7 = t;\n\n            // stage 2\n            t = (v0 - v3 + 1) >> 1;\n            v0 = (v0 + v3 + 1) >> 1;\n            v3 = t;\n            t = (v1 - v2 + 1) >> 1;\n            v1 = (v1 + v2 + 1) >> 1;\n            v2 = t;\n            t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n            v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n            v7 = t;\n            t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n            v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n            v6 = t;\n\n            // stage 1\n            p[0*8 + col] = v0 + v7;\n            p[7*8 + col] = v0 - v7;\n            p[1*8 + col] = v1 + v6;\n            p[6*8 + col] = v1 - v6;\n            p[2*8 + col] = v2 + v5;\n            p[5*8 + col] = v2 - v5;\n            p[3*8 + col] = v3 + v4;\n            p[4*8 + col] = v3 - v4;\n        }\n\n        // convert to 8-bit integers\n        for (i = 0; i < 64; ++i) {\n            var index = blockBufferOffset + i;\n            var q = p[i];\n            q = (q <= -2056) ? 0 : (q >= 2024) ? 255 : (q + 2056) >> 4;\n            component.blockData[index] = q;\n        }\n    }\n\n    function buildComponentData(frame, component) {\n        var lines = [];\n        var blocksPerLine = component.blocksPerLine;\n        var blocksPerColumn = component.blocksPerColumn;\n        var samplesPerLine = blocksPerLine << 3;\n        var computationBuffer = new Int32Array(64);\n\n        var i, j, ll = 0;\n        for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n            for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n                var offset = getBlockBufferOffset(component, blockRow, blockCol)\n                quantizeAndInverse(component, offset, computationBuffer);\n            }\n        }\n        return component.blockData;\n    }\n\n    function clampToUint8(a) {\n        return a <= 0 ? 0 : a >= 255 ? 255 : a | 0;\n    }\n\n    constructor.prototype = {\n        load: function load(path) {\n            var xhr = new XMLHttpRequest();\n            xhr.open(\"GET\", path, true);\n            xhr.responseType = \"arraybuffer\";\n            xhr.onload = (function() {\n                // TODO catch parse error\n                var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);\n                this.parse(data);\n                if (this.onload)\n                    this.onload();\n            }).bind(this);\n            xhr.send(null);\n        },\n\n        loadFromBuffer: function loadFromBuffer(arrayBuffer) {\n            this.parse(arrayBuffer);\n            if (this.onload)\n                this.onload();\n        },\n\n        parse: function parse(data) {\n\n            function readUint16() {\n                var value = (data[offset] << 8) | data[offset + 1];\n                offset += 2;\n                return value;\n            }\n\n            function readDataBlock() {\n                var length = readUint16();\n                var array = data.subarray(offset, offset + length - 2);\n                offset += array.length;\n                return array;\n            }\n\n            function prepareComponents(frame) {\n                var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n                var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n                for (var i = 0; i < frame.components.length; i++) {\n                    component = frame.components[i];\n                    var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);\n                    var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines  / 8) * component.v / frame.maxV);\n                    var blocksPerLineForMcu = mcusPerLine * component.h;\n                    var blocksPerColumnForMcu = mcusPerColumn * component.v;\n\n                    var blocksBufferSize = 64 * blocksPerColumnForMcu\n                        * (blocksPerLineForMcu + 1);\n                    component.blockData = new Int16Array(blocksBufferSize);\n                    component.blocksPerLine = blocksPerLine;\n                    component.blocksPerColumn = blocksPerColumn;\n                }\n                frame.mcusPerLine = mcusPerLine;\n                frame.mcusPerColumn = mcusPerColumn;\n            }\n\n            var offset = 0, length = data.length;\n            var jfif = null;\n            var adobe = null;\n            var pixels = null;\n            var frame, resetInterval;\n            var quantizationTables = [];\n            var huffmanTablesAC = [], huffmanTablesDC = [];\n            var fileMarker = readUint16();\n            if (fileMarker != 0xFFD8) { // SOI (Start of Image)\n                throw \"SOI not found\";\n            }\n\n            fileMarker = readUint16();\n            while (fileMarker != 0xFFD9) { // EOI (End of image)\n                var i, j, l;\n                switch(fileMarker) {\n                    case 0xFFE0: // APP0 (Application Specific)\n                    case 0xFFE1: // APP1\n                    case 0xFFE2: // APP2\n                    case 0xFFE3: // APP3\n                    case 0xFFE4: // APP4\n                    case 0xFFE5: // APP5\n                    case 0xFFE6: // APP6\n                    case 0xFFE7: // APP7\n                    case 0xFFE8: // APP8\n                    case 0xFFE9: // APP9\n                    case 0xFFEA: // APP10\n                    case 0xFFEB: // APP11\n                    case 0xFFEC: // APP12\n                    case 0xFFED: // APP13\n                    case 0xFFEE: // APP14\n                    case 0xFFEF: // APP15\n                    case 0xFFFE: // COM (Comment)\n                        var appData = readDataBlock();\n\n                        if (fileMarker === 0xFFE0) {\n                            if (appData[0] === 0x4A && appData[1] === 0x46 && appData[2] === 0x49 &&\n                                appData[3] === 0x46 && appData[4] === 0) { // 'JFIF\\x00'\n                                jfif = {\n                                    version: { major: appData[5], minor: appData[6] },\n                                    densityUnits: appData[7],\n                                    xDensity: (appData[8] << 8) | appData[9],\n                                    yDensity: (appData[10] << 8) | appData[11],\n                                    thumbWidth: appData[12],\n                                    thumbHeight: appData[13],\n                                    thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                                };\n                            }\n                        }\n                        // TODO APP1 - Exif\n                        if (fileMarker === 0xFFEE) {\n                            if (appData[0] === 0x41 && appData[1] === 0x64 && appData[2] === 0x6F &&\n                                appData[3] === 0x62 && appData[4] === 0x65 && appData[5] === 0) { // 'Adobe\\x00'\n                                adobe = {\n                                    version: appData[6],\n                                    flags0: (appData[7] << 8) | appData[8],\n                                    flags1: (appData[9] << 8) | appData[10],\n                                    transformCode: appData[11]\n                                };\n                            }\n                        }\n                        break;\n\n                    case 0xFFDB: // DQT (Define Quantization Tables)\n                        var quantizationTablesLength = readUint16();\n                        var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n                        while (offset < quantizationTablesEnd) {\n                            var quantizationTableSpec = data[offset++];\n                            var tableData = new Int32Array(64);\n                            if ((quantizationTableSpec >> 4) === 0) { // 8 bit values\n                                for (j = 0; j < 64; j++) {\n                                    var z = dctZigZag[j];\n                                    tableData[z] = data[offset++];\n                                }\n                            } else if ((quantizationTableSpec >> 4) === 1) { //16 bit\n                                for (j = 0; j < 64; j++) {\n                                    var z = dctZigZag[j];\n                                    tableData[z] = readUint16();\n                                }\n                            } else\n                                throw \"DQT: invalid table spec\";\n                            quantizationTables[quantizationTableSpec & 15] = tableData;\n                        }\n                        break;\n\n                    case 0xFFC0: // SOF0 (Start of Frame, Baseline DCT)\n                    case 0xFFC1: // SOF1 (Start of Frame, Extended DCT)\n                    case 0xFFC2: // SOF2 (Start of Frame, Progressive DCT)\n                        if (frame) {\n                            throw \"Only single frame JPEGs supported\";\n                        }\n                        readUint16(); // skip data length\n                        frame = {};\n                        frame.extended = (fileMarker === 0xFFC1);\n                        frame.progressive = (fileMarker === 0xFFC2);\n                        frame.precision = data[offset++];\n                        frame.scanLines = readUint16();\n                        frame.samplesPerLine = readUint16();\n                        frame.components = [];\n                        frame.componentIds = {};\n                        var componentsCount = data[offset++], componentId;\n                        var maxH = 0, maxV = 0;\n                        for (i = 0; i < componentsCount; i++) {\n                            componentId = data[offset];\n                            var h = data[offset + 1] >> 4;\n                            var v = data[offset + 1] & 15;\n                            if (maxH < h) maxH = h;\n                            if (maxV < v) maxV = v;\n                            var qId = data[offset + 2];\n                            var l = frame.components.push({\n                                h: h,\n                                v: v,\n                                quantizationTable: quantizationTables[qId]\n                            });\n                            frame.componentIds[componentId] = l - 1;\n                            offset += 3;\n                        }\n                        frame.maxH = maxH;\n                        frame.maxV = maxV;\n                        prepareComponents(frame);\n                        break;\n\n                    case 0xFFC4: // DHT (Define Huffman Tables)\n                        var huffmanLength = readUint16();\n                        for (i = 2; i < huffmanLength;) {\n                            var huffmanTableSpec = data[offset++];\n                            var codeLengths = new Uint8Array(16);\n                            var codeLengthSum = 0;\n                            for (j = 0; j < 16; j++, offset++)\n                                codeLengthSum += (codeLengths[j] = data[offset]);\n                            var huffmanValues = new Uint8Array(codeLengthSum);\n                            for (j = 0; j < codeLengthSum; j++, offset++)\n                                huffmanValues[j] = data[offset];\n                            i += 17 + codeLengthSum;\n\n                            ((huffmanTableSpec >> 4) === 0 ?\n                                huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] =\n                                buildHuffmanTable(codeLengths, huffmanValues);\n                        }\n                        break;\n\n                    case 0xFFDD: // DRI (Define Restart Interval)\n                        readUint16(); // skip data length\n                        resetInterval = readUint16();\n                        break;\n\n                    case 0xFFDA: // SOS (Start of Scan)\n                        var scanLength = readUint16();\n                        var selectorsCount = data[offset++];\n                        var components = [], component;\n                        for (i = 0; i < selectorsCount; i++) {\n                            var componentIndex = frame.componentIds[data[offset++]];\n                            component = frame.components[componentIndex];\n                            var tableSpec = data[offset++];\n                            component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n                            component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n                            components.push(component);\n                        }\n                        var spectralStart = data[offset++];\n                        var spectralEnd = data[offset++];\n                        var successiveApproximation = data[offset++];\n                        var processed = decodeScan(data, offset,\n                            frame, components, resetInterval,\n                            spectralStart, spectralEnd,\n                            successiveApproximation >> 4, successiveApproximation & 15);\n                        offset += processed;\n                        break;\n                    default:\n                        if (data[offset - 3] == 0xFF &&\n                            data[offset - 2] >= 0xC0 && data[offset - 2] <= 0xFE) {\n                            // could be incorrect encoding -- last 0xFF byte of the previous\n                            // block was eaten by the encoder\n                            offset -= 3;\n                            break;\n                        }\n                        throw \"unknown JPEG marker \" + fileMarker.toString(16);\n                }\n                fileMarker = readUint16();\n            }\n\n            this.width = frame.samplesPerLine;\n            this.height = frame.scanLines;\n            this.jfif = jfif;\n            this.adobe = adobe;\n            this.components = [];\n            for (var i = 0; i < frame.components.length; i++) {\n                var component = frame.components[i];\n                this.components.push({\n                    output: buildComponentData(frame, component),\n                    scaleX: component.h / frame.maxH,\n                    scaleY: component.v / frame.maxV,\n                    blocksPerLine: component.blocksPerLine,\n                    blocksPerColumn: component.blocksPerColumn\n                });\n            }\n        },\n\n        getData: function getData(imageData, width, height) {\n            var scaleX = this.width / width, scaleY = this.height / height;\n\n            var component, componentScaleX, componentScaleY;\n            var x, y, i;\n            var offset = 0;\n            var Y, Cb, Cr, K, C, M, Ye, R, G, B;\n            var colorTransform;\n            var numComponents = this.components.length;\n            var dataLength = width * height * numComponents;\n            //var data = new Uint8Array(dataLength);\n            var data = imageData.data;\n            var componentLine;\n\n            // lineData is reused for all components. Assume first component is\n            // the biggest\n            var lineData = new Uint8Array((this.components[0].blocksPerLine << 3) *\n                this.components[0].blocksPerColumn * 8);\n\n            // First construct image data ...\n            for (i = 0; i < numComponents; i++) {\n                component = this.components[i < 3 ? 2 - i : i];\n                var blocksPerLine = component.blocksPerLine;\n                var blocksPerColumn = component.blocksPerColumn;\n                var samplesPerLine = blocksPerLine << 3;\n\n                var j, k, ll = 0;\n                var lineOffset = 0;\n                for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n                    var scanLine = blockRow << 3;\n                    for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n                        var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);\n                        var offset = 0, sample = blockCol << 3;\n                        for (j = 0; j < 8; j++) {\n                            var lineOffset = (scanLine + j) * samplesPerLine;\n                            for (k = 0; k < 8; k++) {\n                                lineData[lineOffset + sample + k] =\n                                    component.output[bufferOffset + offset++];\n                            }\n                        }\n                    }\n                }\n\n                componentScaleX = component.scaleX * scaleX;\n                componentScaleY = component.scaleY * scaleY;\n                offset = i;\n\n                var cx, cy;\n                var index;\n                for (y = 0; y < height; y++) {\n                    for (x = 0; x < width; x++) {\n                        cy = 0 | (y * componentScaleY);\n                        cx = 0 | (x * componentScaleX);\n                        index = cy * samplesPerLine + cx;\n                        data[offset] = lineData[index];\n                        offset += numComponents;\n                    }\n                }\n            }\n\n          /*\n           // ... then transform colors, if necessary\n           switch (numComponents) {\n           case 1: case 2: break;\n           // no color conversion for one or two compoenents\n\n           case 3:\n           // The default transform for three components is true\n           colorTransform = true;\n           // The adobe transform marker overrides any previous setting\n           if (this.adobe && this.adobe.transformCode)\n           colorTransform = true;\n           else if (typeof this.colorTransform !== 'undefined')\n           colorTransform = !!this.colorTransform;\n\n           if (colorTransform) {\n           for (i = 0; i < dataLength; i += numComponents) {\n           Y  = data[i    ];\n           Cb = data[i + 1];\n           Cr = data[i + 2];\n\n           R = clampToUint8(Y - 179.456 + 1.402 * Cr);\n           G = clampToUint8(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);\n           B = clampToUint8(Y - 226.816 + 1.772 * Cb);\n\n           data[i    ] = R;\n           data[i + 1] = G;\n           data[i + 2] = B;\n           }\n           }\n           break;\n           case 4:\n           console.log(this.colorTransform);\n           if (!this.adobe)\n           throw 'Unsupported color mode (4 components)';\n           // The default transform for four components is false\n           colorTransform = false;\n           // The adobe transform marker overrides any previous setting\n           if (this.adobe && this.adobe.transformCode)\n           colorTransform = true;\n           else if (typeof this.colorTransform !== 'undefined')\n           colorTransform = !!this.colorTransform;\n\n           if (colorTransform) {\n           for (i = 0; i < dataLength; i += numComponents) {\n           Y  = data[i];\n           Cb = data[i + 1];\n           Cr = data[i + 2];\n\n           C = clampToUint8(434.456 - Y - 1.402 * Cr);\n           M = clampToUint8(119.541 - Y + 0.344 * Cb + 0.714 * Cr);\n           Y = clampToUint8(481.816 - Y - 1.772 * Cb);\n\n           data[i    ] = C;\n           data[i + 1] = M;\n           data[i + 2] = Y;\n           // K is unchanged\n           }\n           }\n           break;\n           default:\n           throw 'Unsupported color mode';\n           }\n           */\n            return data;\n        },\n        copyToImageData: function copyToImageData(imageData) {\n            var width = imageData.width, height = imageData.height;\n            var imageDataBytes = width * height * 4;\n            var imageDataArray = imageData.data;\n            var data = this.getData(width, height);\n            var i = 0, j = 0, k0, k1;\n            var Y, K, C, M, R, G, B;\n            switch (this.components.length) {\n                case 1:\n                    while (j < imageDataBytes) {\n                        Y = data[i++];\n\n                        imageDataArray[j++] = Y;\n                        imageDataArray[j++] = Y;\n                        imageDataArray[j++] = Y;\n                        imageDataArray[j++] = 255;\n                    }\n                    break;\n                case 3:\n                    while (j < imageDataBytes) {\n                        R = data[i++];\n                        G = data[i++];\n                        B = data[i++];\n\n                        imageDataArray[j++] = R;\n                        imageDataArray[j++] = G;\n                        imageDataArray[j++] = B;\n                        imageDataArray[j++] = 255;\n                    }\n                    break;\n                case 4:\n                    while (j < imageDataBytes) {\n                        C = data[i++];\n                        M = data[i++];\n                        Y = data[i++];\n                        K = data[i++];\n\n                        k0 = 255 - K;\n                        k1 = k0 / 255;\n\n\n                        R = clampToUint8(k0 - C * k1);\n                        G = clampToUint8(k0 - M * k1);\n                        B = clampToUint8(k0 - Y * k1);\n\n                        imageDataArray[j++] = R;\n                        imageDataArray[j++] = G;\n                        imageDataArray[j++] = B;\n                        imageDataArray[j++] = 255;\n                    }\n                    break;\n                default:\n                    throw 'Unsupported color mode';\n            }\n        }\n    };\n\n    return constructor;\n})();\n\nmodule.exports = function decode (data) {\n    const jpegImage = new JpegImage();\n\n    jpegImage.loadFromBuffer(data);\n\n    var imageData;\n    if (typeof ImageData !== 'undefined') {\n        imageData = new ImageData(jpegImage.width, jpegImage.height);\n    } else {\n        imageData = {\n            width: jpegImage.width,\n            height: jpegImage.height,\n            data: new Uint8ClampedArray(jpegImage.width * jpegImage.height * 4)\n        };\n    }\n    jpegImage.getData(imageData, jpegImage.width, jpegImage.height);\n\n    return imageData;\n};\n\n\n//# sourceURL=webpack://war3-model/./third_party/decoder.js?");

/***/ }),

/***/ "./blp/blpimage.ts":
/*!*************************!*\
  !*** ./blp/blpimage.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BLPContent\": () => (/* binding */ BLPContent),\n/* harmony export */   \"BLPType\": () => (/* binding */ BLPType)\n/* harmony export */ });\nvar BLPType;\n(function (BLPType) {\n    BLPType[BLPType[\"BLP0\"] = 0] = \"BLP0\";\n    BLPType[BLPType[\"BLP1\"] = 1] = \"BLP1\";\n    BLPType[BLPType[\"BLP2\"] = 2] = \"BLP2\";\n})(BLPType || (BLPType = {}));\nvar BLPContent;\n(function (BLPContent) {\n    BLPContent[BLPContent[\"JPEG\"] = 0] = \"JPEG\";\n    BLPContent[BLPContent[\"Direct\"] = 1] = \"Direct\";\n})(BLPContent || (BLPContent = {}));\n\n\n//# sourceURL=webpack://war3-model/./blp/blpimage.ts?");

/***/ }),

/***/ "./blp/decode.ts":
/*!***********************!*\
  !*** ./blp/decode.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"decode\": () => (/* binding */ decode),\n/* harmony export */   \"getImageData\": () => (/* binding */ getImageData)\n/* harmony export */ });\n/* harmony import */ var _third_party_decoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../third_party/decoder */ \"./third_party/decoder.js\");\n/* harmony import */ var _third_party_decoder__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_third_party_decoder__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _blpimage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blpimage */ \"./blp/blpimage.ts\");\n\n\nfunction keyword(view, offset) {\n    return String.fromCharCode(view.getUint8(offset), view.getUint8(offset + 1), view.getUint8(offset + 2), view.getUint8(offset + 3));\n}\nfunction uint32(view, offset) {\n    return view.getUint32(offset * 4, true);\n}\nfunction bitVal(data, bitCount, index) {\n    // only 1, 4 or 8 bits\n    var byte = data[Math.floor(index * bitCount / 8)], valsPerByte = 8 / bitCount;\n    return (byte >> (valsPerByte - index % valsPerByte - 1)) & ((1 << bitCount) - 1);\n}\n// node.js have no native ImageData\nfunction createImageData(width, height) {\n    if (typeof ImageData !== 'undefined') {\n        return new ImageData(width, height);\n    }\n    else {\n        return {\n            width: width,\n            height: height,\n            data: new Uint8ClampedArray(width * height * 4),\n            colorSpace: 'srgb'\n        };\n    }\n}\nfunction decode(arrayBuffer) {\n    var view = new DataView(arrayBuffer);\n    var image = {\n        type: _blpimage__WEBPACK_IMPORTED_MODULE_1__.BLPType.BLP1,\n        width: 0,\n        height: 0,\n        content: _blpimage__WEBPACK_IMPORTED_MODULE_1__.BLPContent.JPEG,\n        alphaBits: 0,\n        mipmaps: [],\n        data: arrayBuffer,\n    };\n    var type = keyword(view, 0);\n    if (type === 'BLP0' || type === 'BLP2') {\n        throw new Error('BLP0/BLP2 not supported');\n    }\n    if (type !== 'BLP1') {\n        throw new Error('Not a blp image');\n    }\n    image.content = uint32(view, 1);\n    if (image.content !== _blpimage__WEBPACK_IMPORTED_MODULE_1__.BLPContent.JPEG && image.content !== _blpimage__WEBPACK_IMPORTED_MODULE_1__.BLPContent.Direct) {\n        throw new Error('Unknown BLP content');\n    }\n    image.alphaBits = uint32(view, 2);\n    image.width = uint32(view, 3);\n    image.height = uint32(view, 4);\n    for (var i = 0; i < 16; ++i) {\n        var mipmap = {\n            offset: uint32(view, 7 + i),\n            size: uint32(view, 7 + 16 + i)\n        };\n        if (mipmap.size > 0) {\n            image.mipmaps.push(mipmap);\n        }\n        else {\n            break;\n        }\n    }\n    return image;\n}\nfunction getImageData(blp, mipmapLevel) {\n    var view = new DataView(blp.data), uint8Data = new Uint8Array(blp.data), mipmap = blp.mipmaps[mipmapLevel];\n    if (blp.content === _blpimage__WEBPACK_IMPORTED_MODULE_1__.BLPContent.JPEG) {\n        var headerSize = uint32(view, 39), data = new Uint8Array(headerSize + mipmap.size);\n        data.set(uint8Data.subarray(40 * 4, 40 * 4 + headerSize));\n        data.set(uint8Data.subarray(mipmap.offset, mipmap.offset + mipmap.size), headerSize);\n        return _third_party_decoder__WEBPACK_IMPORTED_MODULE_0___default()(data);\n    }\n    else {\n        var palette = new Uint8Array(blp.data, 39 * 4, 256 * 4), width = blp.width / (1 << mipmapLevel), height = blp.height / (1 << mipmapLevel), size = width * height, alphaData = new Uint8Array(blp.data, mipmap.offset + size, Math.ceil(size * blp.alphaBits / 8)), imageData = createImageData(width, height), valPerAlphaBit = 255 / ((1 << blp.alphaBits) - 1);\n        for (var i = 0; i < size; ++i) {\n            var paletteIndex = view.getUint8(mipmap.offset + i) * 4;\n            // BGRA order\n            imageData.data[i * 4] = palette[paletteIndex + 2];\n            imageData.data[i * 4 + 1] = palette[paletteIndex + 1];\n            imageData.data[i * 4 + 2] = palette[paletteIndex];\n            if (blp.alphaBits > 0) {\n                imageData.data[i * 4 + 3] = bitVal(alphaData, blp.alphaBits, i) * valPerAlphaBit;\n            }\n            else {\n                imageData.data[i * 4 + 3] = 255;\n            }\n        }\n        return imageData;\n    }\n}\n\n\n//# sourceURL=webpack://war3-model/./blp/decode.ts?");

/***/ }),

/***/ "./docs/common/shim.ts":
/*!*****************************!*\
  !*** ./docs/common/shim.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nif (!Float32Array.prototype.reverse) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    Float32Array.prototype.reverse = Array.prototype.reverse;\n}\n\n\n\n//# sourceURL=webpack://war3-model/./docs/common/shim.ts?");

/***/ }),

/***/ "./docs/preview/preview.ts":
/*!*********************************!*\
  !*** ./docs/preview/preview.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/mat4.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/quat.js\");\n/* harmony import */ var dds_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dds-parser */ \"./node_modules/dds-parser/dist/es/dds-parser.js\");\n/* harmony import */ var _mdl_parse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../mdl/parse */ \"./mdl/parse.ts\");\n/* harmony import */ var _mdx_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../mdx/parse */ \"./mdx/parse.ts\");\n/* harmony import */ var _renderer_modelRenderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../renderer/modelRenderer */ \"./renderer/modelRenderer.ts\");\n/* harmony import */ var _renderer_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../renderer/util */ \"./renderer/util.ts\");\n/* harmony import */ var _blp_decode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../blp/decode */ \"./blp/decode.ts\");\n/* harmony import */ var _common_shim__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/shim */ \"./docs/common/shim.ts\");\n\n\n\n\n\n\n\n\nvar model;\nvar modelRenderer;\nvar canvas;\nvar gl;\nvar pMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_7__.create();\nvar mvMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_7__.create();\nvar lightMVMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_7__.create();\nvar shadowMapMatrix = gl_matrix__WEBPACK_IMPORTED_MODULE_7__.create();\nvar CLEANUP_NAME_REGEXP = /.*?([^\\\\/]+)\\.\\w+$/;\nvar ddsExt = null;\nvar rgtcExt = null;\nvar SHADOW_QUALITY = 4096;\nvar FB_WIDTH = SHADOW_QUALITY;\nvar FB_HEIGHT = SHADOW_QUALITY;\nvar framebuffer;\nvar framebufferTexture;\nvar framebufferDepthTexture;\nvar cameraTheta = Math.PI / 4;\nvar cameraPhi = 0;\nvar cameraDistance = 500;\nvar cameraTargetZ = 50;\nvar wireframe = false;\nvar showSkeleton = false;\nvar skeletonNodes = null;\nvar shadow = true;\nvar cameraBasePos = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.create();\nvar cameraPos = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.create();\nvar cameraPosTemp = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.create();\nvar cameraTarget = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.create();\nvar cameraUp = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.fromValues(0, 0, 1);\n// const cameraQuat: quat = quat.create();\nvar lightPosition = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.fromValues(200, 200, 200);\nvar lightTarget = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.fromValues(0, 0, 0);\nvar lightColor = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.fromValues(1, 1, 1);\nvar start;\nfunction updateModel(timestamp) {\n    if (!start) {\n        start = timestamp;\n    }\n    var delta = timestamp - start;\n    // delta /= 10;\n    start = timestamp;\n    modelRenderer.update(delta);\n}\nfunction initGL() {\n    if (gl) {\n        return;\n    }\n    try {\n        var opts = {\n            antialias: false,\n            alpha: false\n        };\n        gl = canvas.getContext('webgl2', opts) ||\n            canvas.getContext('webgl', opts) ||\n            canvas.getContext('experimental-webgl', opts);\n        var supportShadows = false;\n        if (gl instanceof WebGLRenderingContext) {\n            var depthExt = gl.getExtension('WEBGL_depth_texture');\n            if (depthExt) {\n                supportShadows = true;\n            }\n        }\n        else {\n            supportShadows = true;\n        }\n        ddsExt = (gl.getExtension('WEBGL_compressed_texture_s3tc') ||\n            gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||\n            gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc'));\n        rgtcExt = (gl.getExtension('EXT_texture_compression_rgtc'));\n        if (supportShadows) {\n            framebuffer = gl.createFramebuffer();\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n            framebufferTexture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, framebufferTexture);\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, FB_WIDTH, FB_HEIGHT, 0, gl.RGB, gl.UNSIGNED_BYTE, null);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, framebufferTexture, 0);\n            framebufferDepthTexture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, framebufferDepthTexture);\n            if (gl instanceof WebGLRenderingContext) {\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT, FB_WIDTH, FB_HEIGHT, 0, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT, null);\n            }\n            else {\n                gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_COMPONENT32F, FB_WIDTH, FB_HEIGHT, 0, gl.DEPTH_COMPONENT, gl.FLOAT, null);\n            }\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, framebufferDepthTexture, 0);\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        }\n        gl.clearColor(0.15, 0.15, 0.15, 1.0);\n        gl.enable(gl.DEPTH_TEST);\n        gl.depthFunc(gl.LEQUAL);\n    }\n    catch (err) {\n        alert(err);\n    }\n}\nvar cameraPosProjected = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.create();\nvar verticalQuat = gl_matrix__WEBPACK_IMPORTED_MODULE_9__.create();\nvar fromCameraBaseVec = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.fromValues(1, 0, 0);\nfunction calcCameraQuat(cameraPos, cameraTarget) {\n    gl_matrix__WEBPACK_IMPORTED_MODULE_8__.set(cameraPosProjected, cameraPos[0], cameraPos[1], 0);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_8__.subtract(cameraPosTemp, cameraPos, cameraTarget);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_8__.normalize(cameraPosProjected, cameraPosProjected);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_8__.normalize(cameraPosTemp, cameraPosTemp);\n    var cameraQuat = gl_matrix__WEBPACK_IMPORTED_MODULE_9__.create();\n    gl_matrix__WEBPACK_IMPORTED_MODULE_9__.rotationTo(cameraQuat, fromCameraBaseVec, cameraPosProjected);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_9__.rotationTo(verticalQuat, cameraPosProjected, cameraPosTemp);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_9__.mul(cameraQuat, verticalQuat, cameraQuat);\n    return cameraQuat;\n}\nfunction drawScene() {\n    gl.depthMask(true);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_7__.perspective(pMatrix, Math.PI / 4, canvas.width / canvas.height, 0.1, 2000.0);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_8__.set(cameraBasePos, Math.cos(cameraTheta) * Math.cos(cameraPhi) * cameraDistance, Math.cos(cameraTheta) * Math.sin(cameraPhi) * cameraDistance, Math.sin(cameraTheta) * cameraDistance);\n    cameraTarget[2] = cameraTargetZ;\n    (0,_renderer_util__WEBPACK_IMPORTED_MODULE_4__.vec3RotateZ)(cameraPos, cameraBasePos, window['angle'] || 0);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_7__.lookAt(mvMatrix, cameraPos, cameraTarget, cameraUp);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_7__.lookAt(lightMVMatrix, lightPosition, lightTarget, cameraUp);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_7__.identity(shadowMapMatrix);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_7__.translate(shadowMapMatrix, shadowMapMatrix, gl_matrix__WEBPACK_IMPORTED_MODULE_8__.fromValues(.5, .5, .5));\n    gl_matrix__WEBPACK_IMPORTED_MODULE_7__.scale(shadowMapMatrix, shadowMapMatrix, gl_matrix__WEBPACK_IMPORTED_MODULE_8__.fromValues(.5, .5, .5));\n    gl_matrix__WEBPACK_IMPORTED_MODULE_7__.multiply(shadowMapMatrix, shadowMapMatrix, pMatrix);\n    gl_matrix__WEBPACK_IMPORTED_MODULE_7__.multiply(shadowMapMatrix, shadowMapMatrix, lightMVMatrix);\n    var cameraQuat = calcCameraQuat(cameraPos, cameraTarget);\n    var lightQuat = calcCameraQuat(lightPosition, lightTarget);\n    modelRenderer.setLightPosition(lightPosition);\n    modelRenderer.setLightColor(lightColor);\n    if (shadow && framebuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        gl.viewport(0, 0, FB_WIDTH, FB_HEIGHT);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n        modelRenderer.setCamera(lightPosition, lightQuat);\n        modelRenderer.render(lightMVMatrix, pMatrix, {\n            wireframe: false\n        });\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n    gl.viewport(0, 0, canvas.width, canvas.height);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    modelRenderer.setCamera(cameraPos, cameraQuat);\n    modelRenderer.render(mvMatrix, pMatrix, {\n        wireframe: wireframe,\n        shadowMapTexture: shadow ? framebufferDepthTexture : undefined,\n        shadowMapMatrix: shadow ? shadowMapMatrix : undefined,\n        shadowBias: 1e-6,\n        shadowSmoothingStep: 1 / SHADOW_QUALITY\n    });\n    if (showSkeleton) {\n        modelRenderer.renderSkeleton(mvMatrix, pMatrix, skeletonNodes);\n    }\n}\nfunction tick(timestamp) {\n    requestAnimationFrame(tick);\n    updateModel(timestamp);\n    drawScene();\n}\nfunction loadTexture(src, textureName, flags) {\n    var img = new Image();\n    img.onload = function () {\n        modelRenderer.setTextureImage(textureName, img, flags);\n        handleLoadedTexture();\n    };\n    img.src = src;\n}\nvar started = false;\nfunction handleLoadedTexture() {\n    if (!started) {\n        started = true;\n        requestAnimationFrame(tick);\n    }\n}\n/* function parseModel(isBinary: boolean, xhr: XMLHttpRequest): Model {\n    if (isBinary) {\n        return parseMDX(xhr.response as ArrayBuffer);\n    } else {\n        return parseMDL(xhr.responseText);\n    }\n} */\nfunction processModelLoading() {\n    console.log(model);\n    modelRenderer = new _renderer_modelRenderer__WEBPACK_IMPORTED_MODULE_3__.ModelRenderer(model);\n    modelRenderer.setTeamColor(parseColor(inputColor.value));\n    initGL();\n    modelRenderer.initGL(gl);\n    setAnimationList();\n}\n/* function setSampleTextures () {\n    for (let texture of model.Textures) {\n        if (texture.Image) {\n            ++totalTextures;\n            loadTexture(texture.Image, texture.Image, texture.Flags);\n        }\n    }\n} */\n/* function loadModel () {\n    const xhr = new XMLHttpRequest();\n    const file = 'preview/Footman.mdl';\n    const isBinary = file.indexOf('.mdx') > -1;\n\n    if (isBinary) {\n        xhr.responseType = 'arraybuffer';\n    }\n\n    xhr.open('GET', file, true);\n    xhr.onreadystatechange = () => {\n        if (xhr.status === 200 && xhr.readyState === XMLHttpRequest.DONE) {\n            model = parseModel(isBinary, xhr);\n            processModelLoading();\n            setSampleTextures();\n        }\n    };\n    xhr.send();\n} */\nfunction init() {\n    canvas = document.getElementById('canvas');\n    initControls();\n    initCameraMove();\n    initDragDrop();\n    // loadModel();\n    updateCanvasSize();\n    window.addEventListener('resize', updateCanvasSize);\n}\nfunction parseColor(value) {\n    var val = value.slice(1);\n    return gl_matrix__WEBPACK_IMPORTED_MODULE_8__.fromValues(parseInt(val.slice(0, 2), 16) / 255, parseInt(val.slice(2, 4), 16) / 255, parseInt(val.slice(4, 6), 16) / 255);\n}\nvar inputColor = document.getElementById('color');\nfunction initControls() {\n    inputColor.addEventListener('input', function () {\n        modelRenderer.setTeamColor(parseColor(inputColor.value));\n    });\n    var select = document.getElementById('select');\n    select.addEventListener('input', function () {\n        modelRenderer.setSequence(parseInt(select.value, 10));\n    });\n    var inputZ = document.getElementById('targetZ');\n    cameraTargetZ = parseInt(inputZ.value, 10);\n    inputZ.addEventListener('input', function () {\n        cameraTargetZ = parseInt(inputZ.value, 10);\n    });\n    var inputDistance = document.getElementById('distance');\n    cameraDistance = parseInt(inputDistance.value, 10);\n    inputDistance.addEventListener('input', function () {\n        cameraDistance = parseInt(inputDistance.value, 10);\n    });\n    var wireframeCheck = document.getElementById('wireframe');\n    wireframe = wireframeCheck.checked;\n    wireframeCheck.addEventListener('input', function () {\n        wireframe = wireframeCheck.checked;\n    });\n    var shadowCheck = document.getElementById('shadow');\n    shadow = shadowCheck.checked;\n    shadowCheck.addEventListener('input', function () {\n        shadow = shadowCheck.checked;\n    });\n    var readSkeletonNodes = function (value) {\n        var val = value.trim();\n        if (val === '*') {\n            return null;\n        }\n        else {\n            return [val];\n        }\n    };\n    var skeleton = document.getElementById('skeleton');\n    skeletonNodes = readSkeletonNodes(skeleton.value);\n    skeleton.addEventListener('input', function () {\n        skeletonNodes = readSkeletonNodes(skeleton.value);\n    });\n    var setShowSkeleton = function (val) {\n        showSkeleton = val;\n        skeleton.disabled = !val;\n    };\n    var skeletonCheck = document.getElementById('show_skeleton');\n    setShowSkeleton(skeletonCheck.checked);\n    skeletonCheck.addEventListener('input', function () {\n        setShowSkeleton(skeletonCheck.checked);\n    });\n}\nfunction initCameraMove() {\n    var down = false;\n    var downX, downY;\n    function coords(event) {\n        var list = (event.changedTouches && event.changedTouches.length ?\n            event.changedTouches :\n            event.touches) || [event];\n        return [list[0].pageX, list[0].pageY];\n    }\n    function updateCameraDistance(distance) {\n        cameraDistance = distance;\n        if (cameraDistance > 1000) {\n            cameraDistance = 1000;\n        }\n        if (cameraDistance < 100) {\n            cameraDistance = 100;\n        }\n        document.getElementById('distance').value = String(cameraDistance);\n    }\n    function pointerDown(event) {\n        var _a;\n        if (event.target !== canvas || event.button) {\n            return;\n        }\n        down = true;\n        _a = coords(event), downX = _a[0], downY = _a[1];\n    }\n    function pointerMove(event) {\n        if (!down) {\n            return;\n        }\n        if (event.type === 'touchmove') {\n            event.preventDefault();\n        }\n        if (event.changedTouches && event.changedTouches.length > 1 ||\n            event.touches && event.touches.length > 1) {\n            return;\n        }\n        var _a = coords(event), x = _a[0], y = _a[1];\n        cameraPhi += -1 * (x - downX) * 0.01;\n        cameraTheta += (y - downY) * 0.01;\n        if (cameraTheta > Math.PI / 2 * 0.98) {\n            cameraTheta = Math.PI / 2 * 0.98;\n        }\n        if (cameraTheta < 0) {\n            cameraTheta = 0;\n        }\n        downX = x;\n        downY = y;\n    }\n    function pointerUp() {\n        down = false;\n    }\n    function wheel(event) {\n        updateCameraDistance(cameraDistance * (1 - event.wheelDelta / 600));\n    }\n    var startCameraDistance;\n    function gestureStart() {\n        startCameraDistance = cameraDistance;\n    }\n    function gestureChange(event) {\n        updateCameraDistance(startCameraDistance * (1 / event.scale));\n    }\n    document.addEventListener('mousedown', pointerDown);\n    document.addEventListener('touchstart', pointerDown);\n    document.addEventListener('mousemove', pointerMove);\n    document.addEventListener('touchmove', pointerMove);\n    document.addEventListener('mouseup', pointerUp);\n    document.addEventListener('touchend', pointerUp);\n    document.addEventListener('touchcancel', pointerUp);\n    document.addEventListener('wheel', wheel);\n    document.addEventListener('gesturestart', gestureStart);\n    document.addEventListener('gesturechange', gestureChange);\n}\nfunction updateCanvasSize() {\n    var width = canvas.parentElement.offsetWidth;\n    var height = canvas.parentElement.offsetHeight;\n    var dpr = window.devicePixelRatio || 1;\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n}\nfunction setAnimationList() {\n    var list = model.Sequences.map(function (seq) { return seq.Name; });\n    if (list.length === 0) {\n        list = ['None'];\n    }\n    var select = document.getElementById('select');\n    select.innerHTML = '';\n    list.forEach(function (item, index) {\n        var option = document.createElement('option');\n        option.textContent = item;\n        option.value = String(index);\n        select.appendChild(option);\n    });\n    var skeleton = document.getElementById('skeleton');\n    for (var _i = 0, _a = model.Nodes; _i < _a.length; _i++) {\n        var node = _a[_i];\n        if (node) {\n            var option = document.createElement('option');\n            option.textContent = node.Name;\n            option.value = node.Name;\n            skeleton.appendChild(option);\n        }\n    }\n}\nfunction setDragDropTextures() {\n    var texturesContainer = document.querySelector('.drag-textures');\n    texturesContainer.innerHTML = '';\n    for (var _i = 0, _a = model.Textures; _i < _a.length; _i++) {\n        var texture = _a[_i];\n        if (texture.Image) {\n            var row = document.createElement('div');\n            row.className = 'drag';\n            row.textContent = texture.Image;\n            row.setAttribute('data-texture', texture.Image);\n            row.setAttribute('data-texture-flags', String(texture.Flags));\n            texturesContainer.appendChild(row);\n        }\n    }\n}\nfunction initDragDrop() {\n    var container = document.querySelector('.container');\n    var dropTarget;\n    container.addEventListener('dragenter', function onDragEnter(event) {\n        var target = event.target;\n        if (dropTarget && dropTarget !== event.target && dropTarget.classList) {\n            dropTarget.classList.remove('drag_hovered');\n        }\n        if (!target.classList) {\n            target = target.parentElement;\n        }\n        dropTarget = target;\n        if (target && target.classList && target.classList.contains('drag')) {\n            target.classList.add('drag_hovered');\n        }\n        container.classList.add('container_drag');\n        event.preventDefault();\n    });\n    container.addEventListener('dragleave', function onDragLeave(event) {\n        if (event.target === dropTarget) {\n            container.classList.remove('container_drag');\n            if (dropTarget && dropTarget.classList) {\n                dropTarget.classList.remove('drag_hovered');\n            }\n        }\n    });\n    container.addEventListener('dragover', function onDragLeave(event) {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = 'copy';\n    });\n    var dropModel = function (file, textures) {\n        var reader = new FileReader();\n        var isMDX = file.name.indexOf('.mdx') > -1;\n        reader.onload = function () {\n            try {\n                if (isMDX) {\n                    model = (0,_mdx_parse__WEBPACK_IMPORTED_MODULE_2__.parse)(reader.result);\n                }\n                else {\n                    model = (0,_mdl_parse__WEBPACK_IMPORTED_MODULE_1__.parse)(reader.result);\n                }\n            }\n            catch (err) {\n                console.error(err);\n                // showError(err);\n                return;\n            }\n            processModelLoading();\n            setTextures(textures);\n            setDragDropTextures();\n        };\n        if (isMDX) {\n            reader.readAsArrayBuffer(file);\n        }\n        else {\n            reader.readAsText(file);\n        }\n    };\n    var dropTexture = function (file, textureName, textureFlags) {\n        return new Promise(function (resolve) {\n            var reader = new FileReader();\n            var isBLP = file.name.indexOf('.blp') > -1;\n            var isDDS = file.name.indexOf('.dds') > -1;\n            reader.onload = function () {\n                try {\n                    if (isDDS) {\n                        var array = reader.result;\n                        var dds_1 = (0,dds_parser__WEBPACK_IMPORTED_MODULE_0__.parseHeaders)(array);\n                        console.log(dds_1);\n                        var format = void 0;\n                        if (dds_1.format === 'dxt1') {\n                            format = ddsExt === null || ddsExt === void 0 ? void 0 : ddsExt.COMPRESSED_RGB_S3TC_DXT1_EXT;\n                        }\n                        else if (dds_1.format === 'dxt3') {\n                            format = ddsExt === null || ddsExt === void 0 ? void 0 : ddsExt.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n                        }\n                        else if (dds_1.format === 'dxt5') {\n                            format = ddsExt === null || ddsExt === void 0 ? void 0 : ddsExt.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n                        }\n                        else if (dds_1.format === 'ati2') {\n                            format = rgtcExt === null || rgtcExt === void 0 ? void 0 : rgtcExt.COMPRESSED_RED_GREEN_RGTC2_EXT;\n                        }\n                        if (format) {\n                            modelRenderer.setTextureCompressedImage(textureName, format, reader.result, dds_1, textureFlags);\n                        }\n                        else {\n                            var uint8_1 = new Uint8Array(array);\n                            var datas = dds_1.images\n                                .filter(function (image) { return image.shape.width > 0 && image.shape.height > 0; })\n                                .map(function (image) {\n                                var src = uint8_1.slice(image.offset, image.offset + image.length);\n                                var rgba = (0,dds_parser__WEBPACK_IMPORTED_MODULE_0__.decodeDds)(src, dds_1.format, image.shape.width, image.shape.height);\n                                return new ImageData(new Uint8ClampedArray(rgba), image.shape.width, image.shape.height);\n                            });\n                            modelRenderer.setTextureImageData(textureName, datas, textureFlags);\n                        }\n                        resolve();\n                    }\n                    else if (isBLP) {\n                        var blp_1 = (0,_blp_decode__WEBPACK_IMPORTED_MODULE_5__.decode)(reader.result);\n                        console.log(file.name, blp_1);\n                        modelRenderer.setTextureImageData(textureName, blp_1.mipmaps.map(function (_mipmap, i) { return (0,_blp_decode__WEBPACK_IMPORTED_MODULE_5__.getImageData)(blp_1, i); }), textureFlags);\n                        resolve();\n                    }\n                    else {\n                        var img_1 = new Image();\n                        img_1.onload = function () {\n                            console.log(file.name, img_1);\n                            modelRenderer.setTextureImage(textureName, img_1, textureFlags);\n                            resolve();\n                        };\n                        img_1.src = reader.result;\n                    }\n                }\n                catch (err) {\n                    console.error(err.stack);\n                    resolve();\n                }\n            };\n            if (isBLP || isDDS) {\n                reader.readAsArrayBuffer(file);\n            }\n            else {\n                reader.readAsDataURL(file);\n            }\n        });\n    };\n    container.addEventListener('drop', function onDrop(event) {\n        event.preventDefault();\n        container.classList.remove('container_drag');\n        container.classList.add('container_custom');\n        if (!dropTarget) {\n            return;\n        }\n        dropTarget.classList.remove('drag_hovered');\n        var files = event.dataTransfer.files;\n        if (!files || !files.length) {\n            return;\n        }\n        if (dropTarget.getAttribute('data-texture')) {\n            dropTexture(files[0], dropTarget.getAttribute('data-texture'), Number(dropTarget.getAttribute('data-texture-flags'))).then(function () {\n                handleLoadedTexture();\n            });\n        }\n        else {\n            var modelFile = void 0;\n            for (var i = 0; i < files.length; ++i) {\n                var file = files[i];\n                if (file.name.indexOf('.mdl') > -1 || file.name.indexOf('.mdx') > -1) {\n                    modelFile = file;\n                    break;\n                }\n            }\n            if (modelFile) {\n                var textures = {};\n                for (var i = 0; i < files.length; ++i) {\n                    var file = files[i], name = file.name.replace(CLEANUP_NAME_REGEXP, '$1').toLowerCase();\n                    if (file.name.indexOf('.mdl') > -1 || file.name.indexOf('.mdx') > -1) {\n                        continue;\n                    }\n                    textures[name] = file;\n                }\n                dropModel(modelFile, textures);\n            }\n        }\n    });\n    function setTextures(textures) {\n        var promises = [];\n        for (var _i = 0, _a = model.Textures; _i < _a.length; _i++) {\n            var texture = _a[_i];\n            if (texture.Image) {\n                var cleanupName = texture.Image.replace(CLEANUP_NAME_REGEXP, '$1').toLowerCase();\n                if (cleanupName in textures) {\n                    promises.push(dropTexture(textures[cleanupName], texture.Image, texture.Flags));\n                }\n                else {\n                    loadTexture('empty.png', texture.Image, 0);\n                }\n            }\n        }\n        Promise.all(promises).then(function () {\n            handleLoadedTexture();\n        });\n    }\n}\ndocument.addEventListener('DOMContentLoaded', init);\n\n\n//# sourceURL=webpack://war3-model/./docs/preview/preview.ts?");

/***/ }),

/***/ "./mdl/parse.ts":
/*!**********************!*\
  !*** ./mdl/parse.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parse\": () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model */ \"./model.ts\");\nvar _a;\n\nvar State = /** @class */ (function () {\n    function State(str) {\n        this.str = str;\n        this.pos = 0;\n    }\n    State.prototype.char = function () {\n        if (this.pos >= this.str.length) {\n            throwError(this, 'incorrect model data');\n        }\n        return this.str[this.pos];\n    };\n    return State;\n}());\nfunction throwError(state, str) {\n    if (str === void 0) { str = ''; }\n    throw new Error(\"SyntaxError, near \".concat(state.pos) + (str ? ', ' + str : ''));\n}\nfunction parseComment(state) {\n    if (state.char() === '/' && state.str[state.pos + 1] === '/') {\n        state.pos += 2;\n        while (state.pos < state.str.length && state.str[++state.pos] !== '\\n')\n            ;\n        ++state.pos;\n        return true;\n    }\n    return false;\n}\nvar spaceRE = /\\s/i;\nfunction parseSpace(state) {\n    while (state.pos < state.str.length && spaceRE.test(state.char())) {\n        ++state.pos;\n    }\n}\nvar keywordFirstCharRE = /[a-z]/i;\nvar keywordOtherCharRE = /[a-z0-9]/i;\nfunction parseKeyword(state) {\n    if (!keywordFirstCharRE.test(state.char())) {\n        return null;\n    }\n    var keyword = state.char();\n    ++state.pos;\n    while (keywordOtherCharRE.test(state.char())) {\n        keyword += state.str[state.pos++];\n    }\n    parseSpace(state);\n    return keyword;\n}\nfunction parseSymbol(state, symbol) {\n    if (state.char() === symbol) {\n        ++state.pos;\n        parseSpace(state);\n    }\n}\nfunction strictParseSymbol(state, symbol) {\n    if (state.char() !== symbol) {\n        throwError(state, \"extected \".concat(symbol));\n    }\n    ++state.pos;\n    parseSpace(state);\n}\nfunction parseString(state) {\n    if (state.char() === '\"') {\n        var start = ++state.pos; // \"\n        while (state.char() !== '\"') {\n            ++state.pos;\n        }\n        ++state.pos; // \"\n        var res = state.str.substring(start, state.pos - 1);\n        parseSpace(state);\n        return res;\n    }\n    return null;\n}\nvar numberFirstCharRE = /[-0-9]/;\nvar numberOtherCharRE = /[-+.0-9e]/i;\nfunction parseNumber(state) {\n    if (numberFirstCharRE.test(state.char())) {\n        var start = state.pos;\n        ++state.pos;\n        while (numberOtherCharRE.test(state.char())) {\n            ++state.pos;\n        }\n        var res = parseFloat(state.str.substring(start, state.pos));\n        parseSpace(state);\n        return res;\n    }\n    return null;\n}\nfunction parseArray(state, arr, pos) {\n    if (state.char() !== '{') {\n        return null;\n    }\n    if (!arr) {\n        arr = [];\n        pos = 0;\n    }\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var num = parseNumber(state);\n        if (num === null) {\n            throwError(state, 'expected number');\n        }\n        arr[pos++] = num;\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    return arr;\n}\nfunction parseArrayCounted(state, arr, pos) {\n    if (state.char() !== '{') {\n        return 0;\n    }\n    var start = pos;\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var num = parseNumber(state);\n        if (num === null) {\n            throwError(state, 'expected number');\n        }\n        arr[pos++] = num;\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    return pos - start;\n}\nfunction parseArrayOrSingleItem(state, arr) {\n    if (state.char() !== '{') {\n        arr[0] = parseNumber(state);\n        return arr;\n    }\n    var pos = 0;\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var num = parseNumber(state);\n        if (num === null) {\n            throwError(state, 'expected number');\n        }\n        arr[pos++] = num;\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    return arr;\n}\nfunction parseObject(state) {\n    var prefix = null;\n    var obj = {};\n    if (state.char() !== '{') {\n        prefix = parseString(state);\n        if (prefix === null) {\n            prefix = parseNumber(state);\n        }\n        if (prefix === null) {\n            throwError(state, 'expected string or number');\n        }\n    }\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'Interval') {\n            var array = new Uint32Array(2);\n            obj[keyword] = parseArray(state, array, 0);\n        }\n        else if (keyword === 'MinimumExtent' || keyword === 'MaximumExtent') {\n            var array = new Float32Array(3);\n            obj[keyword] = parseArray(state, array, 0);\n        }\n        else {\n            obj[keyword] = parseArray(state) || parseString(state);\n            if (obj[keyword] === null) {\n                obj[keyword] = parseNumber(state);\n            }\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    return [prefix, obj];\n}\nfunction parseVersion(state, model) {\n    var _a = parseObject(state), _unused = _a[0], obj = _a[1];\n    if (obj.FormatVersion) {\n        model.Version = obj.FormatVersion;\n    }\n}\nfunction parseModelInfo(state, model) {\n    var _a = parseObject(state), name = _a[0], obj = _a[1];\n    model.Info = obj;\n    model.Info.Name = name;\n}\nfunction parseSequences(state, model) {\n    parseNumber(state); // count, not used\n    strictParseSymbol(state, '{');\n    var res = [];\n    while (state.char() !== '}') {\n        parseKeyword(state); // Anim\n        var _a = parseObject(state), name = _a[0], obj = _a[1];\n        obj.Name = name;\n        obj.NonLooping = 'NonLooping' in obj;\n        obj.MoveSpeed = obj.MoveSpeed || 0;\n        obj.Rarity = obj.Rarity || 0;\n        res.push(obj);\n    }\n    strictParseSymbol(state, '}');\n    model.Sequences = res;\n}\nfunction parseTextures(state, model) {\n    var res = [];\n    parseNumber(state); // count, not used\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        parseKeyword(state); // Bitmap\n        var _a = parseObject(state), _unused = _a[0], obj = _a[1];\n        obj.Flags = 0;\n        if ('WrapWidth' in obj) {\n            obj.Flags += _model__WEBPACK_IMPORTED_MODULE_0__.TextureFlags.WrapWidth;\n            delete obj.WrapWidth;\n        }\n        if ('WrapHeight' in obj) {\n            obj.Flags += _model__WEBPACK_IMPORTED_MODULE_0__.TextureFlags.WrapHeight;\n            delete obj.WrapHeight;\n        }\n        res.push(obj);\n    }\n    strictParseSymbol(state, '}');\n    model.Textures = res;\n}\nvar AnimVectorType;\n(function (AnimVectorType) {\n    AnimVectorType[AnimVectorType[\"INT1\"] = 0] = \"INT1\";\n    AnimVectorType[AnimVectorType[\"FLOAT1\"] = 1] = \"FLOAT1\";\n    AnimVectorType[AnimVectorType[\"FLOAT3\"] = 2] = \"FLOAT3\";\n    AnimVectorType[AnimVectorType[\"FLOAT4\"] = 3] = \"FLOAT4\";\n})(AnimVectorType || (AnimVectorType = {}));\nvar animVectorSize = (_a = {},\n    _a[AnimVectorType.INT1] = 1,\n    _a[AnimVectorType.FLOAT1] = 1,\n    _a[AnimVectorType.FLOAT3] = 3,\n    _a[AnimVectorType.FLOAT4] = 4,\n    _a);\nfunction parseAnimKeyframe(state, frame, type, lineType) {\n    var res = {\n        Frame: frame,\n        Vector: null\n    };\n    var Vector = type === AnimVectorType.INT1 ? Int32Array : Float32Array;\n    var itemCount = animVectorSize[type];\n    res.Vector = parseArrayOrSingleItem(state, new Vector(itemCount));\n    strictParseSymbol(state, ',');\n    if (lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.Hermite || lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.Bezier) {\n        parseKeyword(state); // InTan\n        res.InTan = parseArrayOrSingleItem(state, new Vector(itemCount));\n        strictParseSymbol(state, ',');\n        parseKeyword(state); // OutTan\n        res.OutTan = parseArrayOrSingleItem(state, new Vector(itemCount));\n        strictParseSymbol(state, ',');\n    }\n    return res;\n}\nfunction parseAnimVector(state, type) {\n    var animVector = {\n        LineType: _model__WEBPACK_IMPORTED_MODULE_0__.LineType.DontInterp,\n        GlobalSeqId: null,\n        Keys: []\n    };\n    parseNumber(state); // count, not used\n    strictParseSymbol(state, '{');\n    var lineType = parseKeyword(state);\n    if (lineType === 'DontInterp' || lineType === 'Linear' || lineType === 'Hermite' || lineType === 'Bezier') {\n        animVector.LineType = _model__WEBPACK_IMPORTED_MODULE_0__.LineType[lineType];\n    }\n    strictParseSymbol(state, ',');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        if (keyword === 'GlobalSeqId') {\n            animVector[keyword] = parseNumber(state);\n            strictParseSymbol(state, ',');\n        }\n        else {\n            var frame = parseNumber(state);\n            if (frame === null) {\n                throwError(state, 'expected frame number or GlobalSeqId');\n            }\n            strictParseSymbol(state, ':');\n            animVector.Keys.push(parseAnimKeyframe(state, frame, type, animVector.LineType));\n        }\n    }\n    strictParseSymbol(state, '}');\n    return animVector;\n}\nfunction parseLayer(state, model) {\n    var res = {\n        Alpha: null,\n        TVertexAnimId: null,\n        Shading: 0,\n        CoordId: 0\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        var isStatic = false;\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'static') {\n            isStatic = true;\n            keyword = parseKeyword(state);\n        }\n        if (!isStatic && keyword === 'TextureID') {\n            res[keyword] = parseAnimVector(state, AnimVectorType.INT1);\n        }\n        else if (!isStatic && (keyword === 'Alpha')) {\n            res[keyword] = parseAnimVector(state, AnimVectorType.FLOAT1);\n        }\n        else if (keyword === 'Unshaded' || keyword === 'SphereEnvMap' || keyword === 'TwoSided' ||\n            keyword === 'Unfogged' || keyword === 'NoDepthTest' || keyword === 'NoDepthSet') {\n            res.Shading |= _model__WEBPACK_IMPORTED_MODULE_0__.LayerShading[keyword];\n        }\n        else if (keyword === 'FilterMode') {\n            var val = parseKeyword(state);\n            if (val === 'None' || val === 'Transparent' || val === 'Blend' || val === 'Additive' ||\n                val === 'AddAlpha' || val === 'Modulate' || val === 'Modulate2x') {\n                res.FilterMode = _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode[val];\n            }\n        }\n        else if (keyword === 'TVertexAnimId') {\n            res.TVertexAnimId = parseNumber(state);\n        }\n        else if (model.Version >= 900 && keyword === 'EmissiveGain') {\n            if (isStatic) {\n                res[keyword] = parseNumber(state);\n            }\n            else {\n                res[keyword] = parseAnimVector(state, AnimVectorType.FLOAT1);\n            }\n        }\n        else if (model.Version >= 1000 && keyword === 'FresnelColor') {\n            if (isStatic) {\n                var array = new Float32Array(3);\n                res[keyword] = parseArray(state, array, 0);\n            }\n            else {\n                res[keyword] = parseAnimVector(state, AnimVectorType.FLOAT3);\n            }\n        }\n        else if (model.Version >= 1000 && (keyword === 'FresnelOpacity' || keyword === 'FresnelTeamColor')) {\n            if (isStatic) {\n                res[keyword] = parseNumber(state);\n            }\n            else {\n                res[keyword] = parseAnimVector(state, AnimVectorType.FLOAT1);\n            }\n        }\n        else {\n            var val = parseNumber(state);\n            if (val === null) {\n                val = parseKeyword(state);\n            }\n            res[keyword] = val;\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    return res;\n}\nfunction parseMaterials(state, model) {\n    var res = [];\n    parseNumber(state); // count, not used\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var obj = {\n            RenderMode: 0,\n            Layers: []\n        };\n        parseKeyword(state); // Material\n        strictParseSymbol(state, '{');\n        while (state.char() !== '}') {\n            var keyword = parseKeyword(state);\n            if (!keyword) {\n                throwError(state);\n            }\n            if (keyword === 'Layer') {\n                obj.Layers.push(parseLayer(state, model));\n            }\n            else if (keyword === 'PriorityPlane' || keyword === 'RenderMode') {\n                obj[keyword] = parseNumber(state);\n            }\n            else if (keyword === 'ConstantColor' || keyword === 'SortPrimsFarZ' || keyword === 'FullResolution') {\n                obj.RenderMode |= _model__WEBPACK_IMPORTED_MODULE_0__.MaterialRenderMode[keyword];\n            }\n            else if (model.Version >= 900 && keyword === 'Shader') {\n                obj[keyword] = parseString(state);\n            }\n            else {\n                throw new Error('Unknown material property ' + keyword);\n            }\n            parseSymbol(state, ',');\n        }\n        strictParseSymbol(state, '}');\n        res.push(obj);\n    }\n    strictParseSymbol(state, '}');\n    model.Materials = res;\n}\nvar GeosetPartType;\n(function (GeosetPartType) {\n    GeosetPartType[GeosetPartType[\"INT\"] = 0] = \"INT\";\n    GeosetPartType[GeosetPartType[\"FLOAT\"] = 1] = \"FLOAT\";\n})(GeosetPartType || (GeosetPartType = {}));\nfunction parseGeosetPart(state, countPerObj, type) {\n    var count = parseNumber(state);\n    var arr = new (type === GeosetPartType.FLOAT ? Float32Array : Uint8Array)(count * countPerObj);\n    strictParseSymbol(state, '{');\n    for (var index = 0; index < count; ++index) {\n        parseArray(state, arr, index * countPerObj);\n        strictParseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    return arr;\n}\nfunction parseGeoset(state, model) {\n    var res = {\n        Vertices: null,\n        Normals: null,\n        TVertices: [],\n        VertexGroup: new Uint8Array(0),\n        Faces: null,\n        Groups: null,\n        TotalGroupsCount: null,\n        MinimumExtent: null,\n        MaximumExtent: null,\n        BoundsRadius: 0,\n        Anims: [],\n        MaterialID: null,\n        SelectionGroup: null,\n        Unselectable: false\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'Vertices' || keyword === 'Normals' || keyword === 'TVertices') {\n            var countPerObj = 3;\n            if (keyword === 'TVertices') {\n                countPerObj = 2;\n            }\n            var arr = parseGeosetPart(state, countPerObj, GeosetPartType.FLOAT);\n            if (keyword === 'TVertices') {\n                res.TVertices.push(arr);\n            }\n            else {\n                res[keyword] = arr;\n            }\n        }\n        else if (keyword === 'VertexGroup') {\n            res[keyword] = new Uint8Array(res.Vertices.length / 3);\n            parseArray(state, res[keyword], 0);\n        }\n        else if (keyword === 'Faces') {\n            var groupCount = parseNumber(state); // group count, always 1 in the official models\n            var indexCount = parseNumber(state);\n            var pos = 0;\n            res.Faces = new Uint16Array(indexCount);\n            strictParseSymbol(state, '{');\n            var keyword_1 = parseKeyword(state);\n            if (keyword_1 !== 'Triangles') {\n                throwError(state, 'unexpected faces type');\n            }\n            strictParseSymbol(state, '{');\n            for (var g = 0; g < groupCount; ++g) {\n                var count = parseArrayCounted(state, res.Faces, pos);\n                if (!count) {\n                    throwError(state, 'expected array');\n                }\n                pos += count;\n                parseSymbol(state, ',');\n            }\n            if (pos !== indexCount || indexCount % 3 !== 0) {\n                throwError(state, 'mismatched faces array');\n            }\n            strictParseSymbol(state, '}');\n            strictParseSymbol(state, '}');\n        }\n        else if (keyword === 'Groups') {\n            var groups = [];\n            parseNumber(state); // groups count, unused\n            res.TotalGroupsCount = parseNumber(state); // summed in subarrays\n            strictParseSymbol(state, '{');\n            while (state.char() !== '}') {\n                parseKeyword(state); // Matrices\n                groups.push(parseArray(state));\n                parseSymbol(state, ',');\n            }\n            strictParseSymbol(state, '}');\n            res.Groups = groups;\n        }\n        else if (keyword === 'MinimumExtent' || keyword === 'MaximumExtent') {\n            var arr = new Float32Array(3);\n            res[keyword] = parseArray(state, arr, 0);\n            strictParseSymbol(state, ',');\n        }\n        else if (keyword === 'BoundsRadius' || keyword === 'MaterialID' || keyword === 'SelectionGroup') {\n            res[keyword] = parseNumber(state);\n            strictParseSymbol(state, ',');\n        }\n        else if (keyword === 'Anim') {\n            var _a = parseObject(state), _unused = _a[0], obj = _a[1];\n            if (obj.Alpha === undefined) {\n                obj.Alpha = 1;\n            }\n            res.Anims.push(obj);\n        }\n        else if (keyword === 'Unselectable') {\n            res.Unselectable = true;\n            strictParseSymbol(state, ',');\n        }\n        else if (model.Version >= 900) {\n            if (keyword === 'LevelOfDetail') {\n                res.LevelOfDetail = parseNumber(state);\n                strictParseSymbol(state, ',');\n            }\n            else if (keyword === 'Name') {\n                res.Name = parseString(state);\n                strictParseSymbol(state, ',');\n            }\n            else if (keyword === 'Tangents') {\n                res.Tangents = parseGeosetPart(state, 4, GeosetPartType.FLOAT);\n            }\n            else if (keyword === 'SkinWeights') {\n                var count = parseNumber(state);\n                var arr = new Uint8Array(count * 4);\n                res.SkinWeights = parseArray(state, arr, 0);\n            }\n        }\n    }\n    strictParseSymbol(state, '}');\n    model.Geosets.push(res);\n}\nfunction parseGeosetAnim(state, model) {\n    var res = {\n        GeosetId: -1,\n        Alpha: 1,\n        Color: null,\n        Flags: 0\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        var isStatic = false;\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'static') {\n            isStatic = true;\n            keyword = parseKeyword(state);\n        }\n        if (keyword === 'Alpha') {\n            if (isStatic) {\n                res.Alpha = parseNumber(state);\n            }\n            else {\n                res.Alpha = parseAnimVector(state, AnimVectorType.FLOAT1);\n            }\n        }\n        else if (keyword === 'Color') {\n            if (isStatic) {\n                var array = new Float32Array(3);\n                res.Color = parseArray(state, array, 0);\n                res.Color.reverse();\n            }\n            else {\n                res.Color = parseAnimVector(state, AnimVectorType.FLOAT3);\n                for (var _i = 0, _a = res.Color.Keys; _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    key.Vector.reverse();\n                    if (key.InTan) {\n                        key.InTan.reverse();\n                        key.OutTan.reverse();\n                    }\n                }\n            }\n        }\n        else if (keyword === 'DropShadow') {\n            res.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.GeosetAnimFlags[keyword];\n        }\n        else {\n            res[keyword] = parseNumber(state);\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.GeosetAnims.push(res);\n}\nfunction parseNode(state, type, model) {\n    var name = parseString(state);\n    var node = {\n        Name: name,\n        ObjectId: null,\n        Parent: null,\n        PivotPoint: null,\n        Flags: _model__WEBPACK_IMPORTED_MODULE_0__.NodeType[type]\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'Translation' || keyword === 'Rotation' || keyword === 'Scaling' || keyword === 'Visibility') {\n            var vectorType = AnimVectorType.FLOAT3;\n            if (keyword === 'Rotation') {\n                vectorType = AnimVectorType.FLOAT4;\n            }\n            else if (keyword === 'Visibility') {\n                vectorType = AnimVectorType.FLOAT1;\n            }\n            node[keyword] = parseAnimVector(state, vectorType);\n        }\n        else if (keyword === 'BillboardedLockZ' || keyword === 'BillboardedLockY' || keyword === 'BillboardedLockX' ||\n            keyword === 'Billboarded' || keyword === 'CameraAnchored') {\n            node.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags[keyword];\n        }\n        else if (keyword === 'DontInherit') {\n            strictParseSymbol(state, '{');\n            var val = parseKeyword(state);\n            if (val === 'Translation') {\n                node.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.DontInheritTranslation;\n            }\n            else if (val === 'Rotation') {\n                node.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.DontInheritRotation;\n            }\n            else if (val === 'Scaling') {\n                node.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.DontInheritScaling;\n            }\n            strictParseSymbol(state, '}');\n        }\n        else if (keyword === 'Path') {\n            node[keyword] = parseString(state);\n        }\n        else {\n            var val = parseKeyword(state) || parseNumber(state);\n            if (keyword === 'GeosetId' && val === 'Multiple' ||\n                keyword === 'GeosetAnimId' && val === 'None') {\n                val = null;\n            }\n            node[keyword] = val;\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.Nodes[node.ObjectId] = node;\n    return node;\n}\nfunction parseBone(state, model) {\n    var node = parseNode(state, 'Bone', model);\n    model.Bones.push(node);\n}\nfunction parseHelper(state, model) {\n    var node = parseNode(state, 'Helper', model);\n    model.Helpers.push(node);\n}\nfunction parseAttachment(state, model) {\n    var node = parseNode(state, 'Attachment', model);\n    model.Attachments.push(node);\n}\nfunction parsePivotPoints(state, model) {\n    var count = parseNumber(state);\n    var res = [];\n    strictParseSymbol(state, '{');\n    for (var i = 0; i < count; ++i) {\n        res.push(parseArray(state, new Float32Array(3), 0));\n        strictParseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.PivotPoints = res;\n}\nfunction parseEventObject(state, model) {\n    var name = parseString(state);\n    var res = {\n        Name: name,\n        ObjectId: null,\n        Parent: null,\n        PivotPoint: null,\n        EventTrack: null,\n        Flags: _model__WEBPACK_IMPORTED_MODULE_0__.NodeType.EventObject\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'EventTrack') {\n            var count = parseNumber(state); // EventTrack count\n            res.EventTrack = parseArray(state, new Uint32Array(count), 0);\n        }\n        else if (keyword === 'Translation' || keyword === 'Rotation' || keyword === 'Scaling') {\n            var type = keyword === 'Rotation' ? AnimVectorType.FLOAT4 : AnimVectorType.FLOAT3;\n            res[keyword] = parseAnimVector(state, type);\n        }\n        else {\n            res[keyword] = parseNumber(state);\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.EventObjects.push(res);\n    model.Nodes[res.ObjectId] = res;\n}\nfunction parseCollisionShape(state, model) {\n    var name = parseString(state);\n    var res = {\n        Name: name,\n        ObjectId: null,\n        Parent: null,\n        PivotPoint: null,\n        Shape: _model__WEBPACK_IMPORTED_MODULE_0__.CollisionShapeType.Box,\n        Vertices: null,\n        Flags: _model__WEBPACK_IMPORTED_MODULE_0__.NodeType.CollisionShape\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'Sphere') {\n            res.Shape = _model__WEBPACK_IMPORTED_MODULE_0__.CollisionShapeType.Sphere;\n        }\n        else if (keyword === 'Box') {\n            res.Shape = _model__WEBPACK_IMPORTED_MODULE_0__.CollisionShapeType.Box;\n        }\n        else if (keyword === 'Vertices') {\n            var count = parseNumber(state);\n            var vertices = new Float32Array(count * 3);\n            strictParseSymbol(state, '{');\n            for (var i = 0; i < count; ++i) {\n                parseArray(state, vertices, i * 3);\n                strictParseSymbol(state, ',');\n            }\n            strictParseSymbol(state, '}');\n            res.Vertices = vertices;\n        }\n        else if (keyword === 'Translation' || keyword === 'Rotation' || keyword === 'Scaling') {\n            var type = keyword === 'Rotation' ? AnimVectorType.FLOAT4 : AnimVectorType.FLOAT3;\n            res[keyword] = parseAnimVector(state, type);\n        }\n        else {\n            res[keyword] = parseNumber(state);\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.CollisionShapes.push(res);\n    model.Nodes[res.ObjectId] = res;\n}\nfunction parseGlobalSequences(state, model) {\n    var res = [];\n    var count = parseNumber(state);\n    strictParseSymbol(state, '{');\n    for (var i = 0; i < count; ++i) {\n        var keyword = parseKeyword(state);\n        if (keyword === 'Duration') {\n            res.push(parseNumber(state));\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.GlobalSequences = res;\n}\nfunction parseUnknownBlock(state) {\n    var opened;\n    while (state.char() !== undefined && state.char() !== '{') {\n        ++state.pos;\n    }\n    opened = 1;\n    ++state.pos;\n    while (state.char() !== undefined && opened > 0) {\n        if (state.char() === '{') {\n            ++opened;\n        }\n        else if (state.char() === '}') {\n            --opened;\n        }\n        ++state.pos;\n    }\n    parseSpace(state);\n}\nfunction parseParticleEmitter(state, model) {\n    var res = {\n        ObjectId: null,\n        Parent: null,\n        Name: null,\n        Flags: 0\n    };\n    res.Name = parseString(state);\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        var isStatic = false;\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'static') {\n            isStatic = true;\n            keyword = parseKeyword(state);\n        }\n        if (keyword === 'ObjectId' || keyword === 'Parent') {\n            res[keyword] = parseNumber(state);\n        }\n        else if (keyword === 'EmitterUsesMDL' || keyword === 'EmitterUsesTGA') {\n            res.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitterFlags[keyword];\n        }\n        else if (!isStatic && (keyword === 'Visibility' || keyword === 'Translation' || keyword === 'Rotation' ||\n            keyword === 'Scaling' || keyword === 'EmissionRate' || keyword === 'Gravity' || keyword === 'Longitude' ||\n            keyword === 'Latitude')) {\n            var type = AnimVectorType.FLOAT3;\n            if (keyword === 'Visibility' || keyword === 'EmissionRate' || keyword === 'Gravity' ||\n                keyword === 'Longitude' || keyword === 'Latitude') {\n                type = AnimVectorType.FLOAT1;\n            }\n            else if (keyword === 'Rotation') {\n                type = AnimVectorType.FLOAT4;\n            }\n            res[keyword] = parseAnimVector(state, type);\n        }\n        else if (keyword === 'Particle') {\n            strictParseSymbol(state, '{');\n            while (state.char() !== '}') {\n                var keyword2 = parseKeyword(state);\n                var isStatic2 = false;\n                if (keyword2 === 'static') {\n                    isStatic2 = true;\n                    keyword2 = parseKeyword(state);\n                }\n                if (!isStatic2 && (keyword2 === 'LifeSpan' || keyword2 === 'InitVelocity')) {\n                    res[keyword2] = parseAnimVector(state, AnimVectorType.FLOAT1);\n                }\n                else if (keyword2 === 'LifeSpan' || keyword2 === 'InitVelocity') {\n                    res[keyword2] = parseNumber(state);\n                }\n                else if (keyword2 === 'Path') {\n                    res.Path = parseString(state);\n                }\n                parseSymbol(state, ',');\n            }\n            strictParseSymbol(state, '}');\n        }\n        else {\n            res[keyword] = parseNumber(state);\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.ParticleEmitters.push(res);\n}\nfunction parseParticleEmitter2(state, model) {\n    var name = parseString(state);\n    var res = {\n        Name: name,\n        ObjectId: null,\n        Parent: null,\n        PivotPoint: null,\n        Flags: _model__WEBPACK_IMPORTED_MODULE_0__.NodeType.ParticleEmitter,\n        FrameFlags: 0\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        var isStatic = false;\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'static') {\n            isStatic = true;\n            keyword = parseKeyword(state);\n        }\n        if (!isStatic && (keyword === 'Speed' || keyword === 'Latitude' || keyword === 'Visibility' ||\n            keyword === 'EmissionRate' || keyword === 'Width' || keyword === 'Length' || keyword === 'Translation' ||\n            keyword === 'Rotation' || keyword === 'Scaling' || keyword === 'Gravity' || keyword === 'Variation')) {\n            var type = AnimVectorType.FLOAT3;\n            switch (keyword) {\n                case 'Rotation':\n                    type = AnimVectorType.FLOAT4;\n                    break;\n                case 'Speed':\n                case 'Latitude':\n                case 'Visibility':\n                case 'EmissionRate':\n                case 'Width':\n                case 'Length':\n                case 'Gravity':\n                case 'Variation':\n                    type = AnimVectorType.FLOAT1;\n                    break;\n            }\n            res[keyword] = parseAnimVector(state, type);\n        }\n        else if (keyword === 'Variation' || keyword === 'Gravity') {\n            res[keyword] = parseNumber(state);\n        }\n        else if (keyword === 'SortPrimsFarZ' || keyword === 'Unshaded' || keyword === 'LineEmitter' ||\n            keyword === 'Unfogged' || keyword === 'ModelSpace' || keyword === 'XYQuad') {\n            res.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2Flags[keyword];\n        }\n        else if (keyword === 'Both') {\n            res.FrameFlags |= _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Head | _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail;\n        }\n        else if (keyword === 'Head' || keyword === 'Tail') {\n            res.FrameFlags |= _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags[keyword];\n        }\n        else if (keyword === 'Squirt') {\n            res[keyword] = true;\n        }\n        else if (keyword === 'DontInherit') {\n            strictParseSymbol(state, '{');\n            var val = parseKeyword(state);\n            if (val === 'Translation') {\n                res.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.DontInheritTranslation;\n            }\n            else if (val === 'Rotation') {\n                res.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.DontInheritRotation;\n            }\n            else if (val === 'Scaling') {\n                res.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.DontInheritScaling;\n            }\n            strictParseSymbol(state, '}');\n        }\n        else if (keyword === 'SegmentColor') {\n            var colors = [];\n            strictParseSymbol(state, '{');\n            while (state.char() !== '}') {\n                parseKeyword(state); // Color\n                var colorArr = new Float32Array(3);\n                parseArray(state, colorArr, 0);\n                // bgr order, inverse from mdx\n                var temp = colorArr[0];\n                colorArr[0] = colorArr[2];\n                colorArr[2] = temp;\n                colors.push(colorArr);\n                parseSymbol(state, ',');\n            }\n            strictParseSymbol(state, '}');\n            res.SegmentColor = colors;\n        }\n        else if (keyword === 'Alpha') {\n            res.Alpha = new Uint8Array(3);\n            parseArray(state, res.Alpha, 0);\n        }\n        else if (keyword === 'ParticleScaling') {\n            res[keyword] = new Float32Array(3);\n            parseArray(state, res[keyword], 0);\n        }\n        else if (keyword === 'LifeSpanUVAnim' || keyword === 'DecayUVAnim' || keyword === 'TailUVAnim' ||\n            keyword === 'TailDecayUVAnim') {\n            res[keyword] = new Uint32Array(3);\n            parseArray(state, res[keyword], 0);\n        }\n        else if (keyword === 'Transparent' || keyword === 'Blend' || keyword === 'Additive' ||\n            keyword === 'AlphaKey' || keyword === 'Modulate' || keyword === 'Modulate2x') {\n            res.FilterMode = _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FilterMode[keyword];\n        }\n        else {\n            res[keyword] = parseNumber(state);\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.ParticleEmitters2.push(res);\n    model.Nodes[res.ObjectId] = res;\n}\nfunction parseCamera(state, model) {\n    var res = {\n        Name: null,\n        Position: null,\n        FieldOfView: 0,\n        NearClip: 0,\n        FarClip: 0,\n        TargetPosition: null\n    };\n    res.Name = parseString(state);\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'Position') {\n            res.Position = new Float32Array(3);\n            parseArray(state, res.Position, 0);\n        }\n        else if (keyword === 'FieldOfView' || keyword === 'NearClip' || keyword === 'FarClip') {\n            res[keyword] = parseNumber(state);\n        }\n        else if (keyword === 'Target') {\n            strictParseSymbol(state, '{');\n            while (state.char() !== '}') {\n                var keyword2 = parseKeyword(state);\n                if (keyword2 === 'Position') {\n                    res.TargetPosition = new Float32Array(3);\n                    parseArray(state, res.TargetPosition, 0);\n                }\n                else if (keyword2 === 'Translation') {\n                    res.TargetTranslation = parseAnimVector(state, AnimVectorType.FLOAT3);\n                }\n                parseSymbol(state, ',');\n            }\n            strictParseSymbol(state, '}');\n        }\n        else if (keyword === 'Translation' || keyword === 'Rotation') {\n            res[keyword] = parseAnimVector(state, keyword === 'Rotation' ?\n                AnimVectorType.FLOAT1 :\n                AnimVectorType.FLOAT3);\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.Cameras.push(res);\n}\nfunction parseLight(state, model) {\n    var name = parseString(state);\n    var res = {\n        Name: name,\n        ObjectId: null,\n        Parent: null,\n        PivotPoint: null,\n        Flags: _model__WEBPACK_IMPORTED_MODULE_0__.NodeType.Light,\n        LightType: 0\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        var isStatic = false;\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'static') {\n            isStatic = true;\n            keyword = parseKeyword(state);\n        }\n        if (!isStatic && (keyword === 'Visibility' || keyword === 'Color' || keyword === 'Intensity' ||\n            keyword === 'AmbIntensity' || keyword === 'AmbColor' || keyword === 'Translation' ||\n            keyword === 'Rotation' || keyword === 'Scaling' || keyword === 'AttenuationStart' ||\n            keyword === 'AttenuationEnd')) {\n            var type = AnimVectorType.FLOAT3;\n            switch (keyword) {\n                case 'Rotation':\n                    type = AnimVectorType.FLOAT4;\n                    break;\n                case 'Visibility':\n                case 'Intensity':\n                case 'AmbIntensity':\n                case 'AttenuationStart':\n                case 'AttenuationEnd':\n                    type = AnimVectorType.FLOAT1;\n                    break;\n            }\n            res[keyword] = parseAnimVector(state, type);\n            if (keyword === 'Color' || keyword === 'AmbColor') {\n                for (var _i = 0, _a = res[keyword].Keys; _i < _a.length; _i++) {\n                    var key = _a[_i];\n                    key.Vector.reverse();\n                    if (key.InTan) {\n                        key.InTan.reverse();\n                        key.OutTan.reverse();\n                    }\n                }\n            }\n        }\n        else if (keyword === 'Omnidirectional' || keyword === 'Directional' || keyword === 'Ambient') {\n            res.LightType = _model__WEBPACK_IMPORTED_MODULE_0__.LightType[keyword];\n        }\n        else if (keyword === 'Color' || keyword === 'AmbColor') {\n            var color = new Float32Array(3);\n            parseArray(state, color, 0);\n            // bgr order, inverse from mdx\n            var temp = color[0];\n            color[0] = color[2];\n            color[2] = temp;\n            res[keyword] = color;\n        }\n        else {\n            res[keyword] = parseNumber(state);\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.Lights.push(res);\n    model.Nodes[res.ObjectId] = res;\n}\nfunction parseTextureAnims(state, model) {\n    var res = [];\n    parseNumber(state); // count, not used\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var obj = {};\n        parseKeyword(state); // TVertexAnim\n        strictParseSymbol(state, '{');\n        while (state.char() !== '}') {\n            var keyword = parseKeyword(state);\n            if (!keyword) {\n                throwError(state);\n            }\n            if (keyword === 'Translation' || keyword === 'Rotation' || keyword === 'Scaling') {\n                var type = keyword === 'Rotation' ? AnimVectorType.FLOAT4 : AnimVectorType.FLOAT3;\n                obj[keyword] = parseAnimVector(state, type);\n            }\n            else {\n                throw new Error('Unknown texture anim property ' + keyword);\n            }\n            parseSymbol(state, ',');\n        }\n        strictParseSymbol(state, '}');\n        res.push(obj);\n    }\n    strictParseSymbol(state, '}');\n    model.TextureAnims = res;\n}\nfunction parseRibbonEmitter(state, model) {\n    var name = parseString(state);\n    var res = {\n        Name: name,\n        ObjectId: null,\n        Parent: null,\n        PivotPoint: null,\n        Flags: _model__WEBPACK_IMPORTED_MODULE_0__.NodeType.RibbonEmitter,\n        HeightAbove: null,\n        HeightBelow: null,\n        Alpha: null,\n        Color: null,\n        LifeSpan: null,\n        TextureSlot: null,\n        EmissionRate: null,\n        Rows: null,\n        Columns: null,\n        MaterialID: 0,\n        Gravity: null,\n        Visibility: null\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        var isStatic = false;\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'static') {\n            isStatic = true;\n            keyword = parseKeyword(state);\n        }\n        if (!isStatic && (keyword === 'Visibility' || keyword === 'HeightAbove' || keyword === 'HeightBelow' ||\n            keyword === 'Translation' || keyword === 'Rotation' || keyword === 'Scaling' || keyword === 'Alpha' ||\n            keyword === 'TextureSlot')) {\n            var type = AnimVectorType.FLOAT3;\n            switch (keyword) {\n                case 'Rotation':\n                    type = AnimVectorType.FLOAT4;\n                    break;\n                case 'Visibility':\n                case 'HeightAbove':\n                case 'HeightBelow':\n                case 'Alpha':\n                    type = AnimVectorType.FLOAT1;\n                    break;\n                case 'TextureSlot':\n                    type = AnimVectorType.INT1;\n                    break;\n            }\n            res[keyword] = parseAnimVector(state, type);\n        }\n        else if (keyword === 'Color') {\n            var color = new Float32Array(3);\n            parseArray(state, color, 0);\n            // bgr order, inverse from mdx\n            var temp = color[0];\n            color[0] = color[2];\n            color[2] = temp;\n            res[keyword] = color;\n        }\n        else {\n            res[keyword] = parseNumber(state);\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.RibbonEmitters.push(res);\n    model.Nodes[res.ObjectId] = res;\n}\nfunction parseFaceFX(state, model) {\n    if (model.Version < 900) {\n        throwError(state, 'Unexpected model chunk FaceFX');\n    }\n    var name = parseString(state);\n    var res = {\n        Name: name,\n        Path: ''\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'Path') {\n            res.Path = parseString(state);\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.FaceFX = model.FaceFX || [];\n    model.FaceFX.push(res);\n}\nfunction parseBindPose(state, model) {\n    if (model.Version < 900) {\n        throwError(state, 'Unexpected model chunk BindPose');\n    }\n    var res = {\n        Matrices: []\n    };\n    strictParseSymbol(state, '{');\n    parseKeyword(state); // Matrices\n    var count = parseNumber(state);\n    strictParseSymbol(state, '{');\n    for (var i = 0; i < count; ++i) {\n        var matrix = new Float32Array(12);\n        parseArray(state, matrix, 0);\n        res.Matrices.push(matrix);\n    }\n    strictParseSymbol(state, '}');\n    strictParseSymbol(state, '}');\n    model.BindPoses = model.BindPoses || [];\n    model.BindPoses.push(res);\n}\nfunction parseParticleEmitterPopcorn(state, model) {\n    if (model.Version < 900) {\n        throwError(state, 'Unexpected model chunk ParticleEmitterPopcorn');\n    }\n    var name = parseString(state);\n    var res = {\n        Name: name,\n        ObjectId: null,\n        Parent: null,\n        PivotPoint: null,\n        Flags: _model__WEBPACK_IMPORTED_MODULE_0__.NodeType.ParticleEmitter\n    };\n    strictParseSymbol(state, '{');\n    while (state.char() !== '}') {\n        var keyword = parseKeyword(state);\n        var isStatic = false;\n        if (!keyword) {\n            throwError(state);\n        }\n        if (keyword === 'static') {\n            isStatic = true;\n            keyword = parseKeyword(state);\n        }\n        if (!isStatic && (keyword === 'LifeSpan' || keyword === 'EmissionRate' || keyword === 'Speed' ||\n            keyword === 'Color' || keyword === 'Alpha' || keyword === 'Visibility' ||\n            keyword === 'Rotation' || keyword === 'Scaling' || keyword === 'Translation')) {\n            var type = AnimVectorType.FLOAT3;\n            switch (keyword) {\n                case 'LifeSpan':\n                case 'EmissionRate':\n                case 'Speed':\n                case 'Alpha':\n                case 'Visibility':\n                    type = AnimVectorType.FLOAT1;\n                    break;\n            }\n            res[keyword] = parseAnimVector(state, type);\n        }\n        else if (keyword === 'LifeSpan' || keyword === 'EmissionRate' || keyword === 'Speed' || keyword === 'Alpha') {\n            res[keyword] = parseNumber(state);\n        }\n        else if (keyword === 'Color') {\n            var array = new Float32Array(3);\n            res[keyword] = parseArray(state, array, 0);\n        }\n        else if (keyword === 'ReplaceableId') {\n            res[keyword] = parseNumber(state);\n        }\n        else if (keyword === 'Path' || keyword === 'AnimVisibilityGuide') {\n            res[keyword] = parseString(state);\n        }\n        else if (keyword === 'Unshaded' || keyword === 'SortPrimsFarZ' || keyword === 'Unfogged') {\n            if (keyword === 'Unshaded') {\n                res.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitterPopcornFlags.Unshaded;\n            }\n            else if (keyword === 'Unfogged') {\n                res.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitterPopcornFlags.Unfogged;\n            }\n            else if (keyword === 'SortPrimsFarZ') {\n                res.Flags |= _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitterPopcornFlags.SortPrimsFarZ;\n            }\n        }\n        else {\n            res[keyword] = parseNumber(state);\n        }\n        parseSymbol(state, ',');\n    }\n    strictParseSymbol(state, '}');\n    model.ParticleEmitterPopcorns = model.ParticleEmitterPopcorns || [];\n    model.ParticleEmitterPopcorns.push(res);\n    model.Nodes[res.ObjectId] = res;\n}\nvar parsers = {\n    Version: parseVersion,\n    Model: parseModelInfo,\n    Sequences: parseSequences,\n    Textures: parseTextures,\n    Materials: parseMaterials,\n    Geoset: parseGeoset,\n    GeosetAnim: parseGeosetAnim,\n    Bone: parseBone,\n    Helper: parseHelper,\n    Attachment: parseAttachment,\n    PivotPoints: parsePivotPoints,\n    EventObject: parseEventObject,\n    CollisionShape: parseCollisionShape,\n    GlobalSequences: parseGlobalSequences,\n    ParticleEmitter: parseParticleEmitter,\n    ParticleEmitter2: parseParticleEmitter2,\n    Camera: parseCamera,\n    Light: parseLight,\n    TextureAnims: parseTextureAnims,\n    RibbonEmitter: parseRibbonEmitter,\n    FaceFX: parseFaceFX,\n    BindPose: parseBindPose,\n    ParticleEmitterPopcorn: parseParticleEmitterPopcorn\n};\nfunction parse(str) {\n    var state = new State(str);\n    var model = {\n        // default\n        Version: 800,\n        Info: {\n            Name: '',\n            MinimumExtent: null,\n            MaximumExtent: null,\n            BoundsRadius: 0,\n            BlendTime: 150\n        },\n        Sequences: [],\n        GlobalSequences: [],\n        Textures: [],\n        Materials: [],\n        TextureAnims: [],\n        Geosets: [],\n        GeosetAnims: [],\n        Bones: [],\n        Helpers: [],\n        Attachments: [],\n        EventObjects: [],\n        ParticleEmitters: [],\n        ParticleEmitters2: [],\n        Cameras: [],\n        Lights: [],\n        RibbonEmitters: [],\n        CollisionShapes: [],\n        PivotPoints: [],\n        Nodes: []\n    };\n    while (state.pos < state.str.length) {\n        while (parseComment(state))\n            ;\n        var keyword = parseKeyword(state);\n        if (keyword) {\n            if (keyword in parsers) {\n                parsers[keyword](state, model);\n            }\n            else {\n                parseUnknownBlock(state);\n            }\n        }\n        else {\n            break;\n        }\n    }\n    for (var i = 0; i < model.Nodes.length; ++i) {\n        if (model.PivotPoints[i]) {\n            model.Nodes[i].PivotPoint = model.PivotPoints[i];\n        }\n    }\n    return model;\n}\n\n\n//# sourceURL=webpack://war3-model/./mdl/parse.ts?");

/***/ }),

/***/ "./mdx/parse.ts":
/*!**********************!*\
  !*** ./mdx/parse.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"parse\": () => (/* binding */ parse)\n/* harmony export */ });\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model */ \"./model.ts\");\nvar _a;\n\nvar BIG_ENDIAN = true;\nvar NONE = -1;\nvar AnimVectorType;\n(function (AnimVectorType) {\n    AnimVectorType[AnimVectorType[\"INT1\"] = 0] = \"INT1\";\n    AnimVectorType[AnimVectorType[\"FLOAT1\"] = 1] = \"FLOAT1\";\n    AnimVectorType[AnimVectorType[\"FLOAT3\"] = 2] = \"FLOAT3\";\n    AnimVectorType[AnimVectorType[\"FLOAT4\"] = 3] = \"FLOAT4\";\n})(AnimVectorType || (AnimVectorType = {}));\nvar animVectorSize = (_a = {},\n    _a[AnimVectorType.INT1] = 1,\n    _a[AnimVectorType.FLOAT1] = 1,\n    _a[AnimVectorType.FLOAT3] = 3,\n    _a[AnimVectorType.FLOAT4] = 4,\n    _a);\nvar State = /** @class */ (function () {\n    function State(arrayBuffer) {\n        this.ab = arrayBuffer;\n        this.pos = 0;\n        this.length = arrayBuffer.byteLength;\n        this.view = new DataView(this.ab);\n        this.uint = new Uint8Array(this.ab);\n    }\n    State.prototype.keyword = function () {\n        var res = String.fromCharCode(this.uint[this.pos], this.uint[this.pos + 1], this.uint[this.pos + 2], this.uint[this.pos + 3]);\n        this.pos += 4;\n        return res;\n    };\n    State.prototype.expectKeyword = function (keyword, errorText) {\n        var curKeyword = this.keyword();\n        if (curKeyword !== keyword) {\n            throw new Error(errorText);\n        }\n    };\n    State.prototype.uint8 = function () {\n        return this.view.getUint8(this.pos++);\n    };\n    State.prototype.uint16 = function () {\n        var res = this.view.getUint16(this.pos, BIG_ENDIAN);\n        this.pos += 2;\n        return res;\n    };\n    State.prototype.int32 = function () {\n        var res = this.view.getInt32(this.pos, BIG_ENDIAN);\n        this.pos += 4;\n        return res;\n    };\n    State.prototype.float32 = function () {\n        var res = this.view.getFloat32(this.pos, BIG_ENDIAN);\n        this.pos += 4;\n        return res;\n    };\n    State.prototype.float32Array = function (len) {\n        var res = new Float32Array(len);\n        for (var i = 0; i < len; ++i) {\n            res[i] = this.float32();\n        }\n        return res;\n    };\n    State.prototype.uint8Array = function (len) {\n        var res = new Uint8Array(len);\n        for (var i = 0; i < len; ++i) {\n            res[i] = this.uint8();\n        }\n        return res;\n    };\n    State.prototype.str = function (length) {\n        // actual string length\n        // data may consist of ['a', 'b', 'c', 0, 0, 0]\n        var stringLength = length;\n        while (this.uint[this.pos + stringLength - 1] === 0 && stringLength > 0) {\n            --stringLength;\n        }\n        // ??\n        // TS2461:Type 'Uint8Array' is not an array type.\n        // let res = String.fromCharCode(...this.uint.slice(this.pos, this.pos + length));\n        // eslint-disable-next-line prefer-spread\n        var res = String.fromCharCode.apply(String, this.uint.slice(this.pos, this.pos + stringLength));\n        this.pos += length;\n        return res;\n    };\n    State.prototype.animVector = function (type) {\n        var res = {\n            Keys: []\n        };\n        var isInt = type === AnimVectorType.INT1;\n        var vectorSize = animVectorSize[type];\n        var keysCount = this.int32();\n        res.LineType = this.int32();\n        res.GlobalSeqId = this.int32();\n        if (res.GlobalSeqId === NONE) {\n            res.GlobalSeqId = null;\n        }\n        for (var i = 0; i < keysCount; ++i) {\n            var animKeyFrame = {};\n            animKeyFrame.Frame = this.int32();\n            if (isInt) {\n                animKeyFrame.Vector = new Int32Array(vectorSize);\n            }\n            else {\n                animKeyFrame.Vector = new Float32Array(vectorSize);\n            }\n            for (var j = 0; j < vectorSize; ++j) {\n                if (isInt) {\n                    animKeyFrame.Vector[j] = this.int32();\n                }\n                else {\n                    animKeyFrame.Vector[j] = this.float32();\n                }\n            }\n            if (res.LineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.Hermite || res.LineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.Bezier) {\n                for (var _i = 0, _a = ['InTan', 'OutTan']; _i < _a.length; _i++) {\n                    var part = _a[_i];\n                    animKeyFrame[part] = new Float32Array(vectorSize);\n                    for (var j = 0; j < vectorSize; ++j) {\n                        if (isInt) {\n                            animKeyFrame[part][j] = this.int32();\n                        }\n                        else {\n                            animKeyFrame[part][j] = this.float32();\n                        }\n                    }\n                }\n            }\n            res.Keys.push(animKeyFrame);\n        }\n        return res;\n    };\n    return State;\n}());\nfunction parseExtent(obj, state) {\n    obj.BoundsRadius = state.float32();\n    for (var _i = 0, _a = ['MinimumExtent', 'MaximumExtent']; _i < _a.length; _i++) {\n        var key = _a[_i];\n        obj[key] = new Float32Array(3);\n        for (var i = 0; i < 3; ++i) {\n            obj[key][i] = state.float32();\n        }\n    }\n}\nfunction parseVersion(model, state) {\n    model.Version = state.int32();\n}\nvar MODEL_NAME_LENGTH = 0x150;\nfunction parseModelInfo(model, state) {\n    model.Info.Name = state.str(MODEL_NAME_LENGTH);\n    state.int32(); // unknown 4-byte sequence\n    parseExtent(model.Info, state);\n    model.Info.BlendTime = state.int32();\n}\nvar MODEL_SEQUENCE_NAME_LENGTH = 0x50;\nfunction parseSequences(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var name = state.str(MODEL_SEQUENCE_NAME_LENGTH);\n        var sequence = {};\n        sequence.Name = name;\n        var interval = new Uint32Array(2);\n        interval[0] = state.int32();\n        interval[1] = state.int32();\n        sequence.Interval = interval;\n        sequence.MoveSpeed = state.float32();\n        sequence.NonLooping = state.int32() > 0;\n        sequence.Rarity = state.float32();\n        state.int32(); // unknown 4-byte sequence (syncPoint?)\n        parseExtent(sequence, state);\n        model.Sequences.push(sequence);\n    }\n}\nfunction parseMaterials(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        state.int32(); // material size inclusive\n        var material = {\n            Layers: []\n        };\n        material.PriorityPlane = state.int32();\n        material.RenderMode = state.int32();\n        if (model.Version >= 900) {\n            material.Shader = state.str(80);\n        }\n        state.expectKeyword('LAYS', 'Incorrect materials format');\n        var layersCount = state.int32();\n        for (var i = 0; i < layersCount; ++i) {\n            var startPos2 = state.pos;\n            var size2 = state.int32();\n            var layer = {};\n            layer.FilterMode = state.int32();\n            layer.Shading = state.int32();\n            layer.TextureID = state.int32();\n            layer.TVertexAnimId = state.int32();\n            if (layer.TVertexAnimId === NONE) {\n                layer.TVertexAnimId = null;\n            }\n            layer.CoordId = state.int32();\n            layer.Alpha = state.float32();\n            if (model.Version >= 900) {\n                layer.EmissiveGain = state.float32();\n                if (model.Version >= 1000) {\n                    layer.FresnelColor = state.float32Array(3);\n                    layer.FresnelOpacity = state.float32();\n                    layer.FresnelTeamColor = state.float32();\n                }\n            }\n            while (state.pos < startPos2 + size2) {\n                var keyword = state.keyword();\n                if (keyword === 'KMTA') {\n                    layer.Alpha = state.animVector(AnimVectorType.FLOAT1);\n                }\n                else if (keyword === 'KMTF') {\n                    layer.TextureID = state.animVector(AnimVectorType.INT1);\n                }\n                else if (keyword === 'KMTE' && model.Version >= 900) {\n                    layer.EmissiveGain = state.animVector(AnimVectorType.FLOAT1);\n                }\n                else if (keyword === 'KFC3' && model.Version >= 1000) {\n                    layer.FresnelColor = state.animVector(AnimVectorType.FLOAT3);\n                }\n                else if (keyword === 'KFCA' && model.Version >= 1000) {\n                    layer.FresnelOpacity = state.animVector(AnimVectorType.FLOAT1);\n                }\n                else if (keyword === 'KFTC' && model.Version >= 1000) {\n                    layer.FresnelTeamColor = state.animVector(AnimVectorType.FLOAT1);\n                }\n                else {\n                    throw new Error('Unknown layer chunk data ' + keyword);\n                }\n            }\n            material.Layers.push(layer);\n        }\n        model.Materials.push(material);\n    }\n}\nvar MODEL_TEXTURE_PATH_LENGTH = 0x100;\nfunction parseTextures(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var texture = {};\n        texture.ReplaceableId = state.int32();\n        texture.Image = state.str(MODEL_TEXTURE_PATH_LENGTH);\n        state.int32(); // unknown 4-byte sequence\n        texture.Flags = state.int32();\n        model.Textures.push(texture);\n    }\n}\nfunction parseGeosets(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var geoset = {};\n        state.int32(); // geoset size, not used\n        state.expectKeyword('VRTX', 'Incorrect geosets format');\n        var verticesCount = state.int32();\n        geoset.Vertices = new Float32Array(verticesCount * 3);\n        for (var i = 0; i < verticesCount * 3; ++i) {\n            geoset.Vertices[i] = state.float32();\n        }\n        state.expectKeyword('NRMS', 'Incorrect geosets format');\n        var normalsCount = state.int32();\n        geoset.Normals = new Float32Array(normalsCount * 3);\n        for (var i = 0; i < normalsCount * 3; ++i) {\n            geoset.Normals[i] = state.float32();\n        }\n        state.expectKeyword('PTYP', 'Incorrect geosets format');\n        var primitiveCount = state.int32();\n        for (var i = 0; i < primitiveCount; ++i) {\n            if (state.int32() !== 4) {\n                throw new Error('Incorrect geosets format');\n            }\n        }\n        state.expectKeyword('PCNT', 'Incorrect geosets format');\n        var faceGroupCount = state.int32();\n        for (var i = 0; i < faceGroupCount; ++i) {\n            state.int32();\n        }\n        state.expectKeyword('PVTX', 'Incorrect geosets format');\n        var indicesCount = state.int32();\n        geoset.Faces = new Uint16Array(indicesCount);\n        for (var i = 0; i < indicesCount; ++i) {\n            geoset.Faces[i] = state.uint16();\n        }\n        state.expectKeyword('GNDX', 'Incorrect geosets format');\n        var verticesGroupCount = state.int32();\n        geoset.VertexGroup = new Uint8Array(verticesGroupCount);\n        for (var i = 0; i < verticesGroupCount; ++i) {\n            geoset.VertexGroup[i] = state.uint8();\n        }\n        state.expectKeyword('MTGC', 'Incorrect geosets format');\n        var groupsCount = state.int32();\n        geoset.Groups = [];\n        for (var i = 0; i < groupsCount; ++i) {\n            // new Array(array length)\n            geoset.Groups[i] = new Array(state.int32());\n        }\n        state.expectKeyword('MATS', 'Incorrect geosets format');\n        geoset.TotalGroupsCount = state.int32();\n        var groupIndex = 0;\n        var groupCounter = 0;\n        for (var i = 0; i < geoset.TotalGroupsCount; ++i) {\n            if (groupIndex >= geoset.Groups[groupCounter].length) {\n                groupIndex = 0;\n                groupCounter++;\n            }\n            geoset.Groups[groupCounter][groupIndex++] = state.int32();\n        }\n        geoset.MaterialID = state.int32();\n        geoset.SelectionGroup = state.int32();\n        geoset.Unselectable = state.int32() > 0;\n        if (model.Version >= 900) {\n            geoset.LevelOfDetail = state.int32();\n            geoset.Name = state.str(80);\n        }\n        parseExtent(geoset, state);\n        var geosetAnimCount = state.int32();\n        geoset.Anims = [];\n        for (var i = 0; i < geosetAnimCount; ++i) {\n            var geosetAnim = {};\n            parseExtent(geosetAnim, state);\n            geoset.Anims.push(geosetAnim);\n        }\n        var keyword = state.keyword();\n        if (model.Version >= 900) {\n            // eslint-disable-next-line no-constant-condition\n            while (1) {\n                if (state.pos >= state.length) {\n                    throw new Error('Unexpected EOF');\n                }\n                if (keyword === 'TANG') {\n                    if (geoset.Tangents) {\n                        throw new Error('Incorrect geoset, multiple Tangents');\n                    }\n                    var len = state.int32();\n                    geoset.Tangents = state.float32Array(len * 4);\n                }\n                else if (keyword === 'SKIN') {\n                    if (geoset.SkinWeights) {\n                        throw new Error('Incorrect geoset, multiple SkinWeights');\n                    }\n                    var len = state.int32();\n                    geoset.SkinWeights = state.uint8Array(len);\n                }\n                else if (keyword === 'UVAS') {\n                    break;\n                }\n                keyword = state.keyword();\n            }\n        }\n        else if (keyword !== 'UVAS') {\n            throw new Error('Incorrect geosets format');\n        }\n        var textureChunkCount = state.int32();\n        geoset.TVertices = [];\n        for (var i = 0; i < textureChunkCount; ++i) {\n            state.expectKeyword('UVBS', 'Incorrect geosets format');\n            var textureCoordsCount = state.int32();\n            var tvertices = new Float32Array(textureCoordsCount * 2);\n            for (var j = 0; j < textureCoordsCount * 2; ++j) {\n                tvertices[j] = state.float32();\n            }\n            geoset.TVertices.push(tvertices);\n        }\n        model.Geosets.push(geoset);\n    }\n}\nfunction parseGeosetAnims(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var animStartPos = state.pos;\n        var animSize = state.int32();\n        var geosetAnim = {};\n        geosetAnim.Alpha = state.float32();\n        geosetAnim.Flags = state.int32();\n        geosetAnim.Color = new Float32Array(3);\n        for (var i = 0; i < 3; ++i) {\n            geosetAnim.Color[i] = state.float32();\n        }\n        geosetAnim.GeosetId = state.int32();\n        if (geosetAnim.GeosetId === NONE) {\n            geosetAnim.GeosetId = null;\n        }\n        while (state.pos < animStartPos + animSize) {\n            var keyword = state.keyword();\n            if (keyword === 'KGAO') {\n                geosetAnim.Alpha = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KGAC') {\n                geosetAnim.Color = state.animVector(AnimVectorType.FLOAT3);\n            }\n            else {\n                throw new Error('Incorrect GeosetAnim chunk data ' + keyword);\n            }\n        }\n        model.GeosetAnims.push(geosetAnim);\n    }\n}\nvar MODEL_NODE_NAME_LENGTH = 0x50;\nfunction parseNode(model, node, state) {\n    var startPos = state.pos;\n    var size = state.int32();\n    node.Name = state.str(MODEL_NODE_NAME_LENGTH);\n    node.ObjectId = state.int32();\n    if (node.ObjectId === NONE) {\n        node.ObjectId = null;\n    }\n    node.Parent = state.int32();\n    if (node.Parent === NONE) {\n        node.Parent = null;\n    }\n    node.Flags = state.int32();\n    while (state.pos < startPos + size) {\n        var keyword = state.keyword();\n        if (keyword === 'KGTR') {\n            node.Translation = state.animVector(AnimVectorType.FLOAT3);\n        }\n        else if (keyword === 'KGRT') {\n            node.Rotation = state.animVector(AnimVectorType.FLOAT4);\n        }\n        else if (keyword === 'KGSC') {\n            node.Scaling = state.animVector(AnimVectorType.FLOAT3);\n        }\n        else {\n            throw new Error('Incorrect node chunk data ' + keyword);\n        }\n    }\n    model.Nodes[node.ObjectId] = node;\n}\nfunction parseBones(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var bone = {};\n        parseNode(model, bone, state);\n        bone.GeosetId = state.int32();\n        if (bone.GeosetId === NONE) {\n            bone.GeosetId = null;\n        }\n        bone.GeosetAnimId = state.int32();\n        if (bone.GeosetAnimId === NONE) {\n            bone.GeosetAnimId = null;\n        }\n        model.Bones.push(bone);\n    }\n}\nfunction parseHelpers(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var helper = {};\n        parseNode(model, helper, state);\n        model.Helpers.push(helper);\n    }\n}\nvar MODEL_ATTACHMENT_PATH_LENGTH = 0x100;\nfunction parseAttachments(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var attachmentStart = state.pos;\n        var attachmentSize = state.int32();\n        var attachment = {};\n        parseNode(model, attachment, state);\n        attachment.Path = state.str(MODEL_ATTACHMENT_PATH_LENGTH);\n        state.int32(); // unknown 4-byte\n        attachment.AttachmentID = state.int32();\n        if (state.pos < attachmentStart + attachmentSize) {\n            state.expectKeyword('KATV', 'Incorrect attachment chunk data');\n            attachment.Visibility = state.animVector(AnimVectorType.FLOAT1);\n        }\n        model.Attachments.push(attachment);\n    }\n}\nfunction parsePivotPoints(model, state, size) {\n    var pointsCount = size / (4 * 3);\n    for (var i = 0; i < pointsCount; ++i) {\n        model.PivotPoints[i] = new Float32Array(3);\n        model.PivotPoints[i][0] = state.float32();\n        model.PivotPoints[i][1] = state.float32();\n        model.PivotPoints[i][2] = state.float32();\n    }\n}\nfunction parseEventObjects(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var eventObject = {};\n        parseNode(model, eventObject, state);\n        state.expectKeyword('KEVT', 'Incorrect EventObject chunk data');\n        var eventTrackCount = state.int32();\n        eventObject.EventTrack = new Uint32Array(eventTrackCount);\n        state.int32(); // unused 4-byte?\n        for (var i = 0; i < eventTrackCount; ++i) {\n            eventObject.EventTrack[i] = state.int32();\n        }\n        model.EventObjects.push(eventObject);\n    }\n}\nfunction parseCollisionShapes(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var collisionShape = {};\n        parseNode(model, collisionShape, state);\n        collisionShape.Shape = state.int32();\n        if (collisionShape.Shape === _model__WEBPACK_IMPORTED_MODULE_0__.CollisionShapeType.Box) {\n            collisionShape.Vertices = new Float32Array(6);\n        }\n        else {\n            collisionShape.Vertices = new Float32Array(3);\n        }\n        for (var i = 0; i < collisionShape.Vertices.length; ++i) {\n            collisionShape.Vertices[i] = state.float32();\n        }\n        if (collisionShape.Shape === _model__WEBPACK_IMPORTED_MODULE_0__.CollisionShapeType.Sphere) {\n            collisionShape.BoundsRadius = state.float32();\n        }\n        model.CollisionShapes.push(collisionShape);\n    }\n}\nfunction parseGlobalSequences(model, state, size) {\n    var startPos = state.pos;\n    model.GlobalSequences = [];\n    while (state.pos < startPos + size) {\n        model.GlobalSequences.push(state.int32());\n    }\n}\nvar MODEL_PARTICLE_EMITTER_PATH_LENGTH = 0x100;\nfunction parseParticleEmitters(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var emitterStart = state.pos;\n        var emitterSize = state.int32();\n        var emitter = {};\n        parseNode(model, emitter, state);\n        emitter.EmissionRate = state.float32();\n        emitter.Gravity = state.float32();\n        emitter.Longitude = state.float32();\n        emitter.Latitude = state.float32();\n        emitter.Path = state.str(MODEL_PARTICLE_EMITTER_PATH_LENGTH);\n        state.int32();\n        emitter.LifeSpan = state.float32();\n        emitter.InitVelocity = state.float32();\n        while (state.pos < emitterStart + emitterSize) {\n            var keyword = state.keyword();\n            if (keyword === 'KPEV') {\n                emitter.Visibility = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KPEE') {\n                emitter.EmissionRate = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KPEG') {\n                emitter.Gravity = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KPLN') {\n                emitter.Longitude = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KPLT') {\n                emitter.Latitude = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KPEL') {\n                emitter.LifeSpan = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KPES') {\n                emitter.InitVelocity = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else {\n                throw new Error('Incorrect particle emitter chunk data ' + keyword);\n            }\n        }\n        model.ParticleEmitters.push(emitter);\n    }\n}\nfunction parseParticleEmitters2(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var emitterStart = state.pos;\n        var emitterSize = state.int32();\n        var emitter = {};\n        parseNode(model, emitter, state);\n        emitter.Speed = state.float32();\n        emitter.Variation = state.float32();\n        emitter.Latitude = state.float32();\n        emitter.Gravity = state.float32();\n        emitter.LifeSpan = state.float32();\n        emitter.EmissionRate = state.float32();\n        emitter.Width = state.float32();\n        emitter.Length = state.float32();\n        emitter.FilterMode = state.int32();\n        emitter.Rows = state.int32();\n        emitter.Columns = state.int32();\n        var frameFlags = state.int32();\n        emitter.FrameFlags = 0;\n        if (frameFlags === 0 || frameFlags === 2) {\n            emitter.FrameFlags |= _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Head;\n        }\n        if (frameFlags === 1 || frameFlags === 2) {\n            emitter.FrameFlags |= _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail;\n        }\n        emitter.TailLength = state.float32();\n        emitter.Time = state.float32();\n        emitter.SegmentColor = [];\n        // always 3 segments\n        for (var i = 0; i < 3; ++i) {\n            emitter.SegmentColor[i] = new Float32Array(3);\n            //  rgb order, inverse from mdl\n            for (var j = 0; j < 3; ++j) {\n                emitter.SegmentColor[i][j] = state.float32();\n            }\n        }\n        emitter.Alpha = new Uint8Array(3);\n        for (var i = 0; i < 3; ++i) {\n            emitter.Alpha[i] = state.uint8();\n        }\n        emitter.ParticleScaling = new Float32Array(3);\n        for (var i = 0; i < 3; ++i) {\n            emitter.ParticleScaling[i] = state.float32();\n        }\n        for (var _i = 0, _a = ['LifeSpanUVAnim', 'DecayUVAnim', 'TailUVAnim', 'TailDecayUVAnim']; _i < _a.length; _i++) {\n            var part = _a[_i];\n            emitter[part] = new Uint32Array(3);\n            for (var i = 0; i < 3; ++i) {\n                emitter[part][i] = state.int32();\n            }\n        }\n        emitter.TextureID = state.int32();\n        if (emitter.TextureID === NONE) {\n            emitter.TextureID = null;\n        }\n        emitter.Squirt = state.int32() > 0;\n        emitter.PriorityPlane = state.int32();\n        emitter.ReplaceableId = state.int32();\n        while (state.pos < emitterStart + emitterSize) {\n            var keyword = state.keyword();\n            if (keyword === 'KP2V') {\n                emitter.Visibility = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KP2E') {\n                emitter.EmissionRate = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KP2W') {\n                emitter.Width = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KP2N') {\n                emitter.Length = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KP2S') {\n                emitter.Speed = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KP2L') {\n                emitter.Latitude = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KP2G') {\n                emitter.Gravity = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KP2R') {\n                emitter.Variation = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else {\n                throw new Error('Incorrect particle emitter2 chunk data ' + keyword);\n            }\n        }\n        model.ParticleEmitters2.push(emitter);\n    }\n}\nvar MODEL_CAMERA_NAME_LENGTH = 0x50;\nfunction parseCameras(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var cameraStart = state.pos;\n        var cameraSize = state.int32();\n        var camera = {};\n        camera.Name = state.str(MODEL_CAMERA_NAME_LENGTH);\n        camera.Position = new Float32Array(3);\n        camera.Position[0] = state.float32();\n        camera.Position[1] = state.float32();\n        camera.Position[2] = state.float32();\n        camera.FieldOfView = state.float32();\n        camera.FarClip = state.float32();\n        camera.NearClip = state.float32();\n        camera.TargetPosition = new Float32Array(3);\n        camera.TargetPosition[0] = state.float32();\n        camera.TargetPosition[1] = state.float32();\n        camera.TargetPosition[2] = state.float32();\n        while (state.pos < cameraStart + cameraSize) {\n            var keyword = state.keyword();\n            if (keyword === 'KCTR') {\n                camera.Translation = state.animVector(AnimVectorType.FLOAT3);\n            }\n            else if (keyword === 'KTTR') {\n                camera.TargetTranslation = state.animVector(AnimVectorType.FLOAT3);\n            }\n            else if (keyword === 'KCRL') {\n                camera.Rotation = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else {\n                throw new Error('Incorrect camera chunk data ' + keyword);\n            }\n        }\n        model.Cameras.push(camera);\n    }\n}\nfunction parseLights(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var lightStart = state.pos;\n        var lightSize = state.int32();\n        var light = {};\n        parseNode(model, light, state);\n        light.LightType = state.int32();\n        light.AttenuationStart = state.float32();\n        light.AttenuationEnd = state.float32();\n        light.Color = new Float32Array(3);\n        //  rgb order, inverse from mdl\n        for (var j = 0; j < 3; ++j) {\n            light.Color[j] = state.float32();\n        }\n        light.Intensity = state.float32();\n        light.AmbColor = new Float32Array(3);\n        //  rgb order, inverse from mdl\n        for (var j = 0; j < 3; ++j) {\n            light.AmbColor[j] = state.float32();\n        }\n        light.AmbIntensity = state.float32();\n        while (state.pos < lightStart + lightSize) {\n            var keyword = state.keyword();\n            if (keyword === 'KLAV') {\n                light.Visibility = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KLAC') {\n                light.Color = state.animVector(AnimVectorType.FLOAT3);\n            }\n            else if (keyword === 'KLAI') {\n                light.Intensity = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KLBC') {\n                light.AmbColor = state.animVector(AnimVectorType.FLOAT3);\n            }\n            else if (keyword === 'KLBI') {\n                light.AmbIntensity = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KLAS') {\n                light.AttenuationStart = state.animVector(AnimVectorType.INT1);\n            }\n            else if (keyword === 'KLAE') {\n                light.AttenuationEnd = state.animVector(AnimVectorType.INT1);\n            }\n            else {\n                throw new Error('Incorrect light chunk data ' + keyword);\n            }\n        }\n        model.Lights.push(light);\n    }\n}\nfunction parseTextureAnims(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var animStart = state.pos;\n        var animSize = state.int32();\n        var anim = {};\n        while (state.pos < animStart + animSize) {\n            var keyword = state.keyword();\n            if (keyword === 'KTAT') {\n                anim.Translation = state.animVector(AnimVectorType.FLOAT3);\n            }\n            else if (keyword === 'KTAR') {\n                anim.Rotation = state.animVector(AnimVectorType.FLOAT4);\n            }\n            else if (keyword === 'KTAS') {\n                anim.Scaling = state.animVector(AnimVectorType.FLOAT3);\n            }\n            else {\n                throw new Error('Incorrect light chunk data ' + keyword);\n            }\n        }\n        model.TextureAnims.push(anim);\n    }\n}\nfunction parseRibbonEmitters(model, state, size) {\n    var startPos = state.pos;\n    while (state.pos < startPos + size) {\n        var emitterStart = state.pos;\n        var emitterSize = state.int32();\n        var emitter = {};\n        parseNode(model, emitter, state);\n        emitter.HeightAbove = state.float32();\n        emitter.HeightBelow = state.float32();\n        emitter.Alpha = state.float32();\n        emitter.Color = new Float32Array(3);\n        //  rgb order, inverse from mdl\n        for (var j = 0; j < 3; ++j) {\n            emitter.Color[j] = state.float32();\n        }\n        emitter.LifeSpan = state.float32();\n        emitter.TextureSlot = state.int32();\n        emitter.EmissionRate = state.int32();\n        emitter.Rows = state.int32();\n        emitter.Columns = state.int32();\n        emitter.MaterialID = state.int32();\n        emitter.Gravity = state.float32();\n        while (state.pos < emitterStart + emitterSize) {\n            var keyword = state.keyword();\n            if (keyword === 'KRVS') {\n                emitter.Visibility = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KRHA') {\n                emitter.HeightAbove = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KRHB') {\n                emitter.HeightBelow = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KRAL') {\n                emitter.Alpha = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KRTX') {\n                emitter.TextureSlot = state.animVector(AnimVectorType.INT1);\n            }\n            else {\n                throw new Error('Incorrect ribbon emitter chunk data ' + keyword);\n            }\n        }\n        model.RibbonEmitters.push(emitter);\n    }\n}\nfunction parseFaceFX(model, state, size) {\n    if (model.Version < 900) {\n        throw new Error('Mismatched version chunk');\n    }\n    var startPos = state.pos;\n    model.FaceFX = model.FaceFX || [];\n    while (state.pos < startPos + size) {\n        var faceFX = {\n            Name: '',\n            Path: ''\n        };\n        faceFX.Name = state.str(80);\n        faceFX.Path = state.str(260);\n        model.FaceFX.push(faceFX);\n    }\n}\nfunction parseBindPose(model, state, size) {\n    if (model.Version < 900) {\n        throw new Error('Mismatched version chunk');\n    }\n    var startPos = state.pos;\n    model.BindPoses = model.BindPoses || [];\n    var len = state.int32();\n    var bindPose = {\n        Matrices: []\n    };\n    for (var i = 0; i < len; ++i) {\n        var matrix = state.float32Array(12);\n        bindPose.Matrices.push(matrix);\n    }\n    model.BindPoses.push(bindPose);\n    if (state.pos !== startPos + size) {\n        throw new Error('Mismatched BindPose data');\n    }\n}\nfunction parseParticleEmitterPopcorn(model, state, size) {\n    if (model.Version < 900) {\n        throw new Error('Mismatched version chunk');\n    }\n    var startPos = state.pos;\n    model.ParticleEmitterPopcorns = model.ParticleEmitterPopcorns || [];\n    while (state.pos < startPos + size) {\n        var emitterStart = state.pos;\n        var emitterSize = state.int32();\n        var emitter = {};\n        parseNode(model, emitter, state);\n        emitter.LifeSpan = state.float32();\n        emitter.EmissionRate = state.float32();\n        emitter.Speed = state.float32();\n        emitter.Color = state.float32Array(3);\n        emitter.Alpha = state.float32();\n        emitter.ReplaceableId = state.int32();\n        emitter.Path = state.str(260);\n        emitter.AnimVisibilityGuide = state.str(260);\n        while (state.pos < emitterStart + emitterSize) {\n            var keyword = state.keyword();\n            if (keyword === 'KPPA') {\n                emitter.Alpha = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KPPC') {\n                emitter.Color = state.animVector(AnimVectorType.FLOAT3);\n            }\n            else if (keyword === 'KPPE') {\n                emitter.EmissionRate = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KPPL') {\n                emitter.LifeSpan = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KPPS') {\n                emitter.Speed = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else if (keyword === 'KPPV') {\n                emitter.Visibility = state.animVector(AnimVectorType.FLOAT1);\n            }\n            else {\n                throw new Error('Incorrect particle emitter popcorn chunk data ' + keyword);\n            }\n        }\n        model.ParticleEmitterPopcorns.push(emitter);\n    }\n}\nvar parsers = {\n    VERS: parseVersion,\n    MODL: parseModelInfo,\n    SEQS: parseSequences,\n    MTLS: parseMaterials,\n    TEXS: parseTextures,\n    GEOS: parseGeosets,\n    GEOA: parseGeosetAnims,\n    BONE: parseBones,\n    HELP: parseHelpers,\n    ATCH: parseAttachments,\n    PIVT: parsePivotPoints,\n    EVTS: parseEventObjects,\n    CLID: parseCollisionShapes,\n    GLBS: parseGlobalSequences,\n    PREM: parseParticleEmitters,\n    PRE2: parseParticleEmitters2,\n    CAMS: parseCameras,\n    LITE: parseLights,\n    TXAN: parseTextureAnims,\n    RIBB: parseRibbonEmitters,\n    FAFX: parseFaceFX,\n    BPOS: parseBindPose,\n    CORN: parseParticleEmitterPopcorn\n};\nfunction parse(arrayBuffer) {\n    var state = new State(arrayBuffer);\n    if (state.keyword() !== 'MDLX') {\n        throw new Error('Not a mdx model');\n    }\n    var model = {\n        // default\n        Version: 800,\n        Info: {\n            Name: '',\n            MinimumExtent: null,\n            MaximumExtent: null,\n            BoundsRadius: 0,\n            BlendTime: 150\n        },\n        Sequences: [],\n        GlobalSequences: [],\n        Textures: [],\n        Materials: [],\n        TextureAnims: [],\n        Geosets: [],\n        GeosetAnims: [],\n        Bones: [],\n        Helpers: [],\n        Attachments: [],\n        EventObjects: [],\n        ParticleEmitters: [],\n        ParticleEmitters2: [],\n        Cameras: [],\n        Lights: [],\n        RibbonEmitters: [],\n        CollisionShapes: [],\n        PivotPoints: [],\n        Nodes: []\n    };\n    while (state.pos < state.length) {\n        var keyword = state.keyword();\n        var size = state.int32();\n        if (keyword in parsers) {\n            parsers[keyword](model, state, size);\n        }\n        else {\n            // throw new Error('Unknown group ' + keyword);\n            state.pos += size;\n        }\n    }\n    for (var i = 0; i < model.Nodes.length; ++i) {\n        if (model.Nodes[i] && model.PivotPoints[i]) {\n            model.Nodes[i].PivotPoint = model.PivotPoints[i];\n        }\n    }\n    model.Info.NumGeosets = model.Geosets.length;\n    model.Info.NumGeosetAnims = model.GeosetAnims.length;\n    model.Info.NumBones = model.Bones.length;\n    model.Info.NumLights = model.Lights.length;\n    model.Info.NumAttachments = model.Attachments.length;\n    model.Info.NumEvents = model.EventObjects.length;\n    model.Info.NumParticleEmitters = model.ParticleEmitters.length;\n    model.Info.NumParticleEmitters2 = model.ParticleEmitters2.length;\n    model.Info.NumRibbonEmitters = model.RibbonEmitters.length;\n    return model;\n}\n\n\n//# sourceURL=webpack://war3-model/./mdx/parse.ts?");

/***/ }),

/***/ "./model.ts":
/*!******************!*\
  !*** ./model.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CollisionShapeType\": () => (/* binding */ CollisionShapeType),\n/* harmony export */   \"FilterMode\": () => (/* binding */ FilterMode),\n/* harmony export */   \"GeosetAnimFlags\": () => (/* binding */ GeosetAnimFlags),\n/* harmony export */   \"LayerShading\": () => (/* binding */ LayerShading),\n/* harmony export */   \"LightType\": () => (/* binding */ LightType),\n/* harmony export */   \"LineType\": () => (/* binding */ LineType),\n/* harmony export */   \"MaterialRenderMode\": () => (/* binding */ MaterialRenderMode),\n/* harmony export */   \"NodeFlags\": () => (/* binding */ NodeFlags),\n/* harmony export */   \"NodeType\": () => (/* binding */ NodeType),\n/* harmony export */   \"ParticleEmitter2FilterMode\": () => (/* binding */ ParticleEmitter2FilterMode),\n/* harmony export */   \"ParticleEmitter2Flags\": () => (/* binding */ ParticleEmitter2Flags),\n/* harmony export */   \"ParticleEmitter2FramesFlags\": () => (/* binding */ ParticleEmitter2FramesFlags),\n/* harmony export */   \"ParticleEmitterFlags\": () => (/* binding */ ParticleEmitterFlags),\n/* harmony export */   \"ParticleEmitterPopcornFlags\": () => (/* binding */ ParticleEmitterPopcornFlags),\n/* harmony export */   \"TextureFlags\": () => (/* binding */ TextureFlags)\n/* harmony export */ });\nvar TextureFlags;\n(function (TextureFlags) {\n    TextureFlags[TextureFlags[\"WrapWidth\"] = 1] = \"WrapWidth\";\n    TextureFlags[TextureFlags[\"WrapHeight\"] = 2] = \"WrapHeight\";\n})(TextureFlags || (TextureFlags = {}));\nvar FilterMode;\n(function (FilterMode) {\n    FilterMode[FilterMode[\"None\"] = 0] = \"None\";\n    FilterMode[FilterMode[\"Transparent\"] = 1] = \"Transparent\";\n    FilterMode[FilterMode[\"Blend\"] = 2] = \"Blend\";\n    FilterMode[FilterMode[\"Additive\"] = 3] = \"Additive\";\n    FilterMode[FilterMode[\"AddAlpha\"] = 4] = \"AddAlpha\";\n    FilterMode[FilterMode[\"Modulate\"] = 5] = \"Modulate\";\n    FilterMode[FilterMode[\"Modulate2x\"] = 6] = \"Modulate2x\";\n})(FilterMode || (FilterMode = {}));\nvar LineType;\n(function (LineType) {\n    LineType[LineType[\"DontInterp\"] = 0] = \"DontInterp\";\n    LineType[LineType[\"Linear\"] = 1] = \"Linear\";\n    LineType[LineType[\"Hermite\"] = 2] = \"Hermite\";\n    LineType[LineType[\"Bezier\"] = 3] = \"Bezier\";\n})(LineType || (LineType = {}));\nvar LayerShading;\n(function (LayerShading) {\n    LayerShading[LayerShading[\"Unshaded\"] = 1] = \"Unshaded\";\n    LayerShading[LayerShading[\"SphereEnvMap\"] = 2] = \"SphereEnvMap\";\n    LayerShading[LayerShading[\"TwoSided\"] = 16] = \"TwoSided\";\n    LayerShading[LayerShading[\"Unfogged\"] = 32] = \"Unfogged\";\n    LayerShading[LayerShading[\"NoDepthTest\"] = 64] = \"NoDepthTest\";\n    LayerShading[LayerShading[\"NoDepthSet\"] = 128] = \"NoDepthSet\";\n})(LayerShading || (LayerShading = {}));\nvar MaterialRenderMode;\n(function (MaterialRenderMode) {\n    MaterialRenderMode[MaterialRenderMode[\"ConstantColor\"] = 1] = \"ConstantColor\";\n    MaterialRenderMode[MaterialRenderMode[\"SortPrimsFarZ\"] = 16] = \"SortPrimsFarZ\";\n    MaterialRenderMode[MaterialRenderMode[\"FullResolution\"] = 32] = \"FullResolution\";\n})(MaterialRenderMode || (MaterialRenderMode = {}));\nvar GeosetAnimFlags;\n(function (GeosetAnimFlags) {\n    GeosetAnimFlags[GeosetAnimFlags[\"DropShadow\"] = 1] = \"DropShadow\";\n    GeosetAnimFlags[GeosetAnimFlags[\"Color\"] = 2] = \"Color\";\n})(GeosetAnimFlags || (GeosetAnimFlags = {}));\nvar NodeFlags;\n(function (NodeFlags) {\n    NodeFlags[NodeFlags[\"DontInheritTranslation\"] = 1] = \"DontInheritTranslation\";\n    NodeFlags[NodeFlags[\"DontInheritRotation\"] = 2] = \"DontInheritRotation\";\n    NodeFlags[NodeFlags[\"DontInheritScaling\"] = 4] = \"DontInheritScaling\";\n    NodeFlags[NodeFlags[\"Billboarded\"] = 8] = \"Billboarded\";\n    NodeFlags[NodeFlags[\"BillboardedLockX\"] = 16] = \"BillboardedLockX\";\n    NodeFlags[NodeFlags[\"BillboardedLockY\"] = 32] = \"BillboardedLockY\";\n    NodeFlags[NodeFlags[\"BillboardedLockZ\"] = 64] = \"BillboardedLockZ\";\n    NodeFlags[NodeFlags[\"CameraAnchored\"] = 128] = \"CameraAnchored\";\n})(NodeFlags || (NodeFlags = {}));\nvar NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Helper\"] = 0] = \"Helper\";\n    NodeType[NodeType[\"Bone\"] = 256] = \"Bone\";\n    NodeType[NodeType[\"Light\"] = 512] = \"Light\";\n    NodeType[NodeType[\"EventObject\"] = 1024] = \"EventObject\";\n    NodeType[NodeType[\"Attachment\"] = 2048] = \"Attachment\";\n    NodeType[NodeType[\"ParticleEmitter\"] = 4096] = \"ParticleEmitter\";\n    NodeType[NodeType[\"CollisionShape\"] = 8192] = \"CollisionShape\";\n    NodeType[NodeType[\"RibbonEmitter\"] = 16384] = \"RibbonEmitter\";\n})(NodeType || (NodeType = {}));\nvar CollisionShapeType;\n(function (CollisionShapeType) {\n    CollisionShapeType[CollisionShapeType[\"Box\"] = 0] = \"Box\";\n    CollisionShapeType[CollisionShapeType[\"Sphere\"] = 2] = \"Sphere\";\n})(CollisionShapeType || (CollisionShapeType = {}));\nvar ParticleEmitterFlags;\n(function (ParticleEmitterFlags) {\n    ParticleEmitterFlags[ParticleEmitterFlags[\"EmitterUsesMDL\"] = 32768] = \"EmitterUsesMDL\";\n    ParticleEmitterFlags[ParticleEmitterFlags[\"EmitterUsesTGA\"] = 65536] = \"EmitterUsesTGA\";\n})(ParticleEmitterFlags || (ParticleEmitterFlags = {}));\nvar ParticleEmitter2Flags;\n(function (ParticleEmitter2Flags) {\n    ParticleEmitter2Flags[ParticleEmitter2Flags[\"Unshaded\"] = 32768] = \"Unshaded\";\n    ParticleEmitter2Flags[ParticleEmitter2Flags[\"SortPrimsFarZ\"] = 65536] = \"SortPrimsFarZ\";\n    ParticleEmitter2Flags[ParticleEmitter2Flags[\"LineEmitter\"] = 131072] = \"LineEmitter\";\n    ParticleEmitter2Flags[ParticleEmitter2Flags[\"Unfogged\"] = 262144] = \"Unfogged\";\n    ParticleEmitter2Flags[ParticleEmitter2Flags[\"ModelSpace\"] = 524288] = \"ModelSpace\";\n    ParticleEmitter2Flags[ParticleEmitter2Flags[\"XYQuad\"] = 1048576] = \"XYQuad\";\n})(ParticleEmitter2Flags || (ParticleEmitter2Flags = {}));\nvar ParticleEmitter2FilterMode;\n(function (ParticleEmitter2FilterMode) {\n    ParticleEmitter2FilterMode[ParticleEmitter2FilterMode[\"Blend\"] = 0] = \"Blend\";\n    ParticleEmitter2FilterMode[ParticleEmitter2FilterMode[\"Additive\"] = 1] = \"Additive\";\n    ParticleEmitter2FilterMode[ParticleEmitter2FilterMode[\"Modulate\"] = 2] = \"Modulate\";\n    ParticleEmitter2FilterMode[ParticleEmitter2FilterMode[\"Modulate2x\"] = 3] = \"Modulate2x\";\n    ParticleEmitter2FilterMode[ParticleEmitter2FilterMode[\"AlphaKey\"] = 4] = \"AlphaKey\";\n})(ParticleEmitter2FilterMode || (ParticleEmitter2FilterMode = {}));\n// Not actually mapped to mdx flags (0: Head, 1: Tail, 2: Both)\nvar ParticleEmitter2FramesFlags;\n(function (ParticleEmitter2FramesFlags) {\n    ParticleEmitter2FramesFlags[ParticleEmitter2FramesFlags[\"Head\"] = 1] = \"Head\";\n    ParticleEmitter2FramesFlags[ParticleEmitter2FramesFlags[\"Tail\"] = 2] = \"Tail\";\n})(ParticleEmitter2FramesFlags || (ParticleEmitter2FramesFlags = {}));\nvar LightType;\n(function (LightType) {\n    LightType[LightType[\"Omnidirectional\"] = 0] = \"Omnidirectional\";\n    LightType[LightType[\"Directional\"] = 1] = \"Directional\";\n    LightType[LightType[\"Ambient\"] = 2] = \"Ambient\";\n})(LightType || (LightType = {}));\n/* Since Version: 900 */\nvar ParticleEmitterPopcornFlags;\n(function (ParticleEmitterPopcornFlags) {\n    ParticleEmitterPopcornFlags[ParticleEmitterPopcornFlags[\"Unshaded\"] = 32768] = \"Unshaded\";\n    ParticleEmitterPopcornFlags[ParticleEmitterPopcornFlags[\"SortPrimsFarZ\"] = 65536] = \"SortPrimsFarZ\";\n    ParticleEmitterPopcornFlags[ParticleEmitterPopcornFlags[\"Unfogged\"] = 262144] = \"Unfogged\";\n})(ParticleEmitterPopcornFlags || (ParticleEmitterPopcornFlags = {}));\n\n\n//# sourceURL=webpack://war3-model/./model.ts?");

/***/ }),

/***/ "./renderer/interp.ts":
/*!****************************!*\
  !*** ./renderer/interp.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"findKeyframes\": () => (/* binding */ findKeyframes),\n/* harmony export */   \"interpNum\": () => (/* binding */ interpNum),\n/* harmony export */   \"interpQuat\": () => (/* binding */ interpQuat),\n/* harmony export */   \"interpVec3\": () => (/* binding */ interpVec3),\n/* harmony export */   \"lerp\": () => (/* binding */ lerp)\n/* harmony export */ });\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model */ \"./model.ts\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/quat.js\");\n\n\nvar findKeyframesRes = {\n    frame: 0,\n    left: null,\n    right: null\n};\nfunction lerp(left, right, t) {\n    return left * (1 - t) + right * t;\n}\nfunction bezier(left, outTan, inTan, right, t) {\n    var inverseFactor = 1 - t, inverseFactorTimesTwo = inverseFactor * inverseFactor, factorTimes2 = t * t, factor1 = inverseFactorTimesTwo * inverseFactor, factor2 = 3 * t * inverseFactorTimesTwo, factor3 = 3 * factorTimes2 * inverseFactor, factor4 = factorTimes2 * t;\n    return left * factor1 + outTan * factor2 + inTan * factor3 + right * factor4;\n}\nfunction hermite(left, outTan, inTan, right, t) {\n    var factorTimes2 = t * t, factor1 = factorTimes2 * (2 * t - 3) + 1, factor2 = factorTimes2 * (t - 2) + t, factor3 = factorTimes2 * (t - 1), factor4 = factorTimes2 * (3 - 2 * t);\n    return left * factor1 + outTan * factor2 + inTan * factor3 + right * factor4;\n}\nfunction findKeyframes(animVector, frame, from, to) {\n    if (!animVector) {\n        return null;\n    }\n    var array = animVector.Keys;\n    var first = 0;\n    var count = array.length;\n    if (count === 0) {\n        return null;\n    }\n    if (array[0].Frame > to) {\n        return null;\n    }\n    else if (array[count - 1].Frame < from) {\n        return null;\n    }\n    while (count > 0) {\n        var step = count >> 1;\n        if (array[first + step].Frame <= frame) {\n            first = first + step + 1;\n            count -= step + 1;\n        }\n        else {\n            count = step;\n        }\n    }\n    if (first === array.length || array[first].Frame > to) {\n        if (first > 0 && array[first - 1].Frame >= from) {\n            findKeyframesRes.frame = frame;\n            findKeyframesRes.left = array[first - 1];\n            findKeyframesRes.right = array[first - 1];\n            return findKeyframesRes;\n        }\n        else {\n            return null;\n        }\n    }\n    if (first === 0 || array[first - 1].Frame < from) {\n        if (array[first].Frame <= to) {\n            findKeyframesRes.frame = frame;\n            findKeyframesRes.left = array[first];\n            findKeyframesRes.right = array[first];\n            return findKeyframesRes;\n        }\n        else {\n            return null;\n        }\n    }\n    findKeyframesRes.frame = frame;\n    findKeyframesRes.left = array[first - 1];\n    findKeyframesRes.right = array[first];\n    return findKeyframesRes;\n}\nfunction interpNum(frame, left, right, lineType) {\n    if (left.Frame === right.Frame) {\n        return left.Vector[0];\n    }\n    var t = (frame - left.Frame) / (right.Frame - left.Frame);\n    if (lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.DontInterp) {\n        return left.Vector[0];\n    }\n    else if (lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.Bezier) {\n        return bezier(left.Vector[0], left.OutTan[0], right.InTan[0], right.Vector[0], t);\n    }\n    else if (lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.Hermite) {\n        return hermite(left.Vector[0], left.OutTan[0], right.InTan[0], right.Vector[0], t);\n    }\n    else {\n        // Linear\n        return lerp(left.Vector[0], right.Vector[0], t);\n    }\n}\nfunction interpVec3(out, frame, left, right, lineType) {\n    if (left.Frame === right.Frame) {\n        return left.Vector;\n    }\n    var t = (frame - left.Frame) / (right.Frame - left.Frame);\n    if (lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.DontInterp) {\n        return left.Vector;\n    }\n    else if (lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.Bezier) {\n        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__.bezier(out, left.Vector, left.OutTan, right.InTan, right.Vector, t);\n    }\n    else if (lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.Hermite) {\n        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__.hermite(out, left.Vector, left.OutTan, right.InTan, right.Vector, t);\n    }\n    else {\n        return gl_matrix__WEBPACK_IMPORTED_MODULE_1__.lerp(out, left.Vector, right.Vector, t);\n    }\n}\nfunction interpQuat(out, frame, left, right, lineType) {\n    if (left.Frame === right.Frame) {\n        return left.Vector;\n    }\n    var t = (frame - left.Frame) / (right.Frame - left.Frame);\n    if (lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.DontInterp) {\n        return left.Vector;\n    }\n    else if (lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.Hermite || lineType === _model__WEBPACK_IMPORTED_MODULE_0__.LineType.Bezier) {\n        return gl_matrix__WEBPACK_IMPORTED_MODULE_2__.sqlerp(out, left.Vector, left.OutTan, right.InTan, right.Vector, t);\n    }\n    else {\n        return gl_matrix__WEBPACK_IMPORTED_MODULE_2__.slerp(out, left.Vector, right.Vector, t);\n    }\n}\n\n\n//# sourceURL=webpack://war3-model/./renderer/interp.ts?");

/***/ }),

/***/ "./renderer/modelInterp.ts":
/*!*********************************!*\
  !*** ./renderer/modelInterp.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ModelInterp\": () => (/* binding */ ModelInterp)\n/* harmony export */ });\n/* harmony import */ var _interp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interp */ \"./renderer/interp.ts\");\n\nvar findLocalFrameRes = {\n    frame: 0,\n    from: 0,\n    to: 0\n};\nvar ModelInterp = /** @class */ (function () {\n    function ModelInterp(rendererData) {\n        this.rendererData = rendererData;\n    }\n    ModelInterp.maxAnimVectorVal = function (vector) {\n        if (typeof vector === 'number') {\n            return vector;\n        }\n        var max = vector.Keys[0].Vector[0];\n        for (var i = 1; i < vector.Keys.length; ++i) {\n            if (vector.Keys[i].Vector[0] > max) {\n                max = vector.Keys[i].Vector[0];\n            }\n        }\n        return max;\n    };\n    ModelInterp.prototype.num = function (animVector) {\n        var res = this.findKeyframes(animVector);\n        if (!res) {\n            return null;\n        }\n        return (0,_interp__WEBPACK_IMPORTED_MODULE_0__.interpNum)(res.frame, res.left, res.right, animVector.LineType);\n    };\n    ModelInterp.prototype.vec3 = function (out, animVector) {\n        var res = this.findKeyframes(animVector);\n        if (!res) {\n            return null;\n        }\n        return (0,_interp__WEBPACK_IMPORTED_MODULE_0__.interpVec3)(out, res.frame, res.left, res.right, animVector.LineType);\n    };\n    ModelInterp.prototype.quat = function (out, animVector) {\n        var res = this.findKeyframes(animVector);\n        if (!res) {\n            return null;\n        }\n        return (0,_interp__WEBPACK_IMPORTED_MODULE_0__.interpQuat)(out, res.frame, res.left, res.right, animVector.LineType);\n    };\n    ModelInterp.prototype.animVectorVal = function (vector, defaultVal) {\n        var res;\n        if (typeof vector === 'number') {\n            res = vector;\n        }\n        else {\n            res = this.num(vector);\n            if (res === null) {\n                res = defaultVal;\n            }\n        }\n        return res;\n    };\n    ModelInterp.prototype.findKeyframes = function (animVector) {\n        if (!animVector) {\n            return null;\n        }\n        var _a = this.findLocalFrame(animVector), frame = _a.frame, from = _a.from, to = _a.to;\n        return (0,_interp__WEBPACK_IMPORTED_MODULE_0__.findKeyframes)(animVector, frame, from, to);\n    };\n    ModelInterp.prototype.findLocalFrame = function (animVector) {\n        if (typeof animVector.GlobalSeqId === 'number') {\n            findLocalFrameRes.frame = this.rendererData.globalSequencesFrames[animVector.GlobalSeqId];\n            findLocalFrameRes.from = 0;\n            findLocalFrameRes.to = this.rendererData.model.GlobalSequences[animVector.GlobalSeqId];\n        }\n        else {\n            findLocalFrameRes.frame = this.rendererData.frame;\n            findLocalFrameRes.from = this.rendererData.animationInfo.Interval[0];\n            findLocalFrameRes.to = this.rendererData.animationInfo.Interval[1];\n        }\n        return findLocalFrameRes;\n    };\n    return ModelInterp;\n}());\n\n\n\n//# sourceURL=webpack://war3-model/./renderer/modelInterp.ts?");

/***/ }),

/***/ "./renderer/modelRenderer.ts":
/*!***********************************!*\
  !*** ./renderer/modelRenderer.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ModelRenderer\": () => (/* binding */ ModelRenderer)\n/* harmony export */ });\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model */ \"./model.ts\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/quat.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/mat4.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/mat3.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./renderer/util.ts\");\n/* harmony import */ var _modelInterp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modelInterp */ \"./renderer/modelInterp.ts\");\n/* harmony import */ var _particles__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./particles */ \"./renderer/particles.ts\");\n/* harmony import */ var _ribbons__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ribbons */ \"./renderer/ribbons.ts\");\n\n\n\n\n\n\nvar MAX_NODES = 256;\nvar vertexShaderHardwareSkinning = \"\\n    attribute vec3 aVertexPosition;\\n    attribute vec3 aNormal;\\n    attribute vec2 aTextureCoord;\\n    attribute vec4 aGroup;\\n\\n    uniform mat4 uMVMatrix;\\n    uniform mat4 uPMatrix;\\n    uniform mat4 uNodesMatrices[\".concat(MAX_NODES, \"];\\n\\n    varying vec3 vNormal;\\n    varying vec2 vTextureCoord;\\n\\n    void main(void) {\\n        vec4 position = vec4(aVertexPosition, 1.0);\\n        int count = 1;\\n        vec4 sum = uNodesMatrices[int(aGroup[0])] * position;\\n\\n        if (aGroup[1] < \").concat(MAX_NODES, \".) {\\n            sum += uNodesMatrices[int(aGroup[1])] * position;\\n            count += 1;\\n        }\\n        if (aGroup[2] < \").concat(MAX_NODES, \".) {\\n            sum += uNodesMatrices[int(aGroup[2])] * position;\\n            count += 1;\\n        }\\n        if (aGroup[3] < \").concat(MAX_NODES, \".) {\\n            sum += uNodesMatrices[int(aGroup[3])] * position;\\n            count += 1;\\n        }\\n        sum.xyz /= float(count);\\n        sum.w = 1.;\\n        position = sum;\\n\\n        gl_Position = uPMatrix * uMVMatrix * position;\\n        vTextureCoord = aTextureCoord;\\n        vNormal = aNormal;\\n    }\\n\");\nvar vertexShaderSoftwareSkinning = \"\\n    attribute vec3 aVertexPosition;\\n    attribute vec3 aNormal;\\n    attribute vec2 aTextureCoord;\\n\\n    uniform mat4 uMVMatrix;\\n    uniform mat4 uPMatrix;\\n\\n    varying vec3 vNormal;\\n    varying vec2 vTextureCoord;\\n\\n    void main(void) {\\n        vec4 position = vec4(aVertexPosition, 1.0);\\n        gl_Position = uPMatrix * uMVMatrix * position;\\n        vTextureCoord = aTextureCoord;\\n        vNormal = aNormal;\\n    }\\n\";\nvar fragmentShader = \"\\n    precision mediump float;\\n\\n    varying vec3 vNormal;\\n    varying vec2 vTextureCoord;\\n\\n    uniform sampler2D uSampler;\\n    uniform vec3 uReplaceableColor;\\n    uniform float uReplaceableType;\\n    uniform float uDiscardAlphaLevel;\\n    uniform mat3 uTVextexAnim;\\n\\n    float hypot (vec2 z) {\\n        float t;\\n        float x = abs(z.x);\\n        float y = abs(z.y);\\n        t = min(x, y);\\n        x = max(x, y);\\n        t = t / x;\\n        return (z.x == 0.0 && z.y == 0.0) ? 0.0 : x * sqrt(1.0 + t * t);\\n    }\\n\\n    void main(void) {\\n        vec2 texCoord = (uTVextexAnim * vec3(vTextureCoord.s, vTextureCoord.t, 1.)).st;\\n\\n        if (uReplaceableType == 0.) {\\n            gl_FragColor = texture2D(uSampler, texCoord);\\n        } else if (uReplaceableType == 1.) {\\n            gl_FragColor = vec4(uReplaceableColor, 1.0);\\n        } else if (uReplaceableType == 2.) {\\n            float dist = hypot(texCoord - vec2(0.5, 0.5)) * 2.;\\n            float truncateDist = clamp(1. - dist * 1.4, 0., 1.);\\n            float alpha = sin(truncateDist);\\n            gl_FragColor = vec4(uReplaceableColor * alpha, 1.0);\\n        }\\n\\n        // hand-made alpha-test\\n        if (gl_FragColor[3] < uDiscardAlphaLevel) {\\n            discard;\\n        }\\n    }\\n\";\nvar vertexShaderHDHardwareSkinning = \"\\n    attribute vec3 aVertexPosition;\\n    attribute vec3 aNormal;\\n    attribute vec2 aTextureCoord;\\n    attribute vec4 aSkin;\\n    attribute vec4 aBoneWeight;\\n    attribute vec4 aTangent;\\n\\n    uniform mat4 uMVMatrix;\\n    uniform mat4 uPMatrix;\\n    uniform mat4 uNodesMatrices[\".concat(MAX_NODES, \"];\\n\\n    varying vec3 vNormal;\\n    varying vec3 vTangent;\\n    varying vec3 vBinormal;\\n    varying vec2 vTextureCoord;\\n    varying mat3 vTBN;\\n    varying vec3 vFragPos;\\n\\n    void main(void) {\\n        vec4 position = vec4(aVertexPosition, 1.0);\\n        mat4 sum;\\n\\n        // sum += uNodesMatrices[int(aSkin[0])] * 1.;\\n        sum += uNodesMatrices[int(aSkin[0])] * aBoneWeight[0];\\n        sum += uNodesMatrices[int(aSkin[1])] * aBoneWeight[1];\\n        sum += uNodesMatrices[int(aSkin[2])] * aBoneWeight[2];\\n        sum += uNodesMatrices[int(aSkin[3])] * aBoneWeight[3];\\n\\n        mat3 rotation = mat3(sum);\\n\\n        position = sum * position;\\n        position.w = 1.;\\n\\n        gl_Position = uPMatrix * uMVMatrix * position;\\n        vTextureCoord = aTextureCoord;\\n\\n        vec3 normal = aNormal;\\n        vec3 tangent = aTangent.xyz;\\n\\n        // https://learnopengl.com/Advanced-Lighting/Normal-Mapping\\n        tangent = normalize(tangent - dot(tangent, normal) * normal);\\n\\n        vec3 binormal = cross(normal, tangent) * aTangent.w;\\n\\n        normal = normalize(rotation * normal);\\n        tangent = normalize(rotation * tangent);\\n        binormal = normalize(rotation * binormal);\\n\\n        vNormal = normal;\\n        vTangent = tangent;\\n        vBinormal = binormal;\\n\\n        vTBN = mat3(tangent, binormal, normal);\\n\\n        vFragPos = position.xyz;\\n    }\\n\");\nvar fragmentShaderHD = \"\\n    precision mediump float;\\n\\n    varying vec2 vTextureCoord;\\n    varying vec3 vNormal;\\n    varying vec3 vTangent;\\n    varying vec3 vBinormal;\\n    varying mat3 vTBN;\\n    varying vec3 vFragPos;\\n\\n    uniform sampler2D uSampler;\\n    uniform sampler2D uNormalSampler;\\n    uniform sampler2D uOrmSampler;\\n    uniform vec3 uReplaceableColor;\\n    uniform float uDiscardAlphaLevel;\\n    uniform mat3 uTVextexAnim;\\n    uniform vec3 uLightPos;\\n    uniform vec3 uLightColor;\\n    uniform vec3 uCameraPos;\\n    uniform bool uHasShadowMap;\\n    uniform sampler2D uShadowMapSampler;\\n    uniform mat4 uShadowMapLightMatrix;\\n    uniform float uShadowBias;\\n    uniform float uShadowSmoothingStep;\\n\\n    const float PI = 3.14159265359;\\n    const float gamma = 2.2;\\n\\n    float distributionGGX(vec3 normal, vec3 halfWay, float roughness) {\\n        float a = roughness * roughness;\\n        float a2 = a * a;\\n        float nDotH = max(dot(normal, halfWay), 0.0);\\n        float nDotH2 = nDotH * nDotH;\\n\\n        float num = a2;\\n        float denom = (nDotH2 * (a2 - 1.0) + 1.0);\\n        denom = PI * denom * denom;\\n\\n        return num / denom;\\n    }\\n\\n    float geometrySchlickGGX(float nDotV, float roughness) {\\n        float r = roughness + 1.;\\n        float k = r * r / 8.;\\n        // float k = roughness * roughness / 2.;\\n\\n        float num = nDotV;\\n        float denom = nDotV * (1. - k) + k;\\n        \\n        return num / denom;\\n    }\\n\\n    float geometrySmith(vec3 normal, vec3 viewDir, vec3 lightDir, float roughness) {\\n        float nDotV = max(dot(normal, viewDir), .0);\\n        float nDotL = max(dot(normal, lightDir), .0);\\n        float ggx2  = geometrySchlickGGX(nDotV, roughness);\\n        float ggx1  = geometrySchlickGGX(nDotL, roughness);\\n        \\n        return ggx1 * ggx2;\\n    }\\n\\n    vec3 fresnelSchlick(float lightFactor, vec3 f0) {\\n        return f0 + (1. - f0) * pow(clamp(1. - lightFactor, 0., 1.), 5.);\\n    }  \\n\\n    void main(void) {\\n        vec2 texCoord = (uTVextexAnim * vec3(vTextureCoord.s, vTextureCoord.t, 1.)).st;\\n        vec4 resultColor = texture2D(uSampler, texCoord);\\n\\n        vec4 orm = texture2D(uOrmSampler, texCoord);\\n\\n        float occlusion = orm.r;\\n        float roughness = orm.g;\\n        float metallic = orm.b;\\n        float teamColorFactor = orm.a;\\n\\n        vec4 baseColor = texture2D(uSampler, texCoord);\\n        vec3 teamColor = baseColor.rgb * uReplaceableColor;\\n        baseColor.rgb = mix(baseColor.rgb, teamColor, teamColorFactor);\\n        baseColor.rgb = pow(baseColor.rgb, vec3(gamma));\\n\\n        resultColor.rgb = mix(resultColor.rgb, resultColor.rgb * uReplaceableColor, teamColorFactor);\\n        vec3 normal = texture2D(uNormalSampler, texCoord).rgb;\\n        normal = normal * 2.0 - 1.0;\\n        normal.x = -normal.x;\\n        normal.y = -normal.y;\\n        normal = normalize(vTBN * -normal);\\n\\n        vec3 viewDir = normalize(uCameraPos - vFragPos);\\n\\n        vec3 lightDir = normalize(uLightPos - vFragPos);\\n        float lightFactor = max(dot(normal, lightDir), .0);\\n        vec3 radiance = uLightColor;\\n\\n        vec3 f0 = vec3(.04);\\n        f0 = mix(f0, baseColor.rgb, metallic);\\n\\n        vec3 totalLight = vec3(0.);\\n        vec3 halfWay = normalize(viewDir + lightDir);\\n        float ndf = distributionGGX(normal, halfWay, roughness);\\n        float g = geometrySmith(normal, viewDir, lightDir, roughness);\\n        vec3 f = fresnelSchlick(max(dot(halfWay, viewDir), 0.), f0); \\n\\n        vec3 kS = f;\\n        // vec3 kD = vec3(1.) - kS;\\n        vec3 kD = vec3(1.);\\n        // kD *= 1.0 - metallic;\\n        vec3 num = ndf * g * f;\\n        float denom = 4. * max(dot(normal, viewDir), 0.) * max(dot(normal, lightDir), 0.) + .0001;\\n        vec3 specular = num / denom;\\n\\n        totalLight += (kD * baseColor.rgb / PI + specular) * radiance * lightFactor;\\n\\n        if (uHasShadowMap) {\\n            vec4 fragInLightPos = uShadowMapLightMatrix * vec4(vFragPos, 1.);\\n            vec3 shadowMapCoord = fragInLightPos.xyz / fragInLightPos.w;\\n\\n            int passes = 5;\\n            float step = 1. / float(passes);\\n\\n            float lightDepth = texture2D(uShadowMapSampler, shadowMapCoord.xy).r;\\n            float lightDepth0 = texture2D(uShadowMapSampler, vec2(shadowMapCoord.x + uShadowSmoothingStep, shadowMapCoord.y)).r;\\n            float lightDepth1 = texture2D(uShadowMapSampler, vec2(shadowMapCoord.x, shadowMapCoord.y + uShadowSmoothingStep)).r;\\n            float lightDepth2 = texture2D(uShadowMapSampler, vec2(shadowMapCoord.x, shadowMapCoord.y - uShadowSmoothingStep)).r;\\n            float lightDepth3 = texture2D(uShadowMapSampler, vec2(shadowMapCoord.x - uShadowSmoothingStep, shadowMapCoord.y)).r;\\n            float currentDepth = shadowMapCoord.z;\\n\\n            float visibility = 0.;\\n            if (lightDepth > currentDepth - uShadowBias) {\\n                visibility += step;\\n            }\\n            if (lightDepth0 > currentDepth - uShadowBias) {\\n                visibility += step;\\n            }\\n            if (lightDepth1 > currentDepth - uShadowBias) {\\n                visibility += step;\\n            }\\n            if (lightDepth2 > currentDepth - uShadowBias) {\\n                visibility += step;\\n            }\\n            if (lightDepth3 > currentDepth - uShadowBias) {\\n                visibility += step;\\n            }\\n\\n            totalLight *= visibility;\\n        }\\n\\n        vec3 ambient = vec3(.03) * baseColor.rgb * occlusion;\\n        vec3 color = ambient + totalLight;\\n        \\n        color = pow(color, vec3(1. / gamma));\\n    \\n        gl_FragColor = vec4(color, 1.);\\n\\n        // hand-made alpha-test\\n        if (gl_FragColor[3] < uDiscardAlphaLevel) {\\n            discard;\\n        }\\n    }\\n\";\nvar skeletonVertexShader = \"\\n    attribute vec3 aVertexPosition;\\n    attribute vec3 aColor;\\n\\n    uniform mat4 uMVMatrix;\\n    uniform mat4 uPMatrix;\\n\\n    varying vec3 vColor;\\n\\n    void main(void) {\\n        vec4 position = vec4(aVertexPosition, 1.0);\\n        gl_Position = uPMatrix * uMVMatrix * position;\\n        vColor = aColor;\\n    }\\n\";\nvar skeletonFragmentShader = \"\\n    precision mediump float;\\n\\n    varying vec3 vColor;\\n\\n    void main(void) {\\n        gl_FragColor = vec4(vColor, 1.0);\\n    }\\n\";\nvar translation = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar rotation = gl_matrix__WEBPACK_IMPORTED_MODULE_6__.create();\nvar scaling = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar defaultTranslation = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.fromValues(0, 0, 0);\nvar defaultRotation = gl_matrix__WEBPACK_IMPORTED_MODULE_6__.fromValues(0, 0, 0, 1);\nvar defaultScaling = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.fromValues(1, 1, 1);\nvar tempParentRotationQuat = gl_matrix__WEBPACK_IMPORTED_MODULE_6__.create();\nvar tempParentRotationMat = gl_matrix__WEBPACK_IMPORTED_MODULE_7__.create();\nvar tempCameraMat = gl_matrix__WEBPACK_IMPORTED_MODULE_7__.create();\nvar tempTransformedPivotPoint = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar tempAxis = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar tempLockQuat = gl_matrix__WEBPACK_IMPORTED_MODULE_6__.create();\nvar tempLockMat = gl_matrix__WEBPACK_IMPORTED_MODULE_7__.create();\nvar tempXAxis = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar tempCameraVec = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar tempCross0 = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar tempCross1 = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar tempPos = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar tempSum = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar tempVec3 = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar identifyMat3 = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.create();\nvar texCoordMat4 = gl_matrix__WEBPACK_IMPORTED_MODULE_7__.create();\nvar texCoordMat3 = gl_matrix__WEBPACK_IMPORTED_MODULE_8__.create();\nvar ModelRenderer = /** @class */ (function () {\n    function ModelRenderer(model) {\n        var _a;\n        this.vertexBuffer = [];\n        this.normalBuffer = [];\n        this.vertices = []; // Array per geoset for software skinning\n        this.texCoordBuffer = [];\n        this.indexBuffer = [];\n        this.wireframeIndexBuffer = [];\n        this.groupBuffer = [];\n        this.skinWeightBuffer = [];\n        this.tangentBuffer = [];\n        this.isHD = (_a = model.Geosets) === null || _a === void 0 ? void 0 : _a.some(function (it) { var _a; return ((_a = it.SkinWeights) === null || _a === void 0 ? void 0 : _a.length) > 0; });\n        this.shaderProgramLocations = {\n            vertexPositionAttribute: null,\n            normalsAttribute: null,\n            textureCoordAttribute: null,\n            groupAttribute: null,\n            skinAttribute: null,\n            weightAttribute: null,\n            tangentAttribute: null,\n            pMatrixUniform: null,\n            mvMatrixUniform: null,\n            samplerUniform: null,\n            normalSamplerUniform: null,\n            ormSamplerUniform: null,\n            replaceableColorUniform: null,\n            replaceableTypeUniform: null,\n            discardAlphaLevelUniform: null,\n            tVertexAnimUniform: null,\n            nodesMatricesAttributes: null,\n            lightPosUniform: null,\n            lightColorUniform: null,\n            cameraPosUniform: null,\n            hasShadowMapUniform: null,\n            shadowMapSamplerUniform: null,\n            shadowMapLightMatrixUniform: null,\n            shadowBiasUniform: null,\n            shadowSmoothingStepUniform: null\n        };\n        this.skeletonShaderProgramLocations = {\n            vertexPositionAttribute: null,\n            colorAttribute: null,\n            mvMatrixUniform: null,\n            pMatrixUniform: null\n        };\n        this.model = model;\n        this.rendererData = {\n            model: model,\n            frame: 0,\n            animation: null,\n            animationInfo: null,\n            globalSequencesFrames: [],\n            rootNode: null,\n            nodes: [],\n            geosetAnims: [],\n            geosetAlpha: [],\n            materialLayerTextureID: [],\n            teamColor: null,\n            cameraPos: null,\n            cameraQuat: null,\n            lightPos: null,\n            lightColor: null,\n            shadowBias: 0,\n            shadowSmoothingStep: 0,\n            textures: {}\n        };\n        this.rendererData.teamColor = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.fromValues(1., 0., 0.);\n        this.rendererData.cameraPos = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\n        this.rendererData.cameraQuat = gl_matrix__WEBPACK_IMPORTED_MODULE_6__.create();\n        this.rendererData.lightPos = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.fromValues(1000, 1000, 1000);\n        this.rendererData.lightColor = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.fromValues(1, 1, 1);\n        this.setSequence(0);\n        this.rendererData.rootNode = {\n            // todo\n            node: {},\n            matrix: gl_matrix__WEBPACK_IMPORTED_MODULE_7__.create(),\n            childs: []\n        };\n        for (var _i = 0, _b = model.Nodes; _i < _b.length; _i++) {\n            var node = _b[_i];\n            if (node) {\n                this.rendererData.nodes[node.ObjectId] = {\n                    node: node,\n                    matrix: gl_matrix__WEBPACK_IMPORTED_MODULE_7__.create(),\n                    childs: []\n                };\n            }\n        }\n        for (var _c = 0, _d = model.Nodes; _c < _d.length; _c++) {\n            var node = _d[_c];\n            if (node) {\n                if (!node.Parent && node.Parent !== 0) {\n                    this.rendererData.rootNode.childs.push(this.rendererData.nodes[node.ObjectId]);\n                }\n                else {\n                    this.rendererData.nodes[node.Parent].childs.push(this.rendererData.nodes[node.ObjectId]);\n                }\n            }\n        }\n        if (model.GlobalSequences) {\n            for (var i = 0; i < model.GlobalSequences.length; ++i) {\n                this.rendererData.globalSequencesFrames[i] = 0;\n            }\n        }\n        for (var i = 0; i < model.GeosetAnims.length; ++i) {\n            this.rendererData.geosetAnims[model.GeosetAnims[i].GeosetId] = model.GeosetAnims[i];\n        }\n        for (var i = 0; i < model.Materials.length; ++i) {\n            this.rendererData.materialLayerTextureID[i] = new Array(model.Materials[i].Layers.length);\n        }\n        this.interp = new _modelInterp__WEBPACK_IMPORTED_MODULE_2__.ModelInterp(this.rendererData);\n        this.particlesController = new _particles__WEBPACK_IMPORTED_MODULE_3__.ParticlesController(this.interp, this.rendererData);\n        this.ribbonsController = new _ribbons__WEBPACK_IMPORTED_MODULE_4__.RibbonsController(this.interp, this.rendererData);\n    }\n    ModelRenderer.prototype.destroy = function () {\n        if (this.particlesController) {\n            this.particlesController.destroy();\n            this.particlesController = null;\n        }\n        if (this.ribbonsController) {\n            this.ribbonsController.destroy();\n            this.ribbonsController = null;\n        }\n        if (this.skeletonShaderProgram) {\n            if (this.skeletonVertexShader) {\n                this.gl.detachShader(this.skeletonShaderProgram, this.skeletonVertexShader);\n                this.gl.deleteShader(this.skeletonVertexShader);\n                this.skeletonVertexShader = null;\n            }\n            if (this.skeletonFragmentShader) {\n                this.gl.detachShader(this.skeletonShaderProgram, this.skeletonFragmentShader);\n                this.gl.deleteShader(this.skeletonFragmentShader);\n                this.skeletonFragmentShader = null;\n            }\n            this.gl.deleteProgram(this.skeletonShaderProgram);\n            this.skeletonShaderProgram = null;\n        }\n        if (this.shaderProgram) {\n            if (this.vertexShader) {\n                this.gl.detachShader(this.shaderProgram, this.vertexShader);\n                this.gl.deleteShader(this.vertexShader);\n                this.vertexShader = null;\n            }\n            if (this.fragmentShader) {\n                this.gl.detachShader(this.shaderProgram, this.fragmentShader);\n                this.gl.deleteShader(this.fragmentShader);\n                this.fragmentShader = null;\n            }\n            this.gl.deleteProgram(this.shaderProgram);\n            this.shaderProgram = null;\n        }\n    };\n    ModelRenderer.prototype.initGL = function (glContext) {\n        this.gl = glContext;\n        // Max bones + MV + P\n        this.softwareSkinning = this.gl.getParameter(this.gl.MAX_VERTEX_UNIFORM_VECTORS) < 4 * (MAX_NODES + 2);\n        this.anisotropicExt = (this.gl.getExtension('EXT_texture_filter_anisotropic') ||\n            this.gl.getExtension('MOZ_EXT_texture_filter_anisotropic') ||\n            this.gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic'));\n        this.initShaders();\n        this.initBuffers();\n        this.particlesController.initGL(glContext);\n        this.ribbonsController.initGL(glContext);\n    };\n    ModelRenderer.prototype.setTextureImage = function (path, img, flags) {\n        this.rendererData.textures[path] = this.gl.createTexture();\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.rendererData.textures[path]);\n        // this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, true);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, img);\n        this.setTextureParameters(flags, true);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n    };\n    ModelRenderer.prototype.setTextureImageData = function (path, imageData, flags) {\n        this.rendererData.textures[path] = this.gl.createTexture();\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.rendererData.textures[path]);\n        // this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, true);\n        for (var i = 0; i < imageData.length; ++i) {\n            this.gl.texImage2D(this.gl.TEXTURE_2D, i, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, imageData[i]);\n        }\n        this.setTextureParameters(flags, false);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n    };\n    ModelRenderer.prototype.setTextureCompressedImage = function (path, format, imageData, ddsInfo, flags) {\n        this.rendererData.textures[path] = this.gl.createTexture();\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.rendererData.textures[path]);\n        var view = new Uint8Array(imageData);\n        var count = 1;\n        for (var i = 1; i < ddsInfo.images.length; ++i) {\n            var image = ddsInfo.images[i];\n            if (image.shape.width >= 2 && image.shape.height >= 2) {\n                count = i + 1;\n            }\n        }\n        if ((0,_util__WEBPACK_IMPORTED_MODULE_1__.isWebGL2)(this.gl)) {\n            this.gl.texStorage2D(this.gl.TEXTURE_2D, count, format, ddsInfo.images[0].shape.width, ddsInfo.images[0].shape.height);\n            for (var i = 0; i < count; ++i) {\n                var image = ddsInfo.images[i];\n                this.gl.compressedTexSubImage2D(this.gl.TEXTURE_2D, i, 0, 0, image.shape.width, image.shape.height, format, view.subarray(image.offset, image.offset + image.length));\n            }\n        }\n        else {\n            for (var i = 0; i < count; ++i) {\n                var image = ddsInfo.images[i];\n                this.gl.compressedTexImage2D(this.gl.TEXTURE_2D, i, format, image.shape.width, image.shape.height, 0, view.subarray(image.offset, image.offset + image.length));\n            }\n        }\n        this.setTextureParameters(flags, (0,_util__WEBPACK_IMPORTED_MODULE_1__.isWebGL2)(this.gl));\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n    };\n    ModelRenderer.prototype.setCamera = function (cameraPos, cameraQuat) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_5__.copy(this.rendererData.cameraPos, cameraPos);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_6__.copy(this.rendererData.cameraQuat, cameraQuat);\n    };\n    ModelRenderer.prototype.setLightPosition = function (lightPos) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_5__.copy(this.rendererData.lightPos, lightPos);\n    };\n    ModelRenderer.prototype.setLightColor = function (lightColor) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_5__.copy(this.rendererData.lightColor, lightColor);\n    };\n    ModelRenderer.prototype.setSequence = function (index) {\n        this.rendererData.animation = index;\n        this.rendererData.animationInfo = this.model.Sequences[this.rendererData.animation];\n        this.rendererData.frame = this.rendererData.animationInfo.Interval[0];\n    };\n    ModelRenderer.prototype.setTeamColor = function (color) {\n        gl_matrix__WEBPACK_IMPORTED_MODULE_5__.copy(this.rendererData.teamColor, color);\n    };\n    ModelRenderer.prototype.update = function (delta) {\n        this.rendererData.frame += delta;\n        if (this.rendererData.frame > this.rendererData.animationInfo.Interval[1]) {\n            this.rendererData.frame = this.rendererData.animationInfo.Interval[0];\n        }\n        this.updateGlobalSequences(delta);\n        this.updateNode(this.rendererData.rootNode);\n        this.particlesController.update(delta);\n        this.ribbonsController.update(delta);\n        for (var i = 0; i < this.model.Geosets.length; ++i) {\n            this.rendererData.geosetAlpha[i] = this.findAlpha(i);\n        }\n        for (var i = 0; i < this.rendererData.materialLayerTextureID.length; ++i) {\n            for (var j = 0; j < this.rendererData.materialLayerTextureID[i].length; ++j) {\n                this.updateLayerTextureId(i, j);\n            }\n        }\n    };\n    ModelRenderer.prototype.render = function (mvMatrix, pMatrix, _a) {\n        var wireframe = _a.wireframe, shadowMapTexture = _a.shadowMapTexture, shadowMapMatrix = _a.shadowMapMatrix, shadowBias = _a.shadowBias, shadowSmoothingStep = _a.shadowSmoothingStep;\n        this.gl.useProgram(this.shaderProgram);\n        this.gl.uniformMatrix4fv(this.shaderProgramLocations.pMatrixUniform, false, pMatrix);\n        this.gl.uniformMatrix4fv(this.shaderProgramLocations.mvMatrixUniform, false, mvMatrix);\n        this.gl.enableVertexAttribArray(this.shaderProgramLocations.vertexPositionAttribute);\n        this.gl.enableVertexAttribArray(this.shaderProgramLocations.normalsAttribute);\n        this.gl.enableVertexAttribArray(this.shaderProgramLocations.textureCoordAttribute);\n        if (this.isHD) {\n            this.gl.enableVertexAttribArray(this.shaderProgramLocations.skinAttribute);\n            this.gl.enableVertexAttribArray(this.shaderProgramLocations.weightAttribute);\n            this.gl.enableVertexAttribArray(this.shaderProgramLocations.tangentAttribute);\n        }\n        else {\n            if (!this.softwareSkinning) {\n                this.gl.enableVertexAttribArray(this.shaderProgramLocations.groupAttribute);\n            }\n        }\n        if (!this.softwareSkinning) {\n            for (var j = 0; j < MAX_NODES; ++j) {\n                if (this.rendererData.nodes[j]) {\n                    this.gl.uniformMatrix4fv(this.shaderProgramLocations.nodesMatricesAttributes[j], false, this.rendererData.nodes[j].matrix);\n                }\n            }\n        }\n        for (var i = 0; i < this.model.Geosets.length; ++i) {\n            var geoset = this.model.Geosets[i];\n            if (this.rendererData.geosetAlpha[i] < 1e-6) {\n                continue;\n            }\n            if (geoset.LevelOfDetail > 0) {\n                continue;\n            }\n            if (this.softwareSkinning) {\n                this.generateGeosetVertices(i);\n            }\n            var materialID = geoset.MaterialID;\n            var material = this.model.Materials[materialID];\n            // Shader_HD_DefaultUnit\n            if (this.isHD) {\n                this.gl.uniform3fv(this.shaderProgramLocations.lightPosUniform, this.rendererData.lightPos);\n                this.gl.uniform3fv(this.shaderProgramLocations.lightColorUniform, this.rendererData.lightColor);\n                // this.gl.uniform3fv(this.shaderProgramLocations.lightPosUniform, this.rendererData.cameraPos);\n                this.gl.uniform3fv(this.shaderProgramLocations.cameraPosUniform, this.rendererData.cameraPos);\n                if (shadowMapTexture && shadowMapMatrix) {\n                    this.gl.uniform1i(this.shaderProgramLocations.hasShadowMapUniform, 1);\n                    this.gl.activeTexture(this.gl.TEXTURE3);\n                    this.gl.bindTexture(this.gl.TEXTURE_2D, shadowMapTexture);\n                    this.gl.uniform1i(this.shaderProgramLocations.shadowMapSamplerUniform, 3);\n                    this.gl.uniformMatrix4fv(this.shaderProgramLocations.shadowMapLightMatrixUniform, false, shadowMapMatrix);\n                    this.gl.uniform1f(this.shaderProgramLocations.shadowBiasUniform, shadowBias !== null && shadowBias !== void 0 ? shadowBias : 1e-6);\n                    this.gl.uniform1f(this.shaderProgramLocations.shadowSmoothingStepUniform, shadowSmoothingStep !== null && shadowSmoothingStep !== void 0 ? shadowSmoothingStep : 1 / 1024);\n                }\n                else {\n                    this.gl.uniform1i(this.shaderProgramLocations.hasShadowMapUniform, 0);\n                }\n                this.setLayerPropsHD(materialID, material.Layers);\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer[i]);\n                this.gl.vertexAttribPointer(this.shaderProgramLocations.vertexPositionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.normalBuffer[i]);\n                this.gl.vertexAttribPointer(this.shaderProgramLocations.normalsAttribute, 3, this.gl.FLOAT, false, 0, 0);\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer[i]);\n                this.gl.vertexAttribPointer(this.shaderProgramLocations.textureCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.skinWeightBuffer[i]);\n                this.gl.vertexAttribPointer(this.shaderProgramLocations.skinAttribute, 4, this.gl.UNSIGNED_BYTE, false, 8, 0);\n                this.gl.vertexAttribPointer(this.shaderProgramLocations.weightAttribute, 4, this.gl.UNSIGNED_BYTE, true, 8, 4);\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.tangentBuffer[i]);\n                this.gl.vertexAttribPointer(this.shaderProgramLocations.tangentAttribute, 4, this.gl.FLOAT, false, 0, 0);\n                if (wireframe && !this.wireframeIndexBuffer[i]) {\n                    this.createWireframeBuffer(i);\n                }\n                this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, wireframe ? this.wireframeIndexBuffer[i] : this.indexBuffer[i]);\n                this.gl.drawElements(wireframe ? this.gl.LINES : this.gl.TRIANGLES, wireframe ? geoset.Faces.length * 2 : geoset.Faces.length, this.gl.UNSIGNED_SHORT, 0);\n                if (shadowMapTexture && shadowMapMatrix) {\n                    this.gl.activeTexture(this.gl.TEXTURE3);\n                    this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n                }\n            }\n            else {\n                for (var j = 0; j < material.Layers.length; ++j) {\n                    this.setLayerProps(material.Layers[j], this.rendererData.materialLayerTextureID[materialID][j]);\n                    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer[i]);\n                    this.gl.vertexAttribPointer(this.shaderProgramLocations.vertexPositionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n                    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.normalBuffer[i]);\n                    this.gl.vertexAttribPointer(this.shaderProgramLocations.normalsAttribute, 3, this.gl.FLOAT, false, 0, 0);\n                    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer[i]);\n                    this.gl.vertexAttribPointer(this.shaderProgramLocations.textureCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n                    if (!this.softwareSkinning) {\n                        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.groupBuffer[i]);\n                        this.gl.vertexAttribPointer(this.shaderProgramLocations.groupAttribute, 4, this.gl.UNSIGNED_SHORT, false, 0, 0);\n                    }\n                    if (wireframe && !this.wireframeIndexBuffer[i]) {\n                        this.createWireframeBuffer(i);\n                    }\n                    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, wireframe ? this.wireframeIndexBuffer[i] : this.indexBuffer[i]);\n                    this.gl.drawElements(wireframe ? this.gl.LINES : this.gl.TRIANGLES, wireframe ? geoset.Faces.length * 2 : geoset.Faces.length, this.gl.UNSIGNED_SHORT, 0);\n                }\n            }\n        }\n        this.gl.disableVertexAttribArray(this.shaderProgramLocations.vertexPositionAttribute);\n        this.gl.disableVertexAttribArray(this.shaderProgramLocations.normalsAttribute);\n        this.gl.disableVertexAttribArray(this.shaderProgramLocations.textureCoordAttribute);\n        if (this.isHD) {\n            this.gl.disableVertexAttribArray(this.shaderProgramLocations.skinAttribute);\n            this.gl.disableVertexAttribArray(this.shaderProgramLocations.weightAttribute);\n            this.gl.disableVertexAttribArray(this.shaderProgramLocations.tangentAttribute);\n        }\n        else {\n            if (!this.softwareSkinning) {\n                this.gl.disableVertexAttribArray(this.shaderProgramLocations.groupAttribute);\n            }\n        }\n        this.particlesController.render(mvMatrix, pMatrix);\n        this.ribbonsController.render(mvMatrix, pMatrix);\n    };\n    /**\n     * @param mvMatrix\n     * @param pMatrix\n     * @param nodes Nodes to highlight. null means draw all\n     */\n    ModelRenderer.prototype.renderSkeleton = function (mvMatrix, pMatrix, nodes) {\n        var _this = this;\n        if (!this.skeletonShaderProgram) {\n            this.skeletonShaderProgram = this.initSkeletonShaderProgram();\n        }\n        this.gl.disable(this.gl.BLEND);\n        this.gl.disable(this.gl.DEPTH_TEST);\n        this.gl.useProgram(this.skeletonShaderProgram);\n        this.gl.uniformMatrix4fv(this.skeletonShaderProgramLocations.pMatrixUniform, false, pMatrix);\n        this.gl.uniformMatrix4fv(this.skeletonShaderProgramLocations.mvMatrixUniform, false, mvMatrix);\n        this.gl.enableVertexAttribArray(this.skeletonShaderProgramLocations.vertexPositionAttribute);\n        this.gl.enableVertexAttribArray(this.skeletonShaderProgramLocations.colorAttribute);\n        if (!this.skeletonVertexBuffer) {\n            this.skeletonVertexBuffer = this.gl.createBuffer();\n        }\n        if (!this.skeletonColorBuffer) {\n            this.skeletonColorBuffer = this.gl.createBuffer();\n        }\n        var coords = [];\n        var colors = [];\n        var line = function (node0, node1) {\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.transformMat4(tempPos, node0.node.PivotPoint, node0.matrix);\n            coords.push(tempPos[0], tempPos[1], tempPos[2]);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.transformMat4(tempPos, node1.node.PivotPoint, node1.matrix);\n            coords.push(tempPos[0], tempPos[1], tempPos[2]);\n            colors.push(0, 1, 0, 0, 0, 1);\n        };\n        var updateNode = function (node) {\n            if ((node.node.Parent || node.node.Parent === 0) && (!nodes || nodes.includes(node.node.Name))) {\n                line(node, _this.rendererData.nodes[node.node.Parent]);\n            }\n            for (var _i = 0, _a = node.childs; _i < _a.length; _i++) {\n                var child = _a[_i];\n                updateNode(child);\n            }\n        };\n        updateNode(this.rendererData.rootNode);\n        var vertexBuffer = new Float32Array(coords);\n        var colorBuffer = new Float32Array(colors);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.skeletonVertexBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexBuffer, this.gl.DYNAMIC_DRAW);\n        this.gl.vertexAttribPointer(this.skeletonShaderProgramLocations.vertexPositionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.skeletonColorBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, colorBuffer, this.gl.DYNAMIC_DRAW);\n        this.gl.vertexAttribPointer(this.skeletonShaderProgramLocations.colorAttribute, 3, this.gl.FLOAT, false, 0, 0);\n        this.gl.drawArrays(this.gl.LINES, 0, vertexBuffer.length / 3);\n        this.gl.disableVertexAttribArray(this.skeletonShaderProgramLocations.vertexPositionAttribute);\n        this.gl.disableVertexAttribArray(this.skeletonShaderProgramLocations.colorAttribute);\n    };\n    ModelRenderer.prototype.initSkeletonShaderProgram = function () {\n        var vertex = this.skeletonVertexShader = (0,_util__WEBPACK_IMPORTED_MODULE_1__.getShader)(this.gl, skeletonVertexShader, this.gl.VERTEX_SHADER);\n        var fragment = this.skeletonFragmentShader = (0,_util__WEBPACK_IMPORTED_MODULE_1__.getShader)(this.gl, skeletonFragmentShader, this.gl.FRAGMENT_SHADER);\n        var shaderProgram = this.gl.createProgram();\n        this.gl.attachShader(shaderProgram, vertex);\n        this.gl.attachShader(shaderProgram, fragment);\n        this.gl.linkProgram(shaderProgram);\n        if (!this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS)) {\n            alert('Could not initialise shaders');\n        }\n        this.gl.useProgram(shaderProgram);\n        this.skeletonShaderProgramLocations.vertexPositionAttribute = this.gl.getAttribLocation(shaderProgram, 'aVertexPosition');\n        this.skeletonShaderProgramLocations.colorAttribute = this.gl.getAttribLocation(shaderProgram, 'aColor');\n        this.skeletonShaderProgramLocations.pMatrixUniform = this.gl.getUniformLocation(shaderProgram, 'uPMatrix');\n        this.skeletonShaderProgramLocations.mvMatrixUniform = this.gl.getUniformLocation(shaderProgram, 'uMVMatrix');\n        return shaderProgram;\n    };\n    ModelRenderer.prototype.generateGeosetVertices = function (geosetIndex) {\n        var geoset = this.model.Geosets[geosetIndex];\n        var buffer = this.vertices[geosetIndex];\n        for (var i = 0; i < buffer.length; i += 3) {\n            var index = i / 3;\n            var group = geoset.Groups[geoset.VertexGroup[index]];\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.set(tempPos, geoset.Vertices[i], geoset.Vertices[i + 1], geoset.Vertices[i + 2]);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.set(tempSum, 0, 0, 0);\n            for (var j = 0; j < group.length; ++j) {\n                gl_matrix__WEBPACK_IMPORTED_MODULE_5__.add(tempSum, tempSum, gl_matrix__WEBPACK_IMPORTED_MODULE_5__.transformMat4(tempVec3, tempPos, this.rendererData.nodes[group[j]].matrix));\n            }\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.scale(tempPos, tempSum, 1 / group.length);\n            buffer[i] = tempPos[0];\n            buffer[i + 1] = tempPos[1];\n            buffer[i + 2] = tempPos[2];\n        }\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer[geosetIndex]);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, buffer, this.gl.DYNAMIC_DRAW);\n    };\n    ModelRenderer.prototype.setTextureParameters = function (flags, hasMipmaps) {\n        if (flags & _model__WEBPACK_IMPORTED_MODULE_0__.TextureFlags.WrapWidth) {\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.REPEAT);\n        }\n        else {\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n        }\n        if (flags & _model__WEBPACK_IMPORTED_MODULE_0__.TextureFlags.WrapHeight) {\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.REPEAT);\n        }\n        else {\n            this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n        }\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, hasMipmaps ? this.gl.LINEAR_MIPMAP_NEAREST : this.gl.LINEAR);\n        if (this.anisotropicExt) {\n            var max = this.gl.getParameter(this.anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n            this.gl.texParameterf(this.gl.TEXTURE_2D, this.anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, max);\n        }\n    };\n    ModelRenderer.prototype.updateLayerTextureId = function (materialId, layerId) {\n        var TextureID = this.model.Materials[materialId].Layers[layerId].TextureID;\n        if (typeof TextureID === 'number') {\n            this.rendererData.materialLayerTextureID[materialId][layerId] = TextureID;\n        }\n        else {\n            this.rendererData.materialLayerTextureID[materialId][layerId] = this.interp.num(TextureID);\n        }\n    };\n    ModelRenderer.prototype.initShaders = function () {\n        if (this.shaderProgram) {\n            return;\n        }\n        var vertexShaderSource;\n        if (this.isHD) {\n            vertexShaderSource = vertexShaderHDHardwareSkinning;\n        }\n        else if (this.softwareSkinning) {\n            vertexShaderSource = vertexShaderSoftwareSkinning;\n        }\n        else {\n            vertexShaderSource = vertexShaderHardwareSkinning;\n        }\n        var fragmentShaderSource;\n        if (this.isHD) {\n            fragmentShaderSource = fragmentShaderHD;\n        }\n        else {\n            fragmentShaderSource = fragmentShader;\n        }\n        var vertex = this.vertexShader = (0,_util__WEBPACK_IMPORTED_MODULE_1__.getShader)(this.gl, vertexShaderSource, this.gl.VERTEX_SHADER);\n        var fragment = this.fragmentShader = (0,_util__WEBPACK_IMPORTED_MODULE_1__.getShader)(this.gl, fragmentShaderSource, this.gl.FRAGMENT_SHADER);\n        var shaderProgram = this.shaderProgram = this.gl.createProgram();\n        this.gl.attachShader(shaderProgram, vertex);\n        this.gl.attachShader(shaderProgram, fragment);\n        this.gl.linkProgram(shaderProgram);\n        if (!this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS)) {\n            alert('Could not initialise shaders');\n        }\n        this.gl.useProgram(shaderProgram);\n        this.shaderProgramLocations.vertexPositionAttribute = this.gl.getAttribLocation(shaderProgram, 'aVertexPosition');\n        this.shaderProgramLocations.normalsAttribute = this.gl.getAttribLocation(shaderProgram, 'aNormal');\n        this.shaderProgramLocations.textureCoordAttribute = this.gl.getAttribLocation(shaderProgram, 'aTextureCoord');\n        if (this.isHD) {\n            this.shaderProgramLocations.skinAttribute = this.gl.getAttribLocation(shaderProgram, 'aSkin');\n            this.shaderProgramLocations.weightAttribute = this.gl.getAttribLocation(shaderProgram, 'aBoneWeight');\n            this.shaderProgramLocations.tangentAttribute = this.gl.getAttribLocation(shaderProgram, 'aTangent');\n        }\n        else {\n            if (!this.softwareSkinning) {\n                this.shaderProgramLocations.groupAttribute = this.gl.getAttribLocation(shaderProgram, 'aGroup');\n            }\n        }\n        this.shaderProgramLocations.pMatrixUniform = this.gl.getUniformLocation(shaderProgram, 'uPMatrix');\n        this.shaderProgramLocations.mvMatrixUniform = this.gl.getUniformLocation(shaderProgram, 'uMVMatrix');\n        this.shaderProgramLocations.samplerUniform = this.gl.getUniformLocation(shaderProgram, 'uSampler');\n        this.shaderProgramLocations.replaceableColorUniform = this.gl.getUniformLocation(shaderProgram, 'uReplaceableColor');\n        if (this.isHD) {\n            this.shaderProgramLocations.normalSamplerUniform = this.gl.getUniformLocation(shaderProgram, 'uNormalSampler');\n            this.shaderProgramLocations.ormSamplerUniform = this.gl.getUniformLocation(shaderProgram, 'uOrmSampler');\n            this.shaderProgramLocations.lightPosUniform = this.gl.getUniformLocation(shaderProgram, 'uLightPos');\n            this.shaderProgramLocations.lightColorUniform = this.gl.getUniformLocation(shaderProgram, 'uLightColor');\n            this.shaderProgramLocations.cameraPosUniform = this.gl.getUniformLocation(shaderProgram, 'uCameraPos');\n            this.shaderProgramLocations.hasShadowMapUniform = this.gl.getUniformLocation(shaderProgram, 'uHasShadowMap');\n            this.shaderProgramLocations.shadowMapSamplerUniform = this.gl.getUniformLocation(shaderProgram, 'uShadowMapSampler');\n            this.shaderProgramLocations.shadowMapLightMatrixUniform = this.gl.getUniformLocation(shaderProgram, 'uShadowMapLightMatrix');\n            this.shaderProgramLocations.shadowBiasUniform = this.gl.getUniformLocation(shaderProgram, 'uShadowBias');\n            this.shaderProgramLocations.shadowSmoothingStepUniform = this.gl.getUniformLocation(shaderProgram, 'uShadowSmoothingStep');\n        }\n        else {\n            this.shaderProgramLocations.replaceableTypeUniform = this.gl.getUniformLocation(shaderProgram, 'uReplaceableType');\n        }\n        this.shaderProgramLocations.discardAlphaLevelUniform = this.gl.getUniformLocation(shaderProgram, 'uDiscardAlphaLevel');\n        this.shaderProgramLocations.tVertexAnimUniform = this.gl.getUniformLocation(shaderProgram, 'uTVextexAnim');\n        if (!this.softwareSkinning) {\n            this.shaderProgramLocations.nodesMatricesAttributes = [];\n            for (var i = 0; i < MAX_NODES; ++i) {\n                this.shaderProgramLocations.nodesMatricesAttributes[i] =\n                    this.gl.getUniformLocation(shaderProgram, \"uNodesMatrices[\".concat(i, \"]\"));\n            }\n        }\n    };\n    ModelRenderer.prototype.createWireframeBuffer = function (index) {\n        var faces = this.model.Geosets[index].Faces;\n        var lines = new Uint16Array(faces.length * 2);\n        for (var i = 0; i < faces.length; i += 3) {\n            lines[i * 2] = faces[i];\n            lines[i * 2 + 1] = faces[i + 1];\n            lines[i * 2 + 2] = faces[i + 1];\n            lines[i * 2 + 3] = faces[i + 2];\n            lines[i * 2 + 4] = faces[i + 2];\n            lines[i * 2 + 5] = faces[i];\n        }\n        this.wireframeIndexBuffer[index] = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.wireframeIndexBuffer[index]);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, lines, this.gl.STATIC_DRAW);\n    };\n    ModelRenderer.prototype.initBuffers = function () {\n        for (var i = 0; i < this.model.Geosets.length; ++i) {\n            var geoset = this.model.Geosets[i];\n            if (geoset.LevelOfDetail > 0) {\n                continue;\n            }\n            this.vertexBuffer[i] = this.gl.createBuffer();\n            if (this.softwareSkinning) {\n                this.vertices[i] = new Float32Array(geoset.Vertices.length);\n            }\n            else {\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertexBuffer[i]);\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, geoset.Vertices, this.gl.STATIC_DRAW);\n            }\n            this.normalBuffer[i] = this.gl.createBuffer();\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.normalBuffer[i]);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, geoset.Normals, this.gl.STATIC_DRAW);\n            this.texCoordBuffer[i] = this.gl.createBuffer();\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texCoordBuffer[i]);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, geoset.TVertices[0], this.gl.STATIC_DRAW);\n            if (this.isHD) {\n                this.skinWeightBuffer[i] = this.gl.createBuffer();\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.skinWeightBuffer[i]);\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, geoset.SkinWeights, this.gl.STATIC_DRAW);\n                this.tangentBuffer[i] = this.gl.createBuffer();\n                this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.tangentBuffer[i]);\n                this.gl.bufferData(this.gl.ARRAY_BUFFER, geoset.Tangents, this.gl.STATIC_DRAW);\n            }\n            else {\n                if (!this.softwareSkinning) {\n                    this.groupBuffer[i] = this.gl.createBuffer();\n                    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.groupBuffer[i]);\n                    var buffer = new Uint16Array(geoset.VertexGroup.length * 4);\n                    for (var j = 0; j < buffer.length; j += 4) {\n                        var index = j / 4;\n                        var group = geoset.Groups[geoset.VertexGroup[index]];\n                        buffer[j] = group[0];\n                        buffer[j + 1] = group.length > 1 ? group[1] : MAX_NODES;\n                        buffer[j + 2] = group.length > 2 ? group[2] : MAX_NODES;\n                        buffer[j + 3] = group.length > 3 ? group[3] : MAX_NODES;\n                    }\n                    this.gl.bufferData(this.gl.ARRAY_BUFFER, buffer, this.gl.STATIC_DRAW);\n                }\n            }\n            this.indexBuffer[i] = this.gl.createBuffer();\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer[i]);\n            this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, geoset.Faces, this.gl.STATIC_DRAW);\n        }\n    };\n    /*private resetGlobalSequences (): void {\n        for (let i = 0; i < this.rendererData.globalSequencesFrames.length; ++i) {\n            this.rendererData.globalSequencesFrames[i] = 0;\n        }\n    }*/\n    ModelRenderer.prototype.updateGlobalSequences = function (delta) {\n        for (var i = 0; i < this.rendererData.globalSequencesFrames.length; ++i) {\n            this.rendererData.globalSequencesFrames[i] += delta;\n            if (this.rendererData.globalSequencesFrames[i] > this.model.GlobalSequences[i]) {\n                this.rendererData.globalSequencesFrames[i] = 0;\n            }\n        }\n    };\n    ModelRenderer.prototype.updateNode = function (node) {\n        var translationRes = this.interp.vec3(translation, node.node.Translation);\n        var rotationRes = this.interp.quat(rotation, node.node.Rotation);\n        var scalingRes = this.interp.vec3(scaling, node.node.Scaling);\n        if (!translationRes && !rotationRes && !scalingRes) {\n            gl_matrix__WEBPACK_IMPORTED_MODULE_7__.identity(node.matrix);\n        }\n        else if (translationRes && !rotationRes && !scalingRes) {\n            gl_matrix__WEBPACK_IMPORTED_MODULE_7__.fromTranslation(node.matrix, translationRes);\n        }\n        else if (!translationRes && rotationRes && !scalingRes) {\n            (0,_util__WEBPACK_IMPORTED_MODULE_1__.mat4fromRotationOrigin)(node.matrix, rotationRes, node.node.PivotPoint);\n        }\n        else {\n            gl_matrix__WEBPACK_IMPORTED_MODULE_7__.fromRotationTranslationScaleOrigin(node.matrix, rotationRes || defaultRotation, translationRes || defaultTranslation, scalingRes || defaultScaling, node.node.PivotPoint);\n        }\n        if (node.node.Parent || node.node.Parent === 0) {\n            gl_matrix__WEBPACK_IMPORTED_MODULE_7__.mul(node.matrix, this.rendererData.nodes[node.node.Parent].matrix, node.matrix);\n        }\n        var billboardedLock = node.node.Flags & _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.BillboardedLockX ||\n            node.node.Flags & _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.BillboardedLockY ||\n            node.node.Flags & _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.BillboardedLockZ;\n        if (node.node.Flags & _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.Billboarded) {\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.transformMat4(tempTransformedPivotPoint, node.node.PivotPoint, node.matrix);\n            if (node.node.Parent || node.node.Parent === 0) {\n                // cancel parent rotation from PivotPoint\n                gl_matrix__WEBPACK_IMPORTED_MODULE_7__.getRotation(tempParentRotationQuat, this.rendererData.nodes[node.node.Parent].matrix);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_6__.invert(tempParentRotationQuat, tempParentRotationQuat);\n                (0,_util__WEBPACK_IMPORTED_MODULE_1__.mat4fromRotationOrigin)(tempParentRotationMat, tempParentRotationQuat, tempTransformedPivotPoint);\n                gl_matrix__WEBPACK_IMPORTED_MODULE_7__.mul(node.matrix, tempParentRotationMat, node.matrix);\n            }\n            // rotate to camera\n            (0,_util__WEBPACK_IMPORTED_MODULE_1__.mat4fromRotationOrigin)(tempCameraMat, this.rendererData.cameraQuat, tempTransformedPivotPoint);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_7__.mul(node.matrix, tempCameraMat, node.matrix);\n        }\n        else if (billboardedLock) {\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.transformMat4(tempTransformedPivotPoint, node.node.PivotPoint, node.matrix);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.copy(tempAxis, node.node.PivotPoint);\n            // todo BillboardedLockX ?\n            if (node.node.Flags & _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.BillboardedLockX) {\n                tempAxis[0] += 1;\n            }\n            else if (node.node.Flags & _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.BillboardedLockY) {\n                tempAxis[1] += 1;\n            }\n            else if (node.node.Flags & _model__WEBPACK_IMPORTED_MODULE_0__.NodeFlags.BillboardedLockZ) {\n                tempAxis[2] += 1;\n            }\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.transformMat4(tempAxis, tempAxis, node.matrix);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.sub(tempAxis, tempAxis, tempTransformedPivotPoint);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.set(tempXAxis, 1, 0, 0);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.add(tempXAxis, tempXAxis, node.node.PivotPoint);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.transformMat4(tempXAxis, tempXAxis, node.matrix);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.sub(tempXAxis, tempXAxis, tempTransformedPivotPoint);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.set(tempCameraVec, -1, 0, 0);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.transformQuat(tempCameraVec, tempCameraVec, this.rendererData.cameraQuat);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.cross(tempCross0, tempAxis, tempCameraVec);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.cross(tempCross1, tempAxis, tempCross0);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_5__.normalize(tempCross1, tempCross1);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_6__.rotationTo(tempLockQuat, tempXAxis, tempCross1);\n            (0,_util__WEBPACK_IMPORTED_MODULE_1__.mat4fromRotationOrigin)(tempLockMat, tempLockQuat, tempTransformedPivotPoint);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_7__.mul(node.matrix, tempLockMat, node.matrix);\n        }\n        for (var _i = 0, _a = node.childs; _i < _a.length; _i++) {\n            var child = _a[_i];\n            this.updateNode(child);\n        }\n    };\n    ModelRenderer.prototype.findAlpha = function (geosetId) {\n        var geosetAnim = this.rendererData.geosetAnims[geosetId];\n        if (!geosetAnim || geosetAnim.Alpha === undefined) {\n            return 1;\n        }\n        if (typeof geosetAnim.Alpha === 'number') {\n            return geosetAnim.Alpha;\n        }\n        var interpRes = this.interp.num(geosetAnim.Alpha);\n        if (interpRes === null) {\n            return 1;\n        }\n        return interpRes;\n    };\n    ModelRenderer.prototype.setLayerProps = function (layer, textureID) {\n        var texture = this.model.Textures[textureID];\n        if (layer.Shading & _model__WEBPACK_IMPORTED_MODULE_0__.LayerShading.TwoSided) {\n            this.gl.disable(this.gl.CULL_FACE);\n        }\n        else {\n            this.gl.enable(this.gl.CULL_FACE);\n        }\n        if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Transparent) {\n            this.gl.uniform1f(this.shaderProgramLocations.discardAlphaLevelUniform, 0.75);\n        }\n        else {\n            this.gl.uniform1f(this.shaderProgramLocations.discardAlphaLevelUniform, 0.);\n        }\n        if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.None) {\n            this.gl.disable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            // this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n            this.gl.depthMask(true);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Transparent) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            this.gl.depthMask(true);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Blend) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            this.gl.depthMask(false);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Additive) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFunc(this.gl.SRC_COLOR, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.AddAlpha) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Modulate) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.ZERO, this.gl.SRC_COLOR, this.gl.ZERO, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Modulate2x) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.DST_COLOR, this.gl.SRC_COLOR, this.gl.ZERO, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        if (texture.Image) {\n            this.gl.activeTexture(this.gl.TEXTURE0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.rendererData.textures[texture.Image]);\n            this.gl.uniform1i(this.shaderProgramLocations.samplerUniform, 0);\n            this.gl.uniform1f(this.shaderProgramLocations.replaceableTypeUniform, 0);\n        }\n        else if (texture.ReplaceableId === 1 || texture.ReplaceableId === 2) {\n            this.gl.uniform3fv(this.shaderProgramLocations.replaceableColorUniform, this.rendererData.teamColor);\n            this.gl.uniform1f(this.shaderProgramLocations.replaceableTypeUniform, texture.ReplaceableId);\n        }\n        if (layer.Shading & _model__WEBPACK_IMPORTED_MODULE_0__.LayerShading.NoDepthTest) {\n            this.gl.disable(this.gl.DEPTH_TEST);\n        }\n        if (layer.Shading & _model__WEBPACK_IMPORTED_MODULE_0__.LayerShading.NoDepthSet) {\n            this.gl.depthMask(false);\n        }\n        if (typeof layer.TVertexAnimId === 'number') {\n            var anim = this.rendererData.model.TextureAnims[layer.TVertexAnimId];\n            var translationRes = this.interp.vec3(translation, anim.Translation);\n            var rotationRes = this.interp.quat(rotation, anim.Rotation);\n            var scalingRes = this.interp.vec3(scaling, anim.Scaling);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_7__.fromRotationTranslationScale(texCoordMat4, rotationRes || defaultRotation, translationRes || defaultTranslation, scalingRes || defaultScaling);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_8__.set(texCoordMat3, texCoordMat4[0], texCoordMat4[1], 0, texCoordMat4[4], texCoordMat4[5], 0, texCoordMat4[12], texCoordMat4[13], 0);\n            this.gl.uniformMatrix3fv(this.shaderProgramLocations.tVertexAnimUniform, false, texCoordMat3);\n        }\n        else {\n            this.gl.uniformMatrix3fv(this.shaderProgramLocations.tVertexAnimUniform, false, identifyMat3);\n        }\n    };\n    ModelRenderer.prototype.setLayerPropsHD = function (materialID, layers) {\n        var baseLayer = layers[0];\n        var textures = this.rendererData.materialLayerTextureID[materialID];\n        var diffuseTextureID = textures[0];\n        var diffuseTexture = this.model.Textures[diffuseTextureID];\n        var normalTextureID = textures[1];\n        var normalTexture = this.model.Textures[normalTextureID];\n        var ormTextureID = textures[2];\n        var ormTexture = this.model.Textures[ormTextureID];\n        // const emissiveTextureID = textures[3];\n        // const emissiveTexture = this.model.Textures[emissiveTextureID];\n        // const teamColorTextureID = textures[4];\n        // const teamColorTexture = this.model.Textures[teamColorTextureID];\n        // const envTextureID = textures[5];\n        // const envTexture = this.model.Textures[envTextureID];\n        if (baseLayer.Shading & _model__WEBPACK_IMPORTED_MODULE_0__.LayerShading.TwoSided) {\n            this.gl.disable(this.gl.CULL_FACE);\n        }\n        else {\n            this.gl.enable(this.gl.CULL_FACE);\n        }\n        if (baseLayer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Transparent) {\n            this.gl.uniform1f(this.shaderProgramLocations.discardAlphaLevelUniform, 0.75);\n        }\n        else {\n            this.gl.uniform1f(this.shaderProgramLocations.discardAlphaLevelUniform, 0.);\n        }\n        if (baseLayer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.None) {\n            this.gl.disable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            // this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n            this.gl.depthMask(true);\n        }\n        else if (baseLayer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Transparent) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            this.gl.depthMask(true);\n        }\n        else if (baseLayer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Blend) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            this.gl.depthMask(false);\n        }\n        else if (baseLayer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Additive) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFunc(this.gl.SRC_COLOR, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (baseLayer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.AddAlpha) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (baseLayer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Modulate) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.ZERO, this.gl.SRC_COLOR, this.gl.ZERO, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (baseLayer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.FilterMode.Modulate2x) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.DST_COLOR, this.gl.SRC_COLOR, this.gl.ZERO, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        this.gl.activeTexture(this.gl.TEXTURE0);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.rendererData.textures[diffuseTexture.Image]);\n        this.gl.uniform1i(this.shaderProgramLocations.samplerUniform, 0);\n        if (baseLayer.Shading & _model__WEBPACK_IMPORTED_MODULE_0__.LayerShading.NoDepthTest) {\n            this.gl.disable(this.gl.DEPTH_TEST);\n        }\n        if (baseLayer.Shading & _model__WEBPACK_IMPORTED_MODULE_0__.LayerShading.NoDepthSet) {\n            this.gl.depthMask(false);\n        }\n        if (typeof baseLayer.TVertexAnimId === 'number') {\n            var anim = this.rendererData.model.TextureAnims[baseLayer.TVertexAnimId];\n            var translationRes = this.interp.vec3(translation, anim.Translation);\n            var rotationRes = this.interp.quat(rotation, anim.Rotation);\n            var scalingRes = this.interp.vec3(scaling, anim.Scaling);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_7__.fromRotationTranslationScale(texCoordMat4, rotationRes || defaultRotation, translationRes || defaultTranslation, scalingRes || defaultScaling);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_8__.set(texCoordMat3, texCoordMat4[0], texCoordMat4[1], 0, texCoordMat4[4], texCoordMat4[5], 0, texCoordMat4[12], texCoordMat4[13], 0);\n            this.gl.uniformMatrix3fv(this.shaderProgramLocations.tVertexAnimUniform, false, texCoordMat3);\n        }\n        else {\n            this.gl.uniformMatrix3fv(this.shaderProgramLocations.tVertexAnimUniform, false, identifyMat3);\n        }\n        this.gl.activeTexture(this.gl.TEXTURE1);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.rendererData.textures[normalTexture.Image]);\n        this.gl.uniform1i(this.shaderProgramLocations.normalSamplerUniform, 1);\n        this.gl.activeTexture(this.gl.TEXTURE2);\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this.rendererData.textures[ormTexture.Image]);\n        this.gl.uniform1i(this.shaderProgramLocations.ormSamplerUniform, 2);\n        this.gl.uniform3fv(this.shaderProgramLocations.replaceableColorUniform, this.rendererData.teamColor);\n    };\n    return ModelRenderer;\n}());\n\n\n\n//# sourceURL=webpack://war3-model/./renderer/modelRenderer.ts?");

/***/ }),

/***/ "./renderer/particles.ts":
/*!*******************************!*\
  !*** ./renderer/particles.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ParticlesController\": () => (/* binding */ ParticlesController)\n/* harmony export */ });\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../model */ \"./model.ts\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec3.js\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec4.js\");\n/* harmony import */ var _modelInterp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modelInterp */ \"./renderer/modelInterp.ts\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"./renderer/util.ts\");\n/* harmony import */ var _interp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interp */ \"./renderer/interp.ts\");\n\n\n\n\n\nvar rotateCenter = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.fromValues(0, 0, 0);\nvar firstColor = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar secondColor = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar color = gl_matrix__WEBPACK_IMPORTED_MODULE_5__.create();\nvar tailPos = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create();\nvar tailCross = gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create();\nvar vertexShader = \"\\n    attribute vec3 aVertexPosition;\\n    attribute vec2 aTextureCoord;\\n    attribute vec4 aColor;\\n\\n    uniform mat4 uMVMatrix;\\n    uniform mat4 uPMatrix;\\n\\n    varying vec2 vTextureCoord;\\n    varying vec4 vColor;\\n\\n    void main(void) {\\n        vec4 position = vec4(aVertexPosition, 1.0);\\n        gl_Position = uPMatrix * uMVMatrix * position;\\n        vTextureCoord = aTextureCoord;\\n        vColor = aColor;\\n    }\\n\";\nvar fragmentShader = \"\\n    precision mediump float;\\n\\n    varying vec2 vTextureCoord;\\n    varying vec4 vColor;\\n\\n    uniform sampler2D uSampler;\\n    uniform vec3 uReplaceableColor;\\n    uniform float uReplaceableType;\\n    uniform float uDiscardAlphaLevel;\\n\\n    float hypot (vec2 z) {\\n        float t;\\n        float x = abs(z.x);\\n        float y = abs(z.y);\\n        t = min(x, y);\\n        x = max(x, y);\\n        t = t / x;\\n        return (z.x == 0.0 && z.y == 0.0) ? 0.0 : x * sqrt(1.0 + t * t);\\n    }\\n\\n    void main(void) {\\n        vec2 coords = vec2(vTextureCoord.s, vTextureCoord.t);\\n        if (uReplaceableType == 0.) {\\n            gl_FragColor = texture2D(uSampler, coords);\\n        } else if (uReplaceableType == 1.) {\\n            gl_FragColor = vec4(uReplaceableColor, 1.0);\\n        } else if (uReplaceableType == 2.) {\\n            float dist = hypot(coords - vec2(0.5, 0.5)) * 2.;\\n            float truncateDist = clamp(1. - dist * 1.4, 0., 1.);\\n            float alpha = sin(truncateDist);\\n            gl_FragColor = vec4(uReplaceableColor * alpha, 1.0);\\n        }\\n        gl_FragColor *= vColor;\\n        \\n        if (gl_FragColor[3] < uDiscardAlphaLevel) {\\n            discard;\\n        }\\n    }\\n\";\nvar DISCARD_ALPHA_KEY_LEVEL = 0.83;\nvar DISCARD_MODULATE_LEVEL = 0.01;\nvar ParticlesController = /** @class */ (function () {\n    function ParticlesController(interp, rendererData) {\n        this.shaderProgramLocations = {\n            vertexPositionAttribute: null,\n            textureCoordAttribute: null,\n            colorAttribute: null,\n            pMatrixUniform: null,\n            mvMatrixUniform: null,\n            samplerUniform: null,\n            replaceableColorUniform: null,\n            replaceableTypeUniform: null,\n            discardAlphaLevelUniform: null\n        };\n        this.particleStorage = [];\n        this.interp = interp;\n        this.rendererData = rendererData;\n        this.emitters = [];\n        if (rendererData.model.ParticleEmitters2.length) {\n            this.particleBaseVectors = [\n                gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create(),\n                gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create(),\n                gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create(),\n                gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create()\n            ];\n            for (var _i = 0, _a = rendererData.model.ParticleEmitters2; _i < _a.length; _i++) {\n                var particleEmitter = _a[_i];\n                var emitter = {\n                    emission: 0,\n                    squirtFrame: 0,\n                    particles: [],\n                    props: particleEmitter,\n                    capacity: 0,\n                    baseCapacity: 0,\n                    type: particleEmitter.FrameFlags,\n                    tailVertices: null,\n                    tailVertexBuffer: null,\n                    headVertices: null,\n                    headVertexBuffer: null,\n                    tailTexCoords: null,\n                    tailTexCoordBuffer: null,\n                    headTexCoords: null,\n                    headTexCoordBuffer: null,\n                    colors: null,\n                    colorBuffer: null,\n                    indices: null,\n                    indexBuffer: null\n                };\n                emitter.baseCapacity = Math.ceil(_modelInterp__WEBPACK_IMPORTED_MODULE_1__.ModelInterp.maxAnimVectorVal(emitter.props.EmissionRate) * emitter.props.LifeSpan);\n                this.emitters.push(emitter);\n            }\n        }\n    }\n    ParticlesController.prototype.destroy = function () {\n        if (this.shaderProgram) {\n            if (this.vertexShader) {\n                this.gl.detachShader(this.shaderProgram, this.vertexShader);\n                this.gl.deleteShader(this.vertexShader);\n                this.vertexShader = null;\n            }\n            if (this.fragmentShader) {\n                this.gl.detachShader(this.shaderProgram, this.fragmentShader);\n                this.gl.deleteShader(this.fragmentShader);\n                this.fragmentShader = null;\n            }\n            this.gl.deleteProgram(this.shaderProgram);\n            this.shaderProgram = null;\n        }\n        this.particleStorage = [];\n    };\n    ParticlesController.prototype.initGL = function (glContext) {\n        this.gl = glContext;\n        this.initShaders();\n    };\n    ParticlesController.prototype.initShaders = function () {\n        var vertex = this.vertexShader = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getShader)(this.gl, vertexShader, this.gl.VERTEX_SHADER);\n        var fragment = this.fragmentShader = (0,_util__WEBPACK_IMPORTED_MODULE_2__.getShader)(this.gl, fragmentShader, this.gl.FRAGMENT_SHADER);\n        var shaderProgram = this.shaderProgram = this.gl.createProgram();\n        this.gl.attachShader(shaderProgram, vertex);\n        this.gl.attachShader(shaderProgram, fragment);\n        this.gl.linkProgram(shaderProgram);\n        if (!this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS)) {\n            alert('Could not initialise shaders');\n        }\n        this.gl.useProgram(shaderProgram);\n        this.shaderProgramLocations.vertexPositionAttribute =\n            this.gl.getAttribLocation(shaderProgram, 'aVertexPosition');\n        this.shaderProgramLocations.textureCoordAttribute =\n            this.gl.getAttribLocation(shaderProgram, 'aTextureCoord');\n        this.shaderProgramLocations.colorAttribute =\n            this.gl.getAttribLocation(shaderProgram, 'aColor');\n        this.shaderProgramLocations.pMatrixUniform = this.gl.getUniformLocation(shaderProgram, 'uPMatrix');\n        this.shaderProgramLocations.mvMatrixUniform = this.gl.getUniformLocation(shaderProgram, 'uMVMatrix');\n        this.shaderProgramLocations.samplerUniform = this.gl.getUniformLocation(shaderProgram, 'uSampler');\n        this.shaderProgramLocations.replaceableColorUniform =\n            this.gl.getUniformLocation(shaderProgram, 'uReplaceableColor');\n        this.shaderProgramLocations.replaceableTypeUniform =\n            this.gl.getUniformLocation(shaderProgram, 'uReplaceableType');\n        this.shaderProgramLocations.discardAlphaLevelUniform =\n            this.gl.getUniformLocation(shaderProgram, 'uDiscardAlphaLevel');\n    };\n    ParticlesController.prototype.updateParticle = function (particle, delta) {\n        delta /= 1000;\n        particle.lifeSpan -= delta;\n        if (particle.lifeSpan <= 0) {\n            return;\n        }\n        particle.speed[2] -= particle.gravity * delta;\n        particle.pos[0] += particle.speed[0] * delta;\n        particle.pos[1] += particle.speed[1] * delta;\n        particle.pos[2] += particle.speed[2] * delta;\n    };\n    ParticlesController.prototype.resizeEmitterBuffers = function (emitter, size) {\n        if (size <= emitter.capacity) {\n            return;\n        }\n        size = Math.max(size, emitter.baseCapacity);\n        var tailVertices;\n        var headVertices;\n        var tailTexCoords;\n        var headTexCoords;\n        if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail) {\n            tailVertices = new Float32Array(size * 4 * 3); // 4 vertices * xyz\n            tailTexCoords = new Float32Array(size * 4 * 2); // 4 vertices * xy\n        }\n        if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Head) {\n            headVertices = new Float32Array(size * 4 * 3); // 4 vertices * xyz\n            headTexCoords = new Float32Array(size * 4 * 2); // 4 vertices * xy\n        }\n        var colors = new Float32Array(size * 4 * 4); // 4 vertices * rgba\n        var indices = new Uint16Array(size * 6); // 4 vertices * 2 triangles\n        if (emitter.capacity) {\n            indices.set(emitter.indices);\n        }\n        for (var i = emitter.capacity; i < size; ++i) {\n            indices[i * 6] = i * 4;\n            indices[i * 6 + 1] = i * 4 + 1;\n            indices[i * 6 + 2] = i * 4 + 2;\n            indices[i * 6 + 3] = i * 4 + 2;\n            indices[i * 6 + 4] = i * 4 + 1;\n            indices[i * 6 + 5] = i * 4 + 3;\n        }\n        if (tailVertices) {\n            emitter.tailVertices = tailVertices;\n            emitter.tailTexCoords = tailTexCoords;\n        }\n        if (headVertices) {\n            emitter.headVertices = headVertices;\n            emitter.headTexCoords = headTexCoords;\n        }\n        emitter.colors = colors;\n        emitter.indices = indices;\n        emitter.capacity = size;\n        if (!emitter.indexBuffer) {\n            if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail) {\n                emitter.tailVertexBuffer = this.gl.createBuffer();\n                emitter.tailTexCoordBuffer = this.gl.createBuffer();\n            }\n            if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Head) {\n                emitter.headVertexBuffer = this.gl.createBuffer();\n                emitter.headTexCoordBuffer = this.gl.createBuffer();\n            }\n            emitter.colorBuffer = this.gl.createBuffer();\n            emitter.indexBuffer = this.gl.createBuffer();\n        }\n    };\n    ParticlesController.prototype.update = function (delta) {\n        for (var _i = 0, _a = this.emitters; _i < _a.length; _i++) {\n            var emitter = _a[_i];\n            this.updateEmitter(emitter, delta);\n        }\n    };\n    ParticlesController.prototype.render = function (mvMatrix, pMatrix) {\n        this.gl.enable(this.gl.CULL_FACE);\n        this.gl.useProgram(this.shaderProgram);\n        this.gl.uniformMatrix4fv(this.shaderProgramLocations.pMatrixUniform, false, pMatrix);\n        this.gl.uniformMatrix4fv(this.shaderProgramLocations.mvMatrixUniform, false, mvMatrix);\n        this.gl.enableVertexAttribArray(this.shaderProgramLocations.vertexPositionAttribute);\n        this.gl.enableVertexAttribArray(this.shaderProgramLocations.textureCoordAttribute);\n        this.gl.enableVertexAttribArray(this.shaderProgramLocations.colorAttribute);\n        for (var _i = 0, _a = this.emitters; _i < _a.length; _i++) {\n            var emitter = _a[_i];\n            if (!emitter.particles.length) {\n                continue;\n            }\n            this.setLayerProps(emitter);\n            this.setGeneralBuffers(emitter);\n            if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail) {\n                this.renderEmitterType(emitter, _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail);\n            }\n            if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Head) {\n                this.renderEmitterType(emitter, _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Head);\n            }\n        }\n        this.gl.disableVertexAttribArray(this.shaderProgramLocations.vertexPositionAttribute);\n        this.gl.disableVertexAttribArray(this.shaderProgramLocations.textureCoordAttribute);\n        this.gl.disableVertexAttribArray(this.shaderProgramLocations.colorAttribute);\n    };\n    ParticlesController.prototype.updateEmitter = function (emitter, delta) {\n        var visibility = this.interp.animVectorVal(emitter.props.Visibility, 1);\n        if (visibility > 0) {\n            if (emitter.props.Squirt && typeof emitter.props.EmissionRate !== 'number') {\n                var interp = this.interp.findKeyframes(emitter.props.EmissionRate);\n                if (interp && interp.left && interp.left.Frame !== emitter.squirtFrame) {\n                    emitter.squirtFrame = interp.left.Frame;\n                    if (interp.left.Vector[0] > 0) {\n                        emitter.emission += interp.left.Vector[0] * 1000;\n                    }\n                }\n            }\n            else {\n                var emissionRate = this.interp.animVectorVal(emitter.props.EmissionRate, 0);\n                emitter.emission += emissionRate * delta;\n            }\n            while (emitter.emission >= 1000) {\n                emitter.emission -= 1000;\n                emitter.particles.push(this.createParticle(emitter, this.rendererData.nodes[emitter.props.ObjectId].matrix));\n            }\n        }\n        if (emitter.particles.length) {\n            var updatedParticles = [];\n            for (var _i = 0, _a = emitter.particles; _i < _a.length; _i++) {\n                var particle = _a[_i];\n                this.updateParticle(particle, delta);\n                if (particle.lifeSpan > 0) {\n                    updatedParticles.push(particle);\n                }\n                else {\n                    this.particleStorage.push(particle);\n                }\n            }\n            emitter.particles = updatedParticles;\n            if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Head) {\n                if (emitter.props.Flags & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2Flags.XYQuad) {\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.set(this.particleBaseVectors[0], -1, 1, 0);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.set(this.particleBaseVectors[1], -1, -1, 0);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.set(this.particleBaseVectors[2], 1, 1, 0);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.set(this.particleBaseVectors[3], 1, -1, 0);\n                }\n                else {\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.set(this.particleBaseVectors[0], 0, -1, 1);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.set(this.particleBaseVectors[1], 0, -1, -1);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.set(this.particleBaseVectors[2], 0, 1, 1);\n                    gl_matrix__WEBPACK_IMPORTED_MODULE_4__.set(this.particleBaseVectors[3], 0, 1, -1);\n                    for (var i = 0; i < 4; ++i) {\n                        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.transformQuat(this.particleBaseVectors[i], this.particleBaseVectors[i], this.rendererData.cameraQuat);\n                    }\n                }\n            }\n            this.resizeEmitterBuffers(emitter, emitter.particles.length);\n            for (var i = 0; i < emitter.particles.length; ++i) {\n                this.updateParticleBuffers(emitter.particles[i], i, emitter);\n            }\n        }\n    };\n    ParticlesController.prototype.createParticle = function (emitter, emitterMatrix) {\n        var particle;\n        if (this.particleStorage.length) {\n            particle = this.particleStorage.pop();\n        }\n        else {\n            particle = {\n                emitter: null,\n                pos: gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create(),\n                angle: 0,\n                speed: gl_matrix__WEBPACK_IMPORTED_MODULE_4__.create(),\n                gravity: null,\n                lifeSpan: null\n            };\n        }\n        var width = this.interp.animVectorVal(emitter.props.Width, 0);\n        var length = this.interp.animVectorVal(emitter.props.Length, 0);\n        var speedScale = this.interp.animVectorVal(emitter.props.Speed, 0);\n        var variation = this.interp.animVectorVal(emitter.props.Variation, 0);\n        var latitude = (0,_util__WEBPACK_IMPORTED_MODULE_2__.degToRad)(this.interp.animVectorVal(emitter.props.Latitude, 0));\n        particle.emitter = emitter;\n        particle.pos[0] = emitter.props.PivotPoint[0] + (0,_util__WEBPACK_IMPORTED_MODULE_2__.rand)(-width, width);\n        particle.pos[1] = emitter.props.PivotPoint[1] + (0,_util__WEBPACK_IMPORTED_MODULE_2__.rand)(-length, length);\n        particle.pos[2] = emitter.props.PivotPoint[2];\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.transformMat4(particle.pos, particle.pos, emitterMatrix);\n        if (variation > 0) {\n            speedScale *= 1 + (0,_util__WEBPACK_IMPORTED_MODULE_2__.rand)(-variation, variation);\n        }\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.set(particle.speed, 0, 0, speedScale);\n        particle.angle = (0,_util__WEBPACK_IMPORTED_MODULE_2__.rand)(0, Math.PI * 2);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.rotateY(particle.speed, particle.speed, rotateCenter, (0,_util__WEBPACK_IMPORTED_MODULE_2__.rand)(0, latitude));\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.rotateZ(particle.speed, particle.speed, rotateCenter, particle.angle);\n        if (emitter.props.Flags & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2Flags.LineEmitter) {\n            particle.speed[0] = 0;\n        }\n        gl_matrix__WEBPACK_IMPORTED_MODULE_4__.transformMat4(particle.speed, particle.speed, emitterMatrix);\n        // minus translation of emitterMatrix\n        particle.speed[0] -= emitterMatrix[12];\n        particle.speed[1] -= emitterMatrix[13];\n        particle.speed[2] -= emitterMatrix[14];\n        particle.gravity = this.interp.animVectorVal(emitter.props.Gravity, 0);\n        particle.lifeSpan = emitter.props.LifeSpan;\n        return particle;\n    };\n    ParticlesController.prototype.updateParticleBuffers = function (particle, index, emitter) {\n        var globalT = 1 - particle.lifeSpan / emitter.props.LifeSpan;\n        var firstHalf = globalT < emitter.props.Time;\n        var t;\n        if (firstHalf) {\n            t = globalT / emitter.props.Time;\n        }\n        else {\n            t = (globalT - emitter.props.Time) / (1 - emitter.props.Time);\n        }\n        this.updateParticleVertices(particle, index, emitter, firstHalf, t);\n        this.updateParticleTexCoords(index, emitter, firstHalf, t);\n        this.updateParticleColor(index, emitter, firstHalf, t);\n    };\n    ParticlesController.prototype.updateParticleVertices = function (particle, index, emitter, firstHalf, t) {\n        var firstScale;\n        var secondScale;\n        var scale;\n        if (firstHalf) {\n            firstScale = emitter.props.ParticleScaling[0];\n            secondScale = emitter.props.ParticleScaling[1];\n        }\n        else {\n            firstScale = emitter.props.ParticleScaling[1];\n            secondScale = emitter.props.ParticleScaling[2];\n        }\n        // eslint-disable-next-line prefer-const\n        scale = (0,_interp__WEBPACK_IMPORTED_MODULE_3__.lerp)(firstScale, secondScale, t);\n        if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Head) {\n            for (var i = 0; i < 4; ++i) {\n                emitter.headVertices[index * 12 + i * 3] = this.particleBaseVectors[i][0] * scale;\n                emitter.headVertices[index * 12 + i * 3 + 1] = this.particleBaseVectors[i][1] * scale;\n                emitter.headVertices[index * 12 + i * 3 + 2] = this.particleBaseVectors[i][2] * scale;\n                if (emitter.props.Flags & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2Flags.XYQuad) {\n                    var x = emitter.headVertices[index * 12 + i * 3];\n                    var y = emitter.headVertices[index * 12 + i * 3 + 1];\n                    emitter.headVertices[index * 12 + i * 3] = x * Math.cos(particle.angle) -\n                        y * Math.sin(particle.angle);\n                    emitter.headVertices[index * 12 + i * 3 + 1] = x * Math.sin(particle.angle) +\n                        y * Math.cos(particle.angle);\n                }\n            }\n        }\n        if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail) {\n            tailPos[0] = -particle.speed[0] * emitter.props.TailLength;\n            tailPos[1] = -particle.speed[1] * emitter.props.TailLength;\n            tailPos[2] = -particle.speed[2] * emitter.props.TailLength;\n            gl_matrix__WEBPACK_IMPORTED_MODULE_4__.cross(tailCross, particle.speed, this.rendererData.cameraPos);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_4__.normalize(tailCross, tailCross);\n            gl_matrix__WEBPACK_IMPORTED_MODULE_4__.scale(tailCross, tailCross, scale);\n            emitter.tailVertices[index * 12] = tailCross[0];\n            emitter.tailVertices[index * 12 + 1] = tailCross[1];\n            emitter.tailVertices[index * 12 + 2] = tailCross[2];\n            emitter.tailVertices[index * 12 + 3] = -tailCross[0];\n            emitter.tailVertices[index * 12 + 3 + 1] = -tailCross[1];\n            emitter.tailVertices[index * 12 + 3 + 2] = -tailCross[2];\n            emitter.tailVertices[index * 12 + 2 * 3] = tailCross[0] + tailPos[0];\n            emitter.tailVertices[index * 12 + 2 * 3 + 1] = tailCross[1] + tailPos[1];\n            emitter.tailVertices[index * 12 + 2 * 3 + 2] = tailCross[2] + tailPos[2];\n            emitter.tailVertices[index * 12 + 3 * 3] = -tailCross[0] + tailPos[0];\n            emitter.tailVertices[index * 12 + 3 * 3 + 1] = -tailCross[1] + tailPos[1];\n            emitter.tailVertices[index * 12 + 3 * 3 + 2] = -tailCross[2] + tailPos[2];\n        }\n        for (var i = 0; i < 4; ++i) {\n            if (emitter.headVertices) {\n                emitter.headVertices[index * 12 + i * 3] += particle.pos[0];\n                emitter.headVertices[index * 12 + i * 3 + 1] += particle.pos[1];\n                emitter.headVertices[index * 12 + i * 3 + 2] += particle.pos[2];\n            }\n            if (emitter.tailVertices) {\n                emitter.tailVertices[index * 12 + i * 3] += particle.pos[0];\n                emitter.tailVertices[index * 12 + i * 3 + 1] += particle.pos[1];\n                emitter.tailVertices[index * 12 + i * 3 + 2] += particle.pos[2];\n            }\n        }\n    };\n    ParticlesController.prototype.updateParticleTexCoords = function (index, emitter, firstHalf, t) {\n        if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Head) {\n            this.updateParticleTexCoordsByType(index, emitter, firstHalf, t, _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Head);\n        }\n        if (emitter.type & _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail) {\n            this.updateParticleTexCoordsByType(index, emitter, firstHalf, t, _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail);\n        }\n    };\n    ParticlesController.prototype.updateParticleTexCoordsByType = function (index, emitter, firstHalf, t, type) {\n        var uvAnim;\n        var texCoords;\n        if (type === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail) {\n            uvAnim = firstHalf ? emitter.props.TailUVAnim : emitter.props.TailDecayUVAnim;\n            texCoords = emitter.tailTexCoords;\n        }\n        else {\n            uvAnim = firstHalf ? emitter.props.LifeSpanUVAnim : emitter.props.DecayUVAnim;\n            texCoords = emitter.headTexCoords;\n        }\n        var firstFrame = uvAnim[0];\n        var secondFrame = uvAnim[1];\n        var frame = Math.round((0,_interp__WEBPACK_IMPORTED_MODULE_3__.lerp)(firstFrame, secondFrame, t));\n        var texCoordX = frame % emitter.props.Columns;\n        var texCoordY = Math.floor(frame / emitter.props.Rows);\n        var cellWidth = 1 / emitter.props.Columns;\n        var cellHeight = 1 / emitter.props.Rows;\n        texCoords[index * 8] = texCoordX * cellWidth;\n        texCoords[index * 8 + 1] = texCoordY * cellHeight;\n        texCoords[index * 8 + 2] = texCoordX * cellWidth;\n        texCoords[index * 8 + 3] = (1 + texCoordY) * cellHeight;\n        texCoords[index * 8 + 4] = (1 + texCoordX) * cellWidth;\n        texCoords[index * 8 + 5] = texCoordY * cellHeight;\n        texCoords[index * 8 + 6] = (1 + texCoordX) * cellWidth;\n        texCoords[index * 8 + 7] = (1 + texCoordY) * cellHeight;\n    };\n    ParticlesController.prototype.updateParticleColor = function (index, emitter, firstHalf, t) {\n        if (firstHalf) {\n            firstColor[0] = emitter.props.SegmentColor[0][0];\n            firstColor[1] = emitter.props.SegmentColor[0][1];\n            firstColor[2] = emitter.props.SegmentColor[0][2];\n            firstColor[3] = emitter.props.Alpha[0] / 255;\n            secondColor[0] = emitter.props.SegmentColor[1][0];\n            secondColor[1] = emitter.props.SegmentColor[1][1];\n            secondColor[2] = emitter.props.SegmentColor[1][2];\n            secondColor[3] = emitter.props.Alpha[1] / 255;\n        }\n        else {\n            firstColor[0] = emitter.props.SegmentColor[1][0];\n            firstColor[1] = emitter.props.SegmentColor[1][1];\n            firstColor[2] = emitter.props.SegmentColor[1][2];\n            firstColor[3] = emitter.props.Alpha[1] / 255;\n            secondColor[0] = emitter.props.SegmentColor[2][0];\n            secondColor[1] = emitter.props.SegmentColor[2][1];\n            secondColor[2] = emitter.props.SegmentColor[2][2];\n            secondColor[3] = emitter.props.Alpha[2] / 255;\n        }\n        gl_matrix__WEBPACK_IMPORTED_MODULE_5__.lerp(color, firstColor, secondColor, t);\n        for (var i = 0; i < 4; ++i) {\n            emitter.colors[index * 16 + i * 4] = color[0];\n            emitter.colors[index * 16 + i * 4 + 1] = color[1];\n            emitter.colors[index * 16 + i * 4 + 2] = color[2];\n            emitter.colors[index * 16 + i * 4 + 3] = color[3];\n        }\n    };\n    ParticlesController.prototype.setLayerProps = function (emitter) {\n        if (emitter.props.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FilterMode.AlphaKey) {\n            this.gl.uniform1f(this.shaderProgramLocations.discardAlphaLevelUniform, DISCARD_ALPHA_KEY_LEVEL);\n        }\n        else if (emitter.props.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FilterMode.Modulate ||\n            emitter.props.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FilterMode.Modulate2x) {\n            this.gl.uniform1f(this.shaderProgramLocations.discardAlphaLevelUniform, DISCARD_MODULATE_LEVEL);\n        }\n        else {\n            this.gl.uniform1f(this.shaderProgramLocations.discardAlphaLevelUniform, 0.);\n        }\n        if (emitter.props.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FilterMode.Blend) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            this.gl.depthMask(false);\n        }\n        else if (emitter.props.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FilterMode.Additive) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (emitter.props.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FilterMode.AlphaKey) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (emitter.props.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FilterMode.Modulate) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.ZERO, this.gl.SRC_COLOR, this.gl.ZERO, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (emitter.props.FilterMode === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FilterMode.Modulate2x) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.DST_COLOR, this.gl.SRC_COLOR, this.gl.ZERO, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        var texture = this.rendererData.model.Textures[emitter.props.TextureID];\n        if (texture.Image) {\n            this.gl.activeTexture(this.gl.TEXTURE0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.rendererData.textures[texture.Image]);\n            this.gl.uniform1i(this.shaderProgramLocations.samplerUniform, 0);\n            this.gl.uniform1f(this.shaderProgramLocations.replaceableTypeUniform, 0);\n        }\n        else if (texture.ReplaceableId === 1 || texture.ReplaceableId === 2) {\n            this.gl.uniform3fv(this.shaderProgramLocations.replaceableColorUniform, this.rendererData.teamColor);\n            this.gl.uniform1f(this.shaderProgramLocations.replaceableTypeUniform, texture.ReplaceableId);\n        }\n    };\n    ParticlesController.prototype.setGeneralBuffers = function (emitter) {\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, emitter.colorBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, emitter.colors, this.gl.DYNAMIC_DRAW);\n        this.gl.vertexAttribPointer(this.shaderProgramLocations.colorAttribute, 4, this.gl.FLOAT, false, 0, 0);\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, emitter.indexBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, emitter.indices, this.gl.DYNAMIC_DRAW);\n    };\n    ParticlesController.prototype.renderEmitterType = function (emitter, type) {\n        if (type === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail) {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, emitter.tailTexCoordBuffer);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, emitter.tailTexCoords, this.gl.DYNAMIC_DRAW);\n        }\n        else {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, emitter.headTexCoordBuffer);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, emitter.headTexCoords, this.gl.DYNAMIC_DRAW);\n        }\n        this.gl.vertexAttribPointer(this.shaderProgramLocations.textureCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n        if (type === _model__WEBPACK_IMPORTED_MODULE_0__.ParticleEmitter2FramesFlags.Tail) {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, emitter.tailVertexBuffer);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, emitter.tailVertices, this.gl.DYNAMIC_DRAW);\n        }\n        else {\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, emitter.headVertexBuffer);\n            this.gl.bufferData(this.gl.ARRAY_BUFFER, emitter.headVertices, this.gl.DYNAMIC_DRAW);\n        }\n        this.gl.vertexAttribPointer(this.shaderProgramLocations.vertexPositionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n        this.gl.drawElements(this.gl.TRIANGLES, emitter.particles.length * 6, this.gl.UNSIGNED_SHORT, 0);\n    };\n    return ParticlesController;\n}());\n\n\n\n//# sourceURL=webpack://war3-model/./renderer/particles.ts?");

/***/ }),

/***/ "./renderer/ribbons.ts":
/*!*****************************!*\
  !*** ./renderer/ribbons.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"RibbonsController\": () => (/* binding */ RibbonsController)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"./renderer/util.ts\");\n/* harmony import */ var _modelInterp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modelInterp */ \"./renderer/modelInterp.ts\");\n/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../model */ \"./model.ts\");\n/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gl-matrix */ \"./node_modules/gl-matrix/esm/vec3.js\");\n\n\n\n\nvar vertexShader = \"\\n    attribute vec3 aVertexPosition;\\n    attribute vec2 aTextureCoord;\\n\\n    uniform mat4 uMVMatrix;\\n    uniform mat4 uPMatrix;\\n\\n    varying vec2 vTextureCoord;\\n\\n    void main(void) {\\n        vec4 position = vec4(aVertexPosition, 1.0);\\n        gl_Position = uPMatrix * uMVMatrix * position;\\n        vTextureCoord = aTextureCoord;\\n    }\\n\";\nvar fragmentShader = \"\\n    precision mediump float;\\n\\n    varying vec2 vTextureCoord;\\n\\n    uniform sampler2D uSampler;\\n    uniform vec3 uReplaceableColor;\\n    uniform float uReplaceableType;\\n    uniform float uDiscardAlphaLevel;\\n    uniform vec4 uColor;\\n\\n    float hypot (vec2 z) {\\n        float t;\\n        float x = abs(z.x);\\n        float y = abs(z.y);\\n        t = min(x, y);\\n        x = max(x, y);\\n        t = t / x;\\n        return (z.x == 0.0 && z.y == 0.0) ? 0.0 : x * sqrt(1.0 + t * t);\\n    }\\n\\n    void main(void) {\\n        vec2 coords = vec2(vTextureCoord.s, vTextureCoord.t);\\n        if (uReplaceableType == 0.) {\\n            gl_FragColor = texture2D(uSampler, coords);\\n        } else if (uReplaceableType == 1.) {\\n            gl_FragColor = vec4(uReplaceableColor, 1.0);\\n        } else if (uReplaceableType == 2.) {\\n            float dist = hypot(coords - vec2(0.5, 0.5)) * 2.;\\n            float truncateDist = clamp(1. - dist * 1.4, 0., 1.);\\n            float alpha = sin(truncateDist);\\n            gl_FragColor = vec4(uReplaceableColor * alpha, 1.0);\\n        }\\n        gl_FragColor *= uColor;\\n        \\n        if (gl_FragColor[3] < uDiscardAlphaLevel) {\\n            discard;\\n        }\\n    }\\n\";\nvar RibbonsController = /** @class */ (function () {\n    function RibbonsController(interp, rendererData) {\n        this.shaderProgramLocations = {\n            vertexPositionAttribute: null,\n            textureCoordAttribute: null,\n            pMatrixUniform: null,\n            mvMatrixUniform: null,\n            samplerUniform: null,\n            replaceableColorUniform: null,\n            replaceableTypeUniform: null,\n            discardAlphaLevelUniform: null,\n            colorUniform: null\n        };\n        this.interp = interp;\n        this.rendererData = rendererData;\n        this.emitters = [];\n        if (rendererData.model.RibbonEmitters.length) {\n            for (var _i = 0, _a = rendererData.model.RibbonEmitters; _i < _a.length; _i++) {\n                var ribbonEmitter = _a[_i];\n                var emitter = {\n                    emission: 0,\n                    props: ribbonEmitter,\n                    capacity: 0,\n                    baseCapacity: 0,\n                    creationTimes: [],\n                    vertices: null,\n                    vertexBuffer: null,\n                    texCoords: null,\n                    texCoordBuffer: null\n                };\n                emitter.baseCapacity = Math.ceil(_modelInterp__WEBPACK_IMPORTED_MODULE_1__.ModelInterp.maxAnimVectorVal(emitter.props.EmissionRate) * emitter.props.LifeSpan) + 1; // extra points\n                this.emitters.push(emitter);\n            }\n        }\n    }\n    RibbonsController.prototype.destroy = function () {\n        if (this.shaderProgram) {\n            if (this.vertexShader) {\n                this.gl.detachShader(this.shaderProgram, this.vertexShader);\n                this.gl.deleteShader(this.vertexShader);\n                this.vertexShader = null;\n            }\n            if (this.fragmentShader) {\n                this.gl.detachShader(this.shaderProgram, this.fragmentShader);\n                this.gl.deleteShader(this.fragmentShader);\n                this.fragmentShader = null;\n            }\n            this.gl.deleteProgram(this.shaderProgram);\n            this.shaderProgram = null;\n        }\n        this.emitters = [];\n    };\n    RibbonsController.prototype.initGL = function (glContext) {\n        this.gl = glContext;\n        this.initShaders();\n    };\n    RibbonsController.prototype.update = function (delta) {\n        for (var _i = 0, _a = this.emitters; _i < _a.length; _i++) {\n            var emitter = _a[_i];\n            this.updateEmitter(emitter, delta);\n        }\n    };\n    RibbonsController.prototype.render = function (mvMatrix, pMatrix) {\n        this.gl.useProgram(this.shaderProgram);\n        this.gl.uniformMatrix4fv(this.shaderProgramLocations.pMatrixUniform, false, pMatrix);\n        this.gl.uniformMatrix4fv(this.shaderProgramLocations.mvMatrixUniform, false, mvMatrix);\n        this.gl.enableVertexAttribArray(this.shaderProgramLocations.vertexPositionAttribute);\n        this.gl.enableVertexAttribArray(this.shaderProgramLocations.textureCoordAttribute);\n        for (var _i = 0, _a = this.emitters; _i < _a.length; _i++) {\n            var emitter = _a[_i];\n            if (emitter.creationTimes.length < 2) {\n                continue;\n            }\n            this.gl.uniform4f(this.shaderProgramLocations.colorUniform, emitter.props.Color[0], emitter.props.Color[1], emitter.props.Color[2], this.interp.animVectorVal(emitter.props.Alpha, 1));\n            this.setGeneralBuffers(emitter);\n            var materialID = emitter.props.MaterialID;\n            var material = this.rendererData.model.Materials[materialID];\n            for (var j = 0; j < material.Layers.length; ++j) {\n                this.setLayerProps(material.Layers[j], this.rendererData.materialLayerTextureID[materialID][j]);\n                this.renderEmitter(emitter);\n            }\n        }\n        this.gl.disableVertexAttribArray(this.shaderProgramLocations.vertexPositionAttribute);\n        this.gl.disableVertexAttribArray(this.shaderProgramLocations.textureCoordAttribute);\n    };\n    RibbonsController.prototype.initShaders = function () {\n        var vertex = this.vertexShader = (0,_util__WEBPACK_IMPORTED_MODULE_0__.getShader)(this.gl, vertexShader, this.gl.VERTEX_SHADER);\n        var fragment = this.fragmentShader = (0,_util__WEBPACK_IMPORTED_MODULE_0__.getShader)(this.gl, fragmentShader, this.gl.FRAGMENT_SHADER);\n        var shaderProgram = this.shaderProgram = this.gl.createProgram();\n        this.gl.attachShader(shaderProgram, vertex);\n        this.gl.attachShader(shaderProgram, fragment);\n        this.gl.linkProgram(shaderProgram);\n        if (!this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS)) {\n            alert('Could not initialise shaders');\n        }\n        this.gl.useProgram(shaderProgram);\n        this.shaderProgramLocations.vertexPositionAttribute =\n            this.gl.getAttribLocation(shaderProgram, 'aVertexPosition');\n        this.shaderProgramLocations.textureCoordAttribute =\n            this.gl.getAttribLocation(shaderProgram, 'aTextureCoord');\n        this.shaderProgramLocations.pMatrixUniform = this.gl.getUniformLocation(shaderProgram, 'uPMatrix');\n        this.shaderProgramLocations.mvMatrixUniform = this.gl.getUniformLocation(shaderProgram, 'uMVMatrix');\n        this.shaderProgramLocations.samplerUniform = this.gl.getUniformLocation(shaderProgram, 'uSampler');\n        this.shaderProgramLocations.replaceableColorUniform =\n            this.gl.getUniformLocation(shaderProgram, 'uReplaceableColor');\n        this.shaderProgramLocations.replaceableTypeUniform =\n            this.gl.getUniformLocation(shaderProgram, 'uReplaceableType');\n        this.shaderProgramLocations.discardAlphaLevelUniform =\n            this.gl.getUniformLocation(shaderProgram, 'uDiscardAlphaLevel');\n        this.shaderProgramLocations.colorUniform =\n            this.gl.getUniformLocation(shaderProgram, 'uColor');\n    };\n    RibbonsController.prototype.resizeEmitterBuffers = function (emitter, size) {\n        if (size <= emitter.capacity) {\n            return;\n        }\n        size = Math.min(size, emitter.baseCapacity);\n        var vertices = new Float32Array(size * 2 * 3); // 2 vertices * xyz\n        var texCoords = new Float32Array(size * 2 * 2); // 2 vertices * xy\n        if (emitter.vertices) {\n            vertices.set(emitter.vertices);\n        }\n        emitter.vertices = vertices;\n        emitter.texCoords = texCoords;\n        emitter.capacity = size;\n        if (!emitter.vertexBuffer) {\n            emitter.vertexBuffer = this.gl.createBuffer();\n            emitter.texCoordBuffer = this.gl.createBuffer();\n        }\n    };\n    RibbonsController.prototype.updateEmitter = function (emitter, delta) {\n        var now = Date.now();\n        var visibility = this.interp.animVectorVal(emitter.props.Visibility, 0);\n        if (visibility > 0) {\n            var emissionRate = emitter.props.EmissionRate;\n            emitter.emission += emissionRate * delta;\n            if (emitter.emission >= 1000) {\n                // only once per tick\n                emitter.emission = emitter.emission % 1000;\n                if (emitter.creationTimes.length + 1 > emitter.capacity) {\n                    this.resizeEmitterBuffers(emitter, emitter.creationTimes.length + 1);\n                }\n                this.appendVertices(emitter);\n                emitter.creationTimes.push(now);\n            }\n        }\n        if (emitter.creationTimes.length) {\n            while (emitter.creationTimes[0] + emitter.props.LifeSpan * 1000 < now) {\n                emitter.creationTimes.shift();\n                for (var i = 0; i + 6 + 5 < emitter.vertices.length; i += 6) {\n                    emitter.vertices[i] = emitter.vertices[i + 6];\n                    emitter.vertices[i + 1] = emitter.vertices[i + 7];\n                    emitter.vertices[i + 2] = emitter.vertices[i + 8];\n                    emitter.vertices[i + 3] = emitter.vertices[i + 9];\n                    emitter.vertices[i + 4] = emitter.vertices[i + 10];\n                    emitter.vertices[i + 5] = emitter.vertices[i + 11];\n                }\n            }\n        }\n        // still exists\n        if (emitter.creationTimes.length) {\n            this.updateEmitterTexCoords(emitter, now);\n        }\n    };\n    RibbonsController.prototype.appendVertices = function (emitter) {\n        var first = gl_matrix__WEBPACK_IMPORTED_MODULE_3__.clone(emitter.props.PivotPoint);\n        var second = gl_matrix__WEBPACK_IMPORTED_MODULE_3__.clone(emitter.props.PivotPoint);\n        first[1] -= this.interp.animVectorVal(emitter.props.HeightBelow, 0);\n        second[1] += this.interp.animVectorVal(emitter.props.HeightAbove, 0);\n        var emitterMatrix = this.rendererData.nodes[emitter.props.ObjectId].matrix;\n        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.transformMat4(first, first, emitterMatrix);\n        gl_matrix__WEBPACK_IMPORTED_MODULE_3__.transformMat4(second, second, emitterMatrix);\n        var currentSize = emitter.creationTimes.length;\n        emitter.vertices[currentSize * 6] = first[0];\n        emitter.vertices[currentSize * 6 + 1] = first[1];\n        emitter.vertices[currentSize * 6 + 2] = first[2];\n        emitter.vertices[currentSize * 6 + 3] = second[0];\n        emitter.vertices[currentSize * 6 + 4] = second[1];\n        emitter.vertices[currentSize * 6 + 5] = second[2];\n    };\n    RibbonsController.prototype.updateEmitterTexCoords = function (emitter, now) {\n        for (var i = 0; i < emitter.creationTimes.length; ++i) {\n            var relativePos = (now - emitter.creationTimes[i]) / (emitter.props.LifeSpan * 1000);\n            var textureSlot = this.interp.animVectorVal(emitter.props.TextureSlot, 0);\n            var texCoordX = textureSlot % emitter.props.Columns;\n            var texCoordY = Math.floor(textureSlot / emitter.props.Rows);\n            var cellWidth = 1 / emitter.props.Columns;\n            var cellHeight = 1 / emitter.props.Rows;\n            relativePos = texCoordX * cellWidth + relativePos * cellWidth;\n            emitter.texCoords[i * 2 * 2] = relativePos;\n            emitter.texCoords[i * 2 * 2 + 1] = texCoordY * cellHeight;\n            emitter.texCoords[i * 2 * 2 + 2] = relativePos;\n            emitter.texCoords[i * 2 * 2 + 3] = (1 + texCoordY) * cellHeight;\n        }\n    };\n    RibbonsController.prototype.setLayerProps = function (layer, textureID) {\n        var texture = this.rendererData.model.Textures[textureID];\n        if (layer.Shading & _model__WEBPACK_IMPORTED_MODULE_2__.LayerShading.TwoSided) {\n            this.gl.disable(this.gl.CULL_FACE);\n        }\n        else {\n            this.gl.enable(this.gl.CULL_FACE);\n        }\n        if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_2__.FilterMode.Transparent) {\n            this.gl.uniform1f(this.shaderProgramLocations.discardAlphaLevelUniform, 0.75);\n        }\n        else {\n            this.gl.uniform1f(this.shaderProgramLocations.discardAlphaLevelUniform, 0.);\n        }\n        if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_2__.FilterMode.None) {\n            this.gl.disable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            // this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n            this.gl.depthMask(true);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_2__.FilterMode.Transparent) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            this.gl.depthMask(true);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_2__.FilterMode.Blend) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            this.gl.depthMask(false);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_2__.FilterMode.Additive) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFunc(this.gl.SRC_COLOR, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_2__.FilterMode.AddAlpha) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_2__.FilterMode.Modulate) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.ZERO, this.gl.SRC_COLOR, this.gl.ZERO, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        else if (layer.FilterMode === _model__WEBPACK_IMPORTED_MODULE_2__.FilterMode.Modulate2x) {\n            this.gl.enable(this.gl.BLEND);\n            this.gl.enable(this.gl.DEPTH_TEST);\n            this.gl.blendFuncSeparate(this.gl.DST_COLOR, this.gl.SRC_COLOR, this.gl.ZERO, this.gl.ONE);\n            this.gl.depthMask(false);\n        }\n        if (texture.Image) {\n            this.gl.activeTexture(this.gl.TEXTURE0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, this.rendererData.textures[texture.Image]);\n            this.gl.uniform1i(this.shaderProgramLocations.samplerUniform, 0);\n            this.gl.uniform1f(this.shaderProgramLocations.replaceableTypeUniform, 0);\n        }\n        else if (texture.ReplaceableId === 1 || texture.ReplaceableId === 2) {\n            this.gl.uniform3fv(this.shaderProgramLocations.replaceableColorUniform, this.rendererData.teamColor);\n            this.gl.uniform1f(this.shaderProgramLocations.replaceableTypeUniform, texture.ReplaceableId);\n        }\n        if (layer.Shading & _model__WEBPACK_IMPORTED_MODULE_2__.LayerShading.NoDepthTest) {\n            this.gl.disable(this.gl.DEPTH_TEST);\n        }\n        if (layer.Shading & _model__WEBPACK_IMPORTED_MODULE_2__.LayerShading.NoDepthSet) {\n            this.gl.depthMask(false);\n        }\n        /*if (typeof layer.TVertexAnimId === 'number') {\n            let anim: TVertexAnim = this.rendererData.model.TextureAnims[layer.TVertexAnimId];\n            let translationRes = this.interp.vec3(translation, anim.Translation);\n            let rotationRes = this.interp.quat(rotation, anim.Rotation);\n            let scalingRes = this.interp.vec3(scaling, anim.Scaling);\n            mat4.fromRotationTranslationScale(\n                texCoordMat4,\n                rotationRes || defaultRotation,\n                translationRes || defaultTranslation,\n                scalingRes || defaultScaling\n            );\n            mat3.set(\n                texCoordMat3,\n                texCoordMat4[0], texCoordMat4[1], 0,\n                texCoordMat4[4], texCoordMat4[5], 0,\n                texCoordMat4[12], texCoordMat4[13], 0\n            );\n\n            this.gl.uniformMatrix3fv(this.shaderProgramLocations.tVertexAnimUniform, false, texCoordMat3);\n        } else {\n            this.gl.uniformMatrix3fv(this.shaderProgramLocations.tVertexAnimUniform, false, identifyMat3);\n        }*/\n    };\n    RibbonsController.prototype.setGeneralBuffers = function (emitter) {\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, emitter.texCoordBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, emitter.texCoords, this.gl.DYNAMIC_DRAW);\n        this.gl.vertexAttribPointer(this.shaderProgramLocations.textureCoordAttribute, 2, this.gl.FLOAT, false, 0, 0);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, emitter.vertexBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, emitter.vertices, this.gl.DYNAMIC_DRAW);\n        this.gl.vertexAttribPointer(this.shaderProgramLocations.vertexPositionAttribute, 3, this.gl.FLOAT, false, 0, 0);\n    };\n    RibbonsController.prototype.renderEmitter = function (emitter) {\n        this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, emitter.creationTimes.length * 2);\n    };\n    return RibbonsController;\n}());\n\n\n\n//# sourceURL=webpack://war3-model/./renderer/ribbons.ts?");

/***/ }),

/***/ "./renderer/util.ts":
/*!**************************!*\
  !*** ./renderer/util.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"degToRad\": () => (/* binding */ degToRad),\n/* harmony export */   \"getShader\": () => (/* binding */ getShader),\n/* harmony export */   \"isWebGL2\": () => (/* binding */ isWebGL2),\n/* harmony export */   \"mat4fromRotationOrigin\": () => (/* binding */ mat4fromRotationOrigin),\n/* harmony export */   \"rand\": () => (/* binding */ rand),\n/* harmony export */   \"vec3RotateZ\": () => (/* binding */ vec3RotateZ)\n/* harmony export */ });\nfunction mat4fromRotationOrigin(out, rotation, origin) {\n    var x = rotation[0], y = rotation[1], z = rotation[2], w = rotation[3], x2 = x + x, y2 = y + y, z2 = z + z, xx = x * x2, xy = x * y2, xz = x * z2, yy = y * y2, yz = y * z2, zz = z * z2, wx = w * x2, wy = w * y2, wz = w * z2, ox = origin[0], oy = origin[1], oz = origin[2];\n    out[0] = (1 - (yy + zz));\n    out[1] = (xy + wz);\n    out[2] = (xz - wy);\n    out[3] = 0;\n    out[4] = (xy - wz);\n    out[5] = (1 - (xx + zz));\n    out[6] = (yz + wx);\n    out[7] = 0;\n    out[8] = (xz + wy);\n    out[9] = (yz - wx);\n    out[10] = (1 - (xx + yy));\n    out[11] = 0;\n    out[12] = ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n    out[13] = oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n    out[14] = oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n    out[15] = 1;\n    return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction vec3RotateZ(out, a, c) {\n    out[0] = a[0] * Math.cos(c) - a[1] * Math.sin(c);\n    out[1] = a[0] * Math.sin(c) + a[1] * Math.cos(c);\n    out[2] = a[2];\n    return out;\n}\nfunction rand(from, to) {\n    return from + Math.random() * (to - from);\n}\nfunction degToRad(angle) {\n    return angle * Math.PI / 180;\n}\nfunction getShader(gl, source, type) {\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        alert(gl.getShaderInfoLog(shader));\n        return null;\n    }\n    return shader;\n}\nfunction isWebGL2(gl) {\n    return gl instanceof WebGL2RenderingContext;\n}\n\n\n//# sourceURL=webpack://war3-model/./renderer/util.ts?");

/***/ }),

/***/ "./node_modules/dds-parser/dist/es/dds-parser.js":
/*!*******************************************************!*\
  !*** ./node_modules/dds-parser/dist/es/dds-parser.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"decodeDds\": () => (/* binding */ decodeDds),\n/* harmony export */   \"decodeDxt1\": () => (/* binding */ decodeDxt1),\n/* harmony export */   \"decodeDxt3\": () => (/* binding */ decodeDxt3),\n/* harmony export */   \"decodeDxt5\": () => (/* binding */ decodeDxt5),\n/* harmony export */   \"decodeRgtc\": () => (/* binding */ decodeRgtc),\n/* harmony export */   \"parseHeaders\": () => (/* binding */ parseHeaders)\n/* harmony export */ });\n/*!\n    dds-parser v1.0.1\n\thttps://github.com/4eb0da/dds-parser\n\tReleased under the MIT License.\n*/\nvar DDS_MAGIC = 0x20534444;\nvar DDSD_MIPMAPCOUNT = 0x20000;\nvar DDPF_FOURCC = 0x4;\nvar FOURCC_DXT1 = fourCCToInt32('DXT1');\nvar FOURCC_DXT3 = fourCCToInt32('DXT3');\nvar FOURCC_DXT5 = fourCCToInt32('DXT5');\n// var FOURCC_DX10 = fourCCToInt32('DX10')\n// var FOURCC_FP32F = 116 // DXGI_FORMAT_R32G32B32A32_FLOAT\nvar FOURCC_ATI2 = fourCCToInt32('ATI2'); // BC5, RGTC, 3Dc\n// const DDSCAPS2_CUBEMAP = 0x200;\n// const D3D10_RESOURCE_DIMENSION_TEXTURE2D = 3;\n// const DXGI_FORMAT_R32G32B32A32_FLOAT = 2;\n// The header length in 32 bit ints\nvar headerLengthInt = 31;\n// Offsets into the header array\nvar off_magic = 0;\nvar off_size = 1;\nvar off_flags = 2;\nvar off_height = 3;\nvar off_width = 4;\nvar off_mipmapCount = 7;\nvar off_pfFlags = 20;\nvar off_pfFourCC = 21;\nfunction parseHeaders(arrayBuffer) {\n    var header = new Int32Array(arrayBuffer, 0, headerLengthInt);\n    if (header[off_magic] !== DDS_MAGIC) {\n        throw new Error('Invalid magic number in DDS header');\n    }\n    if (!(header[off_pfFlags] & DDPF_FOURCC)) {\n        throw new Error('Unsupported format, must contain a FourCC code');\n    }\n    var blockBytes;\n    var format;\n    var fourCC = header[off_pfFourCC];\n    switch (fourCC) {\n        case FOURCC_DXT1:\n            blockBytes = 8;\n            format = 'dxt1';\n            break;\n        case FOURCC_DXT3:\n            blockBytes = 16;\n            format = 'dxt3';\n            break;\n        case FOURCC_DXT5:\n            blockBytes = 16;\n            format = 'dxt5';\n            break;\n        /* case FOURCC_FP32F:\n            format = 'rgba32f';\n            break; */\n        case FOURCC_ATI2:\n            blockBytes = 16;\n            format = 'ati2';\n            break;\n        /* case FOURCC_DX10:\n            var dx10Header = new Uint32Array(arrayBuffer.slice(128, 128 + 20));\n            format = dx10Header[0];\n            var resourceDimension = dx10Header[1];\n            var miscFlag = dx10Header[2];\n            var arraySize = dx10Header[3];\n            var miscFlags2 = dx10Header[4];\n    \n            if (resourceDimension === D3D10_RESOURCE_DIMENSION_TEXTURE2D && format === DXGI_FORMAT_R32G32B32A32_FLOAT) {\n                format = 'rgba32f';\n            } else {\n                throw new Error('Unsupported DX10 texture format ' + format);\n            }\n            break; */\n        default:\n            throw new Error('Unsupported FourCC code: ' + int32ToFourCC(fourCC));\n    }\n    var flags = header[off_flags];\n    var mipmapCount = 1;\n    if (flags & DDSD_MIPMAPCOUNT) {\n        mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n    // let cubemap = false;\n    // const caps2 = header[off_caps2];\n    /* if (caps2 & DDSCAPS2_CUBEMAP) {\n        cubemap = true;\n    } */\n    var width = header[off_width];\n    var height = header[off_height];\n    var dataOffset = header[off_size] + 4;\n    var texWidth = width;\n    var texHeight = height;\n    var images = [];\n    var dataLength;\n    /* if (fourCC === FOURCC_DX10) {\n        dataOffset += 20;\n    } */\n    /* if (cubemap) {\n        for (let f = 0; f < 6; f++) {\n            if (format !== 'rgba32f') {\n                throw new Error('Only RGBA32f cubemaps are supported');\n            }\n            const bpp = 4 * 32 / 8;\n\n            width = texWidth;\n            height = texHeight;\n\n            // cubemap should have all mipmap levels defined\n            // Math.log2(width) + 1\n            const requiredMipLevels = Math.log(width) / Math.log(2) + 1;\n\n            for (let i = 0; i < requiredMipLevels; i++) {\n                dataLength = width * height * bpp;\n                images.push({\n                    offset: dataOffset,\n                    length: dataLength,\n                    shape: [ width, height ]\n                });\n                // Reuse data from the previous level if we are beyond mipmapCount\n                // This is hack for CMFT not publishing full mipmap chain https://github.com/dariomanesku/cmft/issues/10\n                if (i < mipmapCount) {\n                    dataOffset += dataLength;\n                }\n                width = Math.floor(width / 2);\n                height = Math.floor(height / 2);\n            }\n        }\n    } else { */\n    for (var i = 0; i < mipmapCount; i++) {\n        dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n        images.push({\n            offset: dataOffset,\n            length: dataLength,\n            shape: {\n                width: width,\n                height: height\n            }\n        });\n        dataOffset += dataLength;\n        width = Math.floor(width / 2);\n        height = Math.floor(height / 2);\n    }\n    /* } */\n    return {\n        shape: {\n            width: texWidth,\n            height: texHeight\n        },\n        images: images,\n        format: format,\n        flags: flags,\n        // cubemap: false\n    };\n}\nfunction fourCCToInt32(value) {\n    return value.charCodeAt(0) +\n        (value.charCodeAt(1) << 8) +\n        (value.charCodeAt(2) << 16) +\n        (value.charCodeAt(3) << 24);\n}\nfunction int32ToFourCC(value) {\n    return String.fromCharCode(value & 0xff, (value >> 8) & 0xff, (value >> 16) & 0xff, (value >> 24) & 0xff);\n}\n\n/**\n * Returns a number, which when multiplied with a number of fromBits bits, will convert it to a toBits bits number.\n *\n * For example, 7 * convertBitRange(3, 8) == 255.\n *\n * In other words, if we look at the bits, 111 is the same to 3 bits as 11111111 is to 8 bits.\n */\nfunction convertBitRange(fromBits, toBits) {\n    return ((1 << toBits) - 1) / ((1 << fromBits) - 1);\n}\n\nvar dxt4to8 = convertBitRange(4, 8);\nvar dxt5to8 = convertBitRange(5, 8);\nvar dxt6to8 = convertBitRange(6, 8);\nvar dx1colors = new Uint8Array(16);\nvar dx3colors = new Uint8Array(12);\nvar dx5alphas = new Uint8Array(8);\nvar red = new Uint8Array(8);\nvar green = new Uint8Array(8);\nfunction dx1Colors(out, color0, color1) {\n    var r0 = ((color0 >> 11) & 31) * dxt5to8;\n    var g0 = ((color0 >> 5) & 63) * dxt6to8;\n    var b0 = (color0 & 31) * dxt5to8;\n    var r1 = ((color1 >> 11) & 31) * dxt5to8;\n    var g1 = ((color1 >> 5) & 63) * dxt6to8;\n    var b1 = (color1 & 31) * dxt5to8;\n    // Minimum and maximum colors.\n    out[0] = r0;\n    out[1] = g0;\n    out[2] = b0;\n    out[3] = 255;\n    out[4] = r1;\n    out[5] = g1;\n    out[6] = b1;\n    out[7] = 255;\n    // Interpolated colors.\n    if (color0 > color1) {\n        out[8] = (5 * r0 + 3 * r1) >> 3;\n        out[9] = (5 * g0 + 3 * g1) >> 3;\n        out[10] = (5 * b0 + 3 * b1) >> 3;\n        out[11] = 255;\n        out[12] = (5 * r1 + 3 * r0) >> 3;\n        out[13] = (5 * g1 + 3 * g0) >> 3;\n        out[14] = (5 * b1 + 3 * b0) >> 3;\n        out[15] = 255;\n    }\n    else {\n        out[8] = (r0 + r1) >> 1;\n        out[9] = (g0 + g1) >> 1;\n        out[10] = (b0 + b1) >> 1;\n        out[11] = 255;\n        out[12] = 0;\n        out[13] = 0;\n        out[14] = 0;\n        out[15] = 0;\n    }\n}\nfunction dx3Colors(out, color0, color1) {\n    var r0 = ((color0 >> 11) & 31) * dxt5to8;\n    var g0 = ((color0 >> 5) & 63) * dxt6to8;\n    var b0 = (color0 & 31) * dxt5to8;\n    var r1 = ((color1 >> 11) & 31) * dxt5to8;\n    var g1 = ((color1 >> 5) & 63) * dxt6to8;\n    var b1 = (color1 & 31) * dxt5to8;\n    // Minimum and maximum colors.\n    out[0] = r0;\n    out[1] = g0;\n    out[2] = b0;\n    out[3] = r1;\n    out[4] = g1;\n    out[5] = b1;\n    // Interpolated colors.\n    out[6] = (5 * r0 + 3 * r1) >> 3;\n    out[7] = (5 * g0 + 3 * g1) >> 3;\n    out[8] = (5 * b0 + 3 * b1) >> 3;\n    out[9] = (5 * r1 + 3 * r0) >> 3;\n    out[10] = (5 * g1 + 3 * g0) >> 3;\n    out[11] = (5 * b1 + 3 * b0) >> 3;\n}\nfunction dx5Alphas(out, alpha0, alpha1) {\n    // Minimum and maximum alphas.\n    out[0] = alpha0;\n    out[1] = alpha1;\n    // Interpolated alphas.\n    if (alpha0 > alpha1) {\n        out[2] = (54 * alpha0 + 9 * alpha1) >> 6;\n        out[3] = (45 * alpha0 + 18 * alpha1) >> 6;\n        out[4] = (36 * alpha0 + 27 * alpha1) >> 6;\n        out[5] = (27 * alpha0 + 36 * alpha1) >> 6;\n        out[6] = (18 * alpha0 + 45 * alpha1) >> 6;\n        out[7] = (9 * alpha0 + 54 * alpha1) >> 6;\n    }\n    else {\n        out[2] = (12 * alpha0 + 3 * alpha1) >> 4;\n        out[3] = (9 * alpha0 + 6 * alpha1) >> 4;\n        out[4] = (6 * alpha0 + 9 * alpha1) >> 4;\n        out[5] = (3 * alpha0 + 12 * alpha1) >> 4;\n        out[6] = 0;\n        out[7] = 255;\n    }\n}\nfunction rgColors(out, color0, color1) {\n    // Minimum and maximum red colors.\n    out[0] = color0;\n    out[1] = color1;\n    // Interpolated red colors.\n    if (color0 > color1) {\n        out[2] = (6 * color0 + 1 * color1) / 7;\n        out[3] = (5 * color0 + 2 * color1) / 7;\n        out[4] = (4 * color0 + 3 * color1) / 7;\n        out[5] = (3 * color0 + 4 * color1) / 7;\n        out[6] = (2 * color0 + 5 * color1) / 7;\n        out[7] = (1 * color0 + 6 * color1) / 7;\n    }\n    else {\n        out[2] = (4 * color0 + 1 * color1) / 5;\n        out[3] = (3 * color0 + 2 * color1) / 5;\n        out[4] = (2 * color0 + 3 * color1) / 5;\n        out[5] = (1 * color0 + 4 * color1) / 5;\n        out[6] = 0;\n        out[7] = 1;\n    }\n}\n/**\n * Decodes DXT1 data to a Uint8Array typed array with 8-8-8-8 RGBA bits.\n *\n * DXT1 is also known as BC1.\n */\nfunction decodeDxt1(src, width, height) {\n    var dst = new Uint8Array(width * height * 4);\n    for (var blockY = 0, blockHeight = height / 4; blockY < blockHeight; blockY++) {\n        for (var blockX = 0, blockWidth = width / 4; blockX < blockWidth; blockX++) {\n            var i = 8 * (blockY * blockWidth + blockX);\n            // Get the color values.\n            dx1Colors(dx1colors, src[i] + 256 * src[i + 1], src[i + 2] + 256 * src[i + 3]);\n            // The offset to the first pixel in the destination.\n            var dstI = (blockY * 16) * width + blockX * 16;\n            // All 32 color bits.\n            var bits = src[i + 4] | (src[i + 5] << 8) | (src[i + 6] << 16) | (src[i + 7] << 24);\n            for (var row = 0; row < 4; row++) {\n                var rowOffset = row * 8;\n                var dstOffset = dstI + row * width * 4;\n                for (var column = 0; column < 4; column++) {\n                    var dstIndex = dstOffset + column * 4;\n                    var colorOffset = ((bits >> (rowOffset + column * 2)) & 3) * 4;\n                    dst[dstIndex + 0] = dx1colors[colorOffset + 0];\n                    dst[dstIndex + 1] = dx1colors[colorOffset + 1];\n                    dst[dstIndex + 2] = dx1colors[colorOffset + 2];\n                    dst[dstIndex + 3] = dx1colors[colorOffset + 3];\n                }\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Decodes DXT3 data to a Uint8Array typed array with 8-8-8-8 RGBA bits.\n *\n * DXT3 is also known as BC2.\n */\nfunction decodeDxt3(src, width, height) {\n    var dst = new Uint8Array(width * height * 4);\n    var rowBytes = width * 4;\n    for (var blockY = 0, blockHeight = height / 4; blockY < blockHeight; blockY++) {\n        for (var blockX = 0, blockWidth = width / 4; blockX < blockWidth; blockX++) {\n            var i = 16 * (blockY * blockWidth + blockX);\n            // Get the color values.\n            dx3Colors(dx3colors, src[i + 8] + 256 * src[i + 9], src[i + 10] + 256 * src[i + 11]);\n            var dstI = (blockY * 16) * width + blockX * 16;\n            for (var row = 0; row < 4; row++) {\n                // Get 16 bits of alpha indices.\n                var alphaBits = src[i + row * 2] + 256 * src[i + 1 + row * 2];\n                // Get 8 bits of color indices.\n                var colorBits = src[i + 12 + row];\n                for (var column = 0; column < 4; column++) {\n                    var dstIndex = dstI + column * 4;\n                    var colorIndex = ((colorBits >> (column * 2)) & 3) * 3;\n                    dst[dstIndex + 0] = dx3colors[colorIndex + 0];\n                    dst[dstIndex + 1] = dx3colors[colorIndex + 1];\n                    dst[dstIndex + 2] = dx3colors[colorIndex + 2];\n                    dst[dstIndex + 3] = ((alphaBits >> (column * 4)) & 0xf) * dxt4to8;\n                }\n                dstI += rowBytes;\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Decodes DXT5 data to a Uint8Array typed array with 8-8-8-8 RGBA bits.\n *\n * DXT5 is also known as BC3.\n */\nfunction decodeDxt5(src, width, height) {\n    var dst = new Uint8Array(width * height * 4);\n    var rowBytes = width * 4;\n    for (var blockY = 0, blockHeight = height / 4; blockY < blockHeight; blockY++) {\n        for (var blockX = 0, blockWidth = width / 4; blockX < blockWidth; blockX++) {\n            var i = 16 * (blockY * blockWidth + blockX);\n            // Get the alpha values.\n            dx5Alphas(dx5alphas, src[i], src[i + 1]);\n            // Get the color values.\n            dx3Colors(dx3colors, src[i + 8] + 256 * src[i + 9], src[i + 10] + 256 * src[i + 11]);\n            // The offset to the first pixel in the destination.\n            var dstI = (blockY * 16) * width + blockX * 16;\n            // The outer loop is only needed because JS bitwise operators only work on 32bit integers, while the alpha flags contain 48 bits.\n            // Processing is instead done in two blocks, where each one handles 24 bits, or two rows of 4 pixels.\n            for (var block = 0; block < 2; block++) {\n                var alphaOffset = i + 2 + block * 3;\n                var colorOffset = i + 12 + block * 2;\n                // 24 alpha bits.\n                var alphaBits = src[alphaOffset] + 256 * (src[alphaOffset + 1] + 256 * src[alphaOffset + 2]);\n                // Go over two rows.\n                for (var row = 0; row < 2; row++) {\n                    var colorBits = src[colorOffset + row];\n                    // Go over four columns.\n                    for (var column = 0; column < 4; column++) {\n                        var dstIndex = dstI + column * 4;\n                        var colorIndex = ((colorBits >> (column * 2)) & 3) * 3;\n                        var alphaIndex = (alphaBits >> (row * 12 + column * 3)) & 7;\n                        // Set the pixel.\n                        dst[dstIndex + 0] = dx3colors[colorIndex + 0];\n                        dst[dstIndex + 1] = dx3colors[colorIndex + 1];\n                        dst[dstIndex + 2] = dx3colors[colorIndex + 2];\n                        dst[dstIndex + 3] = dx5alphas[alphaIndex];\n                    }\n                    // Next row.\n                    dstI += rowBytes;\n                }\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Decodes RGTC data to a Uint8Array typed array with 8-8 RG bits.\n *\n * RGTC is also known as BC5, ATI2, and 3Dc.\n */\nfunction decodeRgtc(src, width, height) {\n    var dst = new Uint8Array(width * height * 4);\n    var rowBytes = width * 2;\n    for (var blockY = 0, blockHeight = height / 4; blockY < blockHeight; blockY++) {\n        for (var blockX = 0, blockWidth = width / 4; blockX < blockWidth; blockX++) {\n            var i = 16 * (blockY * blockWidth + blockX);\n            // Get the red colors.\n            rgColors(red, src[i], src[i + 1]);\n            // Get the green colors.\n            rgColors(green, src[i + 8], src[i + 9]);\n            // The offset to the first pixel in the destination.\n            var dstI = (blockY * 8) * width + blockX * 8;\n            // Split to two blocks of two rows, because there are 48 color bits.\n            for (var block = 0; block < 2; block++) {\n                var blockOffset = i + block * 3;\n                // Get 24 bits of the color indices.\n                var redbits = src[blockOffset + 2] + 256 * (src[blockOffset + 3] + 256 * src[blockOffset + 4]);\n                var greenbits = src[blockOffset + 10] + 256 * (src[blockOffset + 11] + 256 * src[blockOffset + 12]);\n                for (var row = 0; row < 2; row++) {\n                    var rowOffset = row * 4;\n                    for (var column = 0; column < 4; column++) {\n                        var dstOffset = dstI + column * 2;\n                        var shifts = 3 * (rowOffset + column);\n                        dst[dstOffset * 2 + 0] = red[(redbits >> shifts) & 7];\n                        dst[dstOffset * 2 + 1] = green[(greenbits >> shifts) & 7];\n                    }\n                    // Next row.\n                    dstI += rowBytes;\n                }\n            }\n        }\n    }\n    return dst;\n}\nfunction decodeDds(src, format, width, height) {\n    if (format === 'dxt1') {\n        return decodeDxt1(src, width, height);\n    }\n    else if (format === 'dxt3') {\n        return decodeDxt3(src, width, height);\n    }\n    else if (format === 'dxt5') {\n        return decodeDxt5(src, width, height);\n    }\n    else if (format === 'ati2') {\n        return decodeRgtc(src, width, height);\n    }\n    throw new Error('Unsupported format');\n}\n\n\n\n\n//# sourceURL=webpack://war3-model/./node_modules/dds-parser/dist/es/dds-parser.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./docs/preview/preview.ts");
/******/ 	
/******/ })()
;